<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="de" xmlns:xml="http://www.w3.org/XML/1998/namespace" lang="de">
<head>
  <title>Willkommen</title>
  <link rel="stylesheet" type="text/css" href="../Styles/style.css"/>
  <meta charset="utf-8"/>
</head>

<body epub:type="frontmatter">
  <div id="wrapper">
    <div id="chapter-1" class="para_Heading_1">
      Willkommen
    </div>

    <p class="para_Text_body">Das Arbeiten mit Geodaten und Landkarten hat durch das globale Positionsbestimmungssystem GPS immer mehr an Relevanz gewonnen. Viele Anwendungen bieten heute sogar online geografische Informationen in Echtzeit an. So finden Sie auch im Internet immer mehr digitale Karten und Anwendungen die mit Geodaten arbeiten.</p>

    <p class="para_Quotations">Geodaten sind Informationen, die eine Zuordnung zu einer räumlichen Lage besitzen. 90&#160;% aller Daten können einem Ort zugeordnet werden und sind somit Geodaten.</p>

    <p class="para_Text_body">Sie haben dieses Buch sicherlich gekauft, weil auch Sie eine digitale Karte auf Ihrer Website anzeigen möchten. Die Grundlagen zu dem, was ich in diesem Buch geschrieben habe, finden Sie alle in den Dokumentationen zu Leaflet oder den jeweiligen Plugins öffentlich im Internet. Diese Dokumentationen habe ich im Buch alle verlinkt. Ich habe das Buch geschrieben, weil ich manchmal gerne mit Beispielen lerne. Oft komme ich hierbei auf Ideen, die trockene Dokumentationen nicht hergeben. Vielleicht geht es Ihnen ja auch so und dieses Buch bringt Ihnen einen Mehrwert zu den schon vorhandenen Dokumentationen.</p>

    <p class="para_Text_body">Außerdem finde ich es immer sehr hilfreich, wenn ich ein bisschen über den Tellerrand hinaus blicke. Hier im Buch finden Sie ein paar solcher Blicke. Wenn es Sie interessiert, können Sie mit mir etwas tiefer in die Welt der geografische Koordinaten blicken. Ich erkläre Ihnen auch die unterschiedlichen Techniken beim Erstellen der Grafiken für die digitalen Karten. Außerdem sehe ich mir mit Ihnen GeoJSON, über die reine Anwendung hinaus, etwas genauer an.</p>

    <div id="chapter-2" class="para_Heading_2">
      Wichtiges zum Buch
    </div>

    <p class="para_Text_body">Ich erkläre Ihnen hier Schritt für Schritt alles das, was ich rund um Leaflet als wichtig ansehe – also alles das, was Sie als Entwickler brauchen, um kreativ arbeiten zu können.</p>

    <p class="para_Text_body">Ich hoffe, dass Ihnen meine Art zu schreiben gefällt. Ich persönlich hätte mir genau dieses Buch zum Start mit Leaflet gewünscht.</p>

    <div id="chapter-3" class="para_Heading_2">
      Was ist Leaflet?
    </div>

    <p class="para_Text_body"><span id="__DdeLink__40588_1681274873">Leaflet.js ist eine Open Source JavaScript-Bibliothek, die Ihnen das Bereitstellen von Karten auf Ihrer Webseite einfach macht.</span>Ihnen das Bereitstellen von Karten auf Ihrer Webseite einfach macht. Open Source bedeutet, dass der Programmcode einsehbar ist. Jeder mit den notwendigen Kenntnissen kann prüfen, wie die Anwendung genau funktioniert. Und was noch wichtiger ist: Jeder kann Leaflet verwenden und verbessern.</p>

    <p class="para_Text_body">Was müssen Sie tun, wenn Sie Leaflet auf Ihrer Website einsetzen möchten? Im Grunde genommen müssen Sie nur zwei Dateien – eine JavaScript Datei und die dazugehörige CSS-Datei einbinden. Wie Sie das genau machen erkläre ich Ihnen im Kapitel Integrieren Sie die notwendigen JavaScript und Cascading Style Sheet (CSS) Dateien. ganz genau.</p>

    <p class="para_Text_body">Das Einbinden der Dateien und bietet Ihnen den Zugriff auf eine Reihe von Funktionen Mithilfe dieser Funktionen können sie unkompliziert eine digitale Karte auf Ihrer Website integrieren. Leaflet unterstützt alle modernen Browser – auch die mobilen Versionen. Das bedeute, dass Sie Ihre Karte so ziemlich überall einsetzen können.</p>

    <p class="para_Text_body">Leaflet selbst legen den Schwerpunkt auf einfache Bedienbarkeit und Performance. Außerdem ist es den Entwicklern von Leaflet wichtig, dass die JavaScript Bibliothek einfach mit einem Plugin erweitert werden kann. Die Programmierschnittstelle ist sehr gut dokumentiert. Als Erweiterungsprogrammierer muss man keine Geheimnisse lüften, um Leaflet erfolgreich mit einem Plugin zu erweitern. Dies ist meiner Meinung nach eine der bedeutendsten Stärken von Leaflet.</p>

    <p class="para_Text_body">Viele namhafte Unternehmen setzten Leaflet ein. Darunter sind Namen wie <a class="extern" href="https://www.flickr.com/">Flickr</a>, <a class="extern" href="https://github.com/">Github</a>, <a class="extern" href="https://www.pinterest.com/">Pinterest</a>, <a class="extern" href="https://www.wikimedia.de/">Wikimedia</a> und <a class="extern" href="http://www.spiegel.de/">Spiegel</a>.</p>

    <p class="para_Text_body">Out-of-the-box können Sie mit Leaflet Marker, Popups, Linien und Formen auf unterschiedlichen Ebenen auf Ihrer Karte anzuzeigen. Sie können Zoomen und das Zentrum der Karte zu bestimmten Koordinaten schieben.</p>

    <div id="chapter-4" class="para_Heading_2">
      Was sollten Sie mitbringen?
    </div>

    <p class="para_Text_body">Ich gehe davon aus, dass Sie über grundlegende HTML und CSS Kenntnisse verfügen. Sie sollten auf alle Fälle wissen, wie Sie Cascading Style Sheets (CSS) und ein JavaScript Skript in ein HTML-Dokument einbinden und wie Sie mit einfachen HTML-Elementen arbeiten. Für das Verständnis der Beispiele sind darüber hinaus grundlegende Javascript Kenntnisse hilfreich.</p>

    <div id="chapter-5" class="para_Heading_2">
      Die Autorin
    </div>

    <p class="para_Text_body">Ich habe über 30 Jahre im öffentlichen Dienst gearbeitet. In dieser Zeit habe ich nebenberuflich das Abitur nachgeholt und im Anschluss ein Studium mit dem Abschluss Master of Computer Science bei der Fernuni Hagen abgeschlossen.</p>

    <p class="para_Text_body">Heute arbeite ich freiberuflich unter anderem mit Leaflet, lebe mit meinem Mann, meiner Tochter, meinem Hund und meiner Katze in einem kleinen Dorf in der Eifel und bin passionierte Joggerin.</p>

    <p class="para_Text_body">Fragen zum Buch können gerne per E-Mail an die E-Mail-Adresse info@astrid-guenther.de gestellt werden.</p>

    <div id="chapter-6" class="para_Heading_1">
      Eine Karte mit Leaflet erstellen
    </div>

    <div id="chapter-7" class="para_Heading_2">
      In diesem Kapitel werden wir …
    </div>

    <p class="para_Text_body">Zunächst zeige ich Ihnen, wie Sie in vier einfachen Schritten eine digitale Karte mit Leaflet in ein HTML Dokument einbinden. Mit Leaflet müssen Sie dafür nicht wissen, was geografische Koordinaten sind und wie die Bilddateien für die Karten erstellt werden. Da dies aber als Hintergrundwissen bei einer eventuellen Fehlersuche hilfreich sein kann, habe ich einen Theorie-Teil in dieses Kapitel eingefügt. Hier erkläre ich Ihnen Wichtiges zum Thema geografische Koordinaten und die übliche Vorgehensweise beim Erstellen und Zuordnen der Imagedateien für diese Karten – die Kachel-Technik. Zum Abschluss lernen Sie dann noch eine Alternative zur Kachel-Technik kennen, den Web-Map-Service.</p>

    <div id="chapter-8" class="para_Heading_2">
      Wir beginnen mit einer einfachen Karte
    </div>

    <p class="para_Text_body"><span id="__DdeLink__451_1591445353">Um eine Karte mit Leaflet auf einer Internetseite anzuzeigen, reichen wenige Schritte aus:</span></p>

    <ol class="list_Text_body" style="list-style-type:decimal;">
      <li><p class="para_Text_body"><span id="__DdeLink__32_1731769084">Integrieren Sie die notwendigen JavaScript und Cascading Style Sheet (CSS) Dateien.</span>Integrieren Sie die notwendigen JavaScript und Cascading Style Sheet (CSS) Dateien.<span id="__DdeLink__454_1591445353">Integrieren Sie die notwendigen JavaScript und Cascading Style Sheet (CSS) Dateien.</span></p></li>
    </ol>

    <p class="para_Quotations">Hinweis:<br/><a class="extern" href="http://www.w3.org/Style/CSS/">CSS, beziehungsweise </a><a class="extern" href="http://www.w3.org/Style/CSS/">Cascading Style Sheets</a>, ist eine Stylesheet-Sprache für digitale Dokumente. Stylesheet-Sprachen werden verwendet, um Dokumenten und Benutzeroberflächen zu gestalten. Dabei ist ein Stylesheet mit einer Formatvorlage zu vergleichen. Grundidee hierbei ist die Trennung von Information (Daten) und Design. Zusammen mit HTML und DOM ist CSS eine der wichtigsten Sprachen im Internet. CSS ist ein so genannter lebendiger Standard und wird vom <a class="extern" href="https://www.w3.org/">World Wide Web Consortium</a> (W3C) permanent weiterentwickelt.</p>

    <ol class="list_Text_body" style="list-style-type:decimal;">
      <li><p class="para_Text_body"><span id="__DdeLink__456_1591445353">Erstellen Sie ein HTML-Element – üblicherweise ein div-Element – in dem Ihre Karte angezeigt werden soll.</span>Erstellen Sie ein HTML-Element – üblicherweise ein div-Element – in dem Ihre Karte angezeigt werden soll.<span id="__DdeLink__20041_334709540">Erstellen Sie ein HTML-Element – üblicherweise ein div-Element – in dem Ihre Karte angezeigt werden soll.</span></p></li>

      <li><p class="para_Text_body"><span id="__DdeLink__458_1591445353">Erstellen Sie das Karten-Objekt.</span></p></li>

      <li><p class="para_Text_body">Fügen Sie eine Schicht mit Kacheln – einen Tile-Layer – zum Karten-Objekt hinzu<span id="__DdeLink__461_1591445353">.</span></p></li>
    </ol>

    <p class="para_Text_body">Vorher erstellen wir eine einfache HTML-Datei. Diese Datei ist die Grundlage für die Beispiele hier im Buch. Den Programmcode für die einfache HTML-Datei sehen Sie im nachfolgenden Programmcodebeispiel. Fügen Sie diesen Programmcode in eine Datei ein und speichern diese ab.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext"><span id="__DdeLink__11023_41650818">&lt;meta charset="utf-8"/</span>&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext"><span id="__DdeLink__433_1591445353">&lt;/body&gt;</span></p>

    <p class="para_Quelltext">&lt;/html<span id="__DdeLink__433_1591445353">&gt;&#160;</span></p>

    <p class="para_Quelltext"><span id="__DdeLink__11128_41650818">&lt;!--index_999.html</span><span id="__DdeLink__11025_41650818">--&gt;</span></p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Ihnen ist sicherlich klar: Ein Aufruf dieser Datei in Ihrem Browser öffnet zunächst nur ein leeres Browser-Fenster. Nur der Titel der Seite ist in der Titelleiste des Browsers abzulesen. In den nächsten vier Kapiteln erfahren Sie, wie Sie die Karte in das Fenster bekommen. Vier Kapitel hört sich aufwendiger an, als es ist. Fangen Sie an und Sie werden sehen, dass Sie schon in wenigen Minuten die Karte präsentieren können.</p>

    <div id="chapter-9" class="para_Heading_3">
      Integrieren Sie die notwendigen JavaScript und Cascading Style Sheet (CSS) Dateien
    </div>

    <p class="para_Text_body">Sie haben zwei Möglichkeiten die notwendigen Dateien in Ihr HTML-Dokument zu integrieren.</p>

    <ol class="list_Text_body" style="list-style-type:decimal;">
      <li><p class="para_Text_body">Binden Sie die Dateien über ein Content Delivery Network (CDN) in Ihr HTML-Dokument ein.</p></li>

      <li><p class="para_Text_body">Kopieren Sie die Dateien und binden Sie die lokale Kopie in Ihr HTML-Dokument ein. Diese zweite Variante habe ich in den Beispielen verwendet.</p></li>
    </ol>

    <p class="para_Quotations">Ein <a class="extern" href="https://de.wikipedia.org/wiki/Content_Delivery_Network">Content Delivery Network</a> oder Content Distribution Network (CDN) ist ein Netz von Servern, die über das Internet verbundenen sind. Diese Server bieten Inhalte zum Download an.</p>

    <div id="chapter-10" class="para_Heading_4">
      Leaflet über ein CDN einbinden
    </div>

    <p class="para_Text_body">Zum einen können Sie Leaflet mithilfe eines CDN nutzen. So müssen Sie die Dateien nicht selbst herunterladen. Es ist lediglich eine Verlinkung nötig. Mit der richtigen Verlinkung wird Leaflet automatisch über das CDN heruntergeladen, wenn ein Website-Besucher Ihre Website aufruft. Im nachfolgenden Programmcodebeispiel sehen Sie den Text für die Verlinkung zum Aufruf der Leaflet-Version 1.2.0 in fett formatiert.</p>

    <p class="para_Quotations">Welche Leaflet-Versionen Ihnen über das CDN zur Verfügung stehen, können Sie jederzeit <span id="__DdeLink__11173_41650818">unter der Adresse http://leafletjs.com/download.html nachlesen.</span>se <a class="extern" href="http://leafletjs.com/download.html">http://leafletjs.com/download.html</a> nachlesen.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE html&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext"><span id="__DdeLink__600_1677780976">&lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" /&gt; &lt;script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"&gt;&lt;/script&gt; </span>2.0/dist/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext"><span id="__DdeLink__600_1677780976">&lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" /&gt; &lt;script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"&gt;&lt;/script&gt; </span></p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_998.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><span id="__DdeLink__11195_41650818">Auch wenn Leaflet nun automatisch über das CDN heruntergeladen wird: Ein Aufruf dieser Datei in Ihrem Browser öffnet immer noch ein leeres Browser-Fenster. Erst im letzten Schritt im Kapitel Fügen Sie eine Schicht mit Kacheln – einen Tile-Layer – zum Karten-Objekt hinzu wird die Karte sichtbar.</span>in Aufruf dieser Datei in Ihrem Browser öffnet immer noch ein leeres Browser-Fenster. Erst im letzten Schritt im Kapitel Fügen Sie eine Schicht mit Kacheln – einen Tile-Layer – zum Karten-Objekt hinzu wird die Karte sichtbar.</p>

    <p class="para_Quotations">Fast alle modernen Browser unterstützen <a class="extern" href="https://en.wikipedia.org/wiki/Subresource_Integrity">Subresource Integrity</a> (SRI) und auch Leaflet verwendet diese Sicherheitsfunktion. SRI steht für die Überprüfung der Integrität von Dateien die im Internet verwendet werden. Mithilfe dieser Funktion können Sie sich davor schützen, dass nachträglich – beispielsweise bei der Übertragung – veränderte Dateien auf Ihrem Server ausgeführt werden. Sie erhalten immer exakt die Version, die Ihnen auch ausgeliefert werden sollte – oder eben eine Fehlermeldung. Dabei wird auf eine Prüfsumme – also einen Hash-Wert – zurückgegriffen, die eine Datei eindeutig erkennbar macht. Um potenzielle Sicherheitsprobleme zu vermeiden, empfehle ich Ihnen SRI zu nutzen, wenn Sie Leaflet über ein CDN einbinden. Wie Sie dies genau handhaben, finden Sie unter der Adresse <a class="extern" href="http://leafletjs.com/download.html">http://leafletjs.com/download.html</a>.</p>

    <div id="chapter-11" class="para_Heading_4">
      Eine lokale Leaflet-Kopie einbinden
    </div>

    <p class="para_Text_body">Eine zweite – vielleicht etwas kompliziertere – Möglichkeit ist, die Leaflet-Dateien selber herunterzuladen. Die aktuellen Versionen finden Sie unter der Adresse <a class="extern" href="http://leafletjs.com/download.html">http://leafletjs.com/download.html</a>. Diese müssen Sie anschließend auf dem eigenen Server verfügbar machen und in Ihre Website einbinden. Diese Variante hat den Vorteil, dass Sie nicht von einem CDN Server abhängig sind. Somit haben Sie mehr Sicherheit. Sie wissen genau, welche Datei Sie auf Ihrem Server abgelegt haben und haben Einfluss auf die Konfiguration Ihres Servers. Nachteilig ist dabei allerdings, dass Sie sich selbst um alles kümmern müssen. Sie müssen selbst die Dateien kopieren und sicherstellen, dass Sie die aktuellste Version von Leaflet nutzen.</p>

    <p class="para_Text_body">Im nachfolgenden Codebeispiel sehen Sie – fett hervorgehoben – das Einbinden von Leaflet unter der Annahme, dass Sie die heruntergeladenen Dateien relativ zu Ihrem HTML-Dokument ein Verzeichnis höher im Unterverzeichnis /leaflet auf Ihrem Webserver abgelegt haben.</p>

    <p class="para_Quotations">Wenn Sie mit <a class="extern" href="http://wiki.selfhtml.org/wiki/HTML/Regeln/Referenzieren_in_HTML#Mit_relativen_Pfadangaben_relativ_zum_Basis-URI_referenzieren">relativen Pfadangaben</a> arbeiten, setzen Sie die Links innerhalb eines Projektes mit Hilfe von Punkten. Der große Vorteil von relativen Pfadangaben ist, dass Sie ein Projekt jederzeit in ein anderes Verzeichnis kopieren können ohne Pfadangaben korrigieren zu müssen. Bei einer relativen Pfadangabe bedeuten die Punkte folgendes:</p>

    <p class="para_Quotations">Ein Punkt gefolgt von einem Schrägstrich (./datei.html) zeigen auf eine Datei, die sich im gleichen Verzeichnis befindet.<br/>Zwei Punkte gefolgt von einem Schrägstrich (../datei.html) zeigen auf eine Datei, die sich ein Verzeichnis höher befindet.<br/>Zweimal zwei Punkte gefolgt von einem Schrägstrich hintereinander (../../datei.html) zeigen auf eine Datei, die sich zwei Verzeichnisse höher befindet.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext"><span id="__DdeLink__11208_41650818">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt; &lt;script src="../leaflet/leaflet.js"&gt;&lt;/script</span></p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script<span id="__DdeLink__11208_41650818">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt; &lt;script src="../leaflet/leaflet.js"&gt;&lt;/script</span></p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_998a.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Auch wenn Leaflet nun geladen wird, zeigt ein Aufruf dieser Datei in Ihrem Browser immer noch ein leeres Browser-Fenster. Erst im letzten Schritt im Kapitel Fügen Sie eine Schicht mit Kacheln – einen Tile-Layer – zum Karten-Objekt hinzu wird die Karte sichtbar.</p>

    <p class="para_Quotations">Vielleicht fragen Sie sich, warum ich den Link zur CSS-Datei mithilfe eines selbst-schließendes Tags – also ein unary Tags – geschrieben habe, aber für das Tag, in dem das Skript eingebunden wird, zwei separate Tags – also ein binary Tag – verwendet habe.</p>

    <p class="para_Quotations">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;<br/>&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quotations">HTML unterscheidet zwischen Tags, die nie Inhalt enthalten können – nämlich den void-Tags –, und solchen, die prinzipiell Inhalt enthalten können. Im ersten Fall muss ein selbst-schließendes unary Tag verwendet werden. Hierzu gehört das <a class="extern" href="https://dev.w3.org/html5/html-author/#the-link-element">&amp;amp;lt;link&amp;amp;gt;-Tag</a>. Im zweiten Fall darf kein selbst-schließendes unary Tag benutzt werden – auch dann nicht, wenn das Tag tatsächlich leer ist. Hierzu gehört das <a class="extern" href="https://dev.w3.org/html5/html-author/#scripting">&amp;amp;lt;script-Tag&amp;amp;gt;</a>.</p>

    <div id="chapter-12" class="para_Heading_4">
      Leaflet performant einbinden – defer oder async
    </div>

    <p class="para_Text_body">In diesem Artikel erkläre ich Ihnen, wie Sie Leaflet in Ihre Website einbinden können, ohne den Ladeprozess der Webseite zu unterbrechen. Falls Sie noch unsicher in der Anwendung von JavaScript sind, überspringen Sie dieses Kapitel am besten erst einmal. Das Beachten der Performance sollten Sie erst angehen, wenn Sie die ersten Karten selbst erstellt haben.</p>

    <div id="chapter-13" class="para_Heading_5">
      Was passiert genau, wenn eine Website mit einem script-Tag geladen wird?
    </div>

    <p class="para_Text_body">Sehen wir uns zunächst einmal an, was genau passiert, wenn ein Browser eine Website mit einem script-Tag lädt.</p>

    <ol class="list_Text_body" style="list-style-type:decimal;">
      <li><p class="para_Text_body">Als Erstes lädt der Browser den Text der HTML-Seite.</p></li>

      <li><p class="para_Text_body">Als Nächstes beginnt er, den HTML-Dode zu analysieren, also zu parsen.</p></li>

      <li><p class="para_Text_body">Nun trifft der Parser auf das script-Tag, welches auf eine externe Skript-Datei verweist.</p></li>

      <li><p class="para_Text_body">Der Browser fordert die Skript-Datei an. Einstweilen blockiert und stoppt der Parser seine Arbeit.</p></li>

      <li><p class="para_Text_body">Je nach Größe der Datei ist das Skript nach einiger Zeit vollständig heruntergeladen und wird anschließend ausgeführt.</p></li>

      <li><p class="para_Text_body">Nun endlich kann der Parser seine Arbeit fortsetzten und den Rest des HTML-Dokuments analysieren.</p></li>
    </ol>

    <p class="para_Text_body">Wenn Sie sich diese Abfolge ansehen, können Sie sich sicherlich vorstellen, dass Punkt vier das performante Laden der Website negativ beeinflusst. Der Ladevorgang der Website macht praktisch eine Pause. Solange bis alle Skripte heruntergeladen sind, passiert nichts mehr. Und wenn es eine Sache gibt, die Website-Besucher nicht mögen, dann ist dies die Wartezeit beim Aufbau der Website.</p>

    <div id="chapter-14" class="para_Heading_5">
      Wie können Sie die Ladezeit positiv beeinflussen?
    </div>

    <p class="para_Text_body">Um das im vorherigen Abschnitt beschriebene Problem zu umgehen wurde früher oft empfohlen, den JavaScript-Code möglichst nah am schließenden &lt;body&gt;-Tag in die Website zu integrieren. Zu dieser Empfehlung gibt es mit HTML5 zwei gute Alternativen – nämlich die Attribute defer und async.</p>

    <p class="para_Text_body">Sofern Sie das Attribut <a class="extern" href="https://wiki.selfhtml.org/wiki/Referenz:HTML/Attribute/defer">defer</a> verwenden wird das Skript ausgeführt, wenn das HTML-Dokument geladen und für die Ansicht umgewandelt, also geparst ist. Zum anderen können Sie das Attribut <a class="extern" href="https://wiki.selfhtml.org/wiki/Referenz:HTML/Attribute/async">async</a> einsetzten. Mit async wird Ihr Skript asynchron mit dem HTML-Dokument ausgeführt. Wenn Sie keines dieser Attribute explizit angegeben, wird erst das vollständige Skript geladen und ausgeführt und erst dann wird das Laden und Parsen des HTML-Dokuments fortgesetzt.</p>

    <div id="chapter-15" class="para_Heading_5">
      Was sollten Sie beim Einsatz von defer oder async mit Leaflet beachten?
    </div>

    <p class="para_Text_body">Um Ihre Karte anzuzeigen, werden Sie nicht nur das Leaflet-Skript laden. Sie werden später noch eigenen JavaSript-Code schreiben. Dieser eigene Code setzt das Laden des Leaflet-Skripts voraus. Aus diesem Grund müssen Sie sicherstellen, dass die Leaflet Bibliothek vollständig geladen ist, bevor Ihr eigener Code ausgeführt wird. Dies können Sie mithilfe des <a class="extern" href="http://wiki.selfhtml.org/wiki/JavaScript/DOM/Event/load">Eventhandlers </a><a class="extern" href="http://wiki.selfhtml.org/wiki/JavaScript/DOM/Event/load">load</a>. Ich zeige Ihnen dies hier an einem ganz einfachen Beispiel.</p>

    <p class="para_Text_body">Obwohl Ihr eigenes Skript voraussetzt, dass Leaflet vollständig geladen ist, können Sie das Attribut async verwenden.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div id="map" style="width: 600px; height: 400px"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script src="mymap_99.js" async&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js" async&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--mymap_99.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">In ihrem eigenen Skript müssen Sie das Laden des vollständigen HTML-Dokuments abwarte.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">window.addEventListener('load', function()</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">var map = L.map('map',</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">center: [50.27264, 7.26469],</p>

    <p class="para_Quelltext">zoom: 10</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(map);</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">false);</p>

    <p class="para_Quelltext">&lt;!--mymap_99.js--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Alle weiteren Beispiele hier im Buch habe ich ohne das Attribut async erstellt, weil ich den Schwerpunkt auf die Verwendung von Leaflet selbst setzen wollte.</p>

    <div id="chapter-16" class="para_Heading_3">
      Erstellen Sie ein HTML-Element, in dem Ihre Karte angezeigt werden soll
    </div>

    <p class="para_Text_body">Das Einfügen eines HTML-Elementes in unser Grundgerüst dürfte für Sie kein Problem darstellen. Der Vollständigkeit halber habe ich diesen Schritt hier trotzdem ausführlich eingefügt.</p>

    <p class="para_Text_body">Setzen Sie ein div-Element mit einer bestimmten ID an die Stelle in Ihrem HTML-Dokument, an der Sie Ihre Karte anzeigen möchten. Stellen Sie dabei sicher, dass der Kartencontainer eine definierte Höhe hat.</p>

    <p class="para_Quotations">Der einfachste Weg für ein HTML-Element eine Höhe zu definieren ist über das style-Attribut – also direkt im Element selbst. Weil hier im Buch Leaflet das Hauptthema ist, verwende ich für das Einbinden von Stylesheets in den Beispielen diese einfache Art. Durch das direkte Festlegen von Formaten gehen allerdings im praktischen Einsatz viele Vorteile verloren. Alternative Varianten zum Einbinden von Stylesheets finden Sie unter anderem unter der Adresse <a class="extern" href="https://wiki.selfhtml.org/wiki/CSS/Einbindung#Stylesheets_in_HTML_einbinden">https://wiki.selfhtml.org/wiki/CSS/Einbindung#Stylesheets_in_HTML_einbinden</a>.</p>

    <p class="para_Text_body">Im nachfolgenden Programmcodeausschnitt sehen Sie die relevante Zeile fett formatiert.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.1.0/dist/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="https://unpkg.com/leaflet@1.1.0/dist/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 180px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_997.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">So, nun ist das HTML-Dokument bereit ein Leaflet Kartenobjekt zu initialisieren und interessante Dinge mit ihm anzustellen.</p>

    <div id="chapter-17" class="para_Heading_3">
      Erstellen Sie das Karten-Objekt
    </div>

    <p class="para_Text_body">Nun wird es spannend. Wir erstellend das erste Skript. Dabei beginnen wir mit dem Erstellend es Kartenobjektes. Im nachfolgenden Programmcodeausschnitt sehen Sie die erste Zeile des Skripts fett formatiert.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext"><span id="__DdeLink__616_1677780976">&lt;!DOCTYPE HTML&gt;</span></p>

    <p class="para_Quelltext"><span>&lt;html&gt; &lt;head&gt; &lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt; &lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.1.0/dist/leaflet.css" /&gt; &lt;script src="https://unpkg.com/leaflet@1.1.0/dist/leaflet.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div style="height: 180px;" id="mapid"&gt;&lt;/div&gt; &lt;script&gt; var mymap = L.map('mapid').setView([50.27264, 7.26469], 13); &lt;/script&gt; &lt;/body&gt; &lt;/html</span></p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.1.0/dist/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="https://unpkg.com/leaflet@1.1.0/dist/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 180px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext"><span id="__DdeLink__618_1677780976">&lt;script&gt; var mymap = L.map('mapid').setView([50.27264, 7.26469], 13); &lt;/script</span></p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 13);</p>

    <p class="para_Quelltext">&lt;/script<span id="__DdeLink__618_1677780976">&lt;script&gt; var mymap = L.map('mapid').setView([50.27264, 7.26469], 13); &lt;/script</span></p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html<span id="__DdeLink__616_1677780976">&lt;!DOCTYPE HTML&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt; &lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.1.0/dist/leaflet.css" /&gt; &lt;script src="https://unpkg.com/leaflet@1.1.0/dist/leaflet.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div style="height: 180px;" id="mapid"&gt;&lt;/div&gt; &lt;script&gt; var mymap = L.map('mapid').setView([50.27264, 7.26469], 13); &lt;/script&gt; &lt;/body&gt; &lt;/html</span></p>

    <p class="para_Quelltext">&lt;!--index_996.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was haben wir genau gemacht? Wir haben mit dem Befehl var mymap = L.map('mapid') ein neues Objekt – oder eine neue Instanz – der Klasse map erstellt und diese mymap genannt.</p>

    <p class="para_Quotations">Sie frage sich nun vielleicht, wie wir eine neue Instanz ohne die Verwendung des Schlüsselwortes new erstellen konnten? Die Antwort ist einfach: Die echten Leaflet-Klassen sind mit einem Großbuchstaben – beispielsweise L.Map – benannt und diese müssen mit new erstellt werden. Es gibt aber Shortcuts mit Kleinbuchstaben – L.map – die aus Bequemlichkeitsgründen von den Leaflet-Programmierern für Sie erstellt wurden. Leaflet setzt hier das Entwurfsmuster <a class="extern" href="https://de.wikipedia.org/wiki/Fabrikmethode">Fabrikmethode</a> (englisch factory method) ein. Das Muster beschreibt, wie ein Objekt durch Aufruf einer Methode anstatt durch direkten Aufruf eines Konstruktors erzeugt wird.<br/><br/>Die Klasse L.map können Sie sich auf Github in der Datei <a class="extern" href="https://github.com/Leaflet/Leaflet/blob/master/src/map/Map.js">map.</a><a class="extern" href="https://github.com/Leaflet/Leaflet/blob/master/src/map/Map.js">js</a> ansehen.</p>

    <p class="para_Text_body">Das Festlegen des Kartenmittelpunktes mithilfe der Koordinaten [50.27264, 7.26469] und der Methode setView() und die Angabe des Zoom von 13 ist optional. Ich empfehle Ihnen aber, diese Werte immer mitzugeben. Es gibt nicht viele Dinge, die ärgerlicher sind, als eine Karte zu sehen, die die ganze Welt anzeigt – die relevanten Daten befinden sich aber alle in Gering, einem kleinen Dorf in der deutschen Eifel.</p>

    <p class="para_Quotations">Sagen Ihnen die Koordinaten [50.27264, 7.26469] nichts und möchten Sie gerne mehr zum Thema geografische Koordinaten erfahren? Dann lesen den Exkurs im Kapitel Exkurs: Geographische Koordinaten.</p>

    <p class="para_Text_body">Sie verfügen nun über ein Leaflet-Karten-Objekt, mit dem Sie eine Karte anzeigen können. Sie müssen nun dem Karten-Objekt noch mitteilen, welche Karte es anzeigen soll. Dies tun wir im nächsten Kapitel, indem wir eine Schicht mit Kacheln, also einen Tile-Layer, zum Karten-Objekt hinzufügen.</p>

    <div id="chapter-18" class="para_Heading_3">
      Fügen Sie eine Schicht mit Kacheln – einen Tile-Layer – zum Karten-Objekt hinzu
    </div>

    <p class="para_Text_body">Der letzte Schritt beim Erstellen der Karte ist das Hinzufügen der Kacheln. Diese Schicht – oder dieser Layer – kann als eine Art Basiskarte angesehen werden. Es handelt sich um die Grafiken, auf der die Objekte, die wir hier im Buch erarbeiten, dargestellt werden. Also die Imagedateien.</p>

    <p class="para_Text_body">Kacheln zum Anzeigen in einem digitalen Kartenobjekt werden als Service von unterschiedlichen Providern angeboten. Im nächsten Kapitel werde ich Ihnen genauer erläutert, dass diese Kacheln normalerweise als 256 Pixel x 256 Pixel Images angeboten werden und warum die URL zum Aufruf der Kacheln die Zeichen <span class="para_Quelltext_inline">{z}/{x}/{y}.png</span> enthält.</p>

    <p class="para_Text_body">Ich verwende hier das Angebot von OpenStreetMap zur Darstellung der Karte. Den Programmcode zum Einbinden des Tile-Servers von OpenStreetMap habe ich für Sie im nachfolgenden Programmcodebeispiel fett hervorgehoben. Die rechtlichen Voraussetzungen zur Verwendung der Kacheln des Openstreetmap-Servers finden Sie unter der Adresse <a class="extern" href="https://operations.osmfoundation.org/policies/tiles">https://operations.osmfoundation.org/policies/tiles</a>.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext"><span id="__DdeLink__29273_1677780976">&lt;!DOCTYPE HTML&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt; &lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.1.0/dist/leaflet.css" /&gt; &lt;script src="https://unpkg.com/leaflet@1.1.0/dist/leaflet.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div style="height: 180px;" id="mapid"&gt;&lt;/div&gt; &lt;script&gt; var mymap = L.map('mapid').setView([50.27264, 7.26469], 13); L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap); &lt;/script&gt; &lt;/body&gt; &lt;/html</span></p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.1.0/dist/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="https://unpkg.com/leaflet@1.1.0/dist/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 180px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 13);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html<span id="__DdeLink__29273_1677780976">&lt;!DOCTYPE HTML&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt; &lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.1.0/dist/leaflet.css" /&gt; &lt;script src="https://unpkg.com/leaflet@1.1.0/dist/leaflet.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div style="height: 180px;" id="mapid"&gt;&lt;/div&gt; &lt;script&gt; var mymap = L.map('mapid').setView([50.27264, 7.26469], 13); L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap); &lt;/script&gt; &lt;/body&gt; &lt;/html</span></p>

    <p class="para_Quelltext"><span id="__DdeLink__16296_1507119220">&lt;!--index_995.html--</span>5.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was haben wir genau gemacht? Wir haben ein TileLayer Objekt erstellt und diesem die URL des OpenStreetMap-Servers übergeben. Außerdem haben wir die Methode addTo() aufgerufen und dieser unser Karten-Objekt mymap als Parameter übergeben. So kann die Kartenschicht nun gezeichnet werden.</p>

    <p class="para_Quotations">Beachten Sie:<br/>Leaflet ist so programmiert, dass Sie die verschiedenen Methoden verketten können. Dies ist möglich, weil die unterschiedlichen Methoden Objekte zurückgeben, die wieder Funktionen enthalten.<br/>So konnten wir .addTo(mymap) einfach an L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png') anhängen.<br/>Alternativ hätten wir zuerst ein TileLayer Objekt erstellen müssen und hätten erst im nächsten Schritt die Methode addTo() aufrufen können<br/>var x = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png');<br/>x.addTo(mymap);</p>

    <p class="para_Text_body">Fertig! Sie haben nun eine vollständige Karte erstellt. Zählen Sie nach: In diesen vier Schritten haben Sie gerade einmal fünf Zeilen Programmcode eingegeben.</p>

    <p class="para_Text_body">Standardmäßig, wir haben ja bisher noch keine Optionen übergeben, sind alle Maus- und Touch-Interaktionen auf der Karte aktiviert. Sie können Zoomen- und in der rechten unteren Ecke befindet sich ein Hinweis darauf, dass die Karte mit Leaflet erstellt wurde. Sie können nun die ganze Welt auf dieser Karte erkunden. Im der nachfolgenden Abbildung sehen Sie die Karte – so sollte diese auch bei Ihnen aussehen, wenn Sie meinem Beispiel gefolgt sind.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild74.png"/>
    </figure>

    <br/>

    <p class="para_Text_body">Bevor wir die Karte nun weiter bearbeiten, sehen wir uns ein bisschen Theorie an. Fall Sie keine Theorie mögen, können sie sofort praktisch im Kapitel Die Karte mit Daten bestücken weitermachen.</p>

    <div id="chapter-19" class="para_Heading_2">
      Exkurs: Geographische Koordinaten
    </div>

    <p class="para_Text_body">Mithilfe von Längen- und Breitengraden können Sie die genaue Position eines jedes Punktes auf der Erdoberfläche angeben.</p>

    <div id="chapter-20" class="para_Heading_3">
      Das Koordinatensystem der Erde
    </div>

    <p class="para_Text_body">Das Grad-Netz der Erde ist ein gedachtes Koordinatensystem auf der Erdoberfläche mit sich rechtwinklig schneidenden Längen- und Breitenkreisen. <span id="__DdeLink__40612_1681274873">Zum Aufbau dieses Koordinatensystems wird unser Erdball zunächst in 180 Breitenkreise und 360 Längenkreise eingeteilt.</span>ieses Koordinatensystems wird unser Erdball zunächst in 180 Breitenkreise und 360 Längenkreise eingeteilt.</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">Die <span id="__DdeLink__40614_1681274873">Breitengrade oder Breitenkreise verlaufen parallel zum Äquator. </span>oder Breitenkreise verlaufen parallel zum Äquator.</p></li>

      <li><p class="para_Text_body"><span id="__DdeLink__40614_1681274873">Breitengrade oder Breitenkreise verlaufen parallel zum Äquator. </span>Längengrade oder Längenkreise verbinden Nord- und Südpol.</p></li>
    </ul>

    <p class="para_Text_body"><span id="__DdeLink__40616_1681274873">Längengrade oder Längenkreise verbinden Nord- und Südpol. </span></p>

    <p class="para_Text_body"><span><br/></span></p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/964er.png"/>

      <figcaption class="para_Illustration">Das Gradnetz der Erde - By CIA, Niteowlneils [Public domain], via Wikimedia Commons</figcaption>
    </figure>

    <br/>

    <p class="para_Text_body">Um die Genauigkeit zu erhöhen, wird jeder Breiten- und Längengrad weiter unterteilt.</p>

    <div id="chapter-21" class="para_Heading_4">
      Breitengrade
    </div>

    <p class="para_Text_body">Die Breitengrade verlaufen von Osten nach Westen. Vielleicht wissen Sie noch aus dem Erdkundeunterricht in der Schule, dass der Äquator im rechten Winkel zur Erdachse verläuft. Er liegt etwa in der Mitte zwischen Nord- und Südpol. Im geografischen Koordinatensystem gilt er als Ausgangspunkt für die Berechnung der Breitenkreise und ihm wird ein Winkel von 0° zugeordnet.</p>

    <figure class="image_container left-align" style="width:256px;">
      <img src="../Images/964br.png" alt=" Abbildung 3: Breitengrade (Latitude) - By Pearson Scott Foresman [Public domain], via Wikimedia Commons"/>

      <figcaption class="para_Illustration">Abbildung 3: Breitengrade (Latitude) - By Pearson Scott Foresman [Public domain], via Wikimedia Commons</figcaption>
    </figure>

    <p class="para_Text_body"><br/></p>

    <div id="chapter-22" class="para_Heading_4">
      Längengrade
    </div>

    <p class="para_Text_body">Die Längengrade auf der Erde verlaufen von Norden nach Süden. Sie umspannen die Erde praktisch. Eine Längenkreishälfte wird als Meridian bezeichnet. Die Längenkreise haben keinen natürlichen Nullpunkt. Heute gilt der Meridan, der den Londoner Stadtteil Greenwich durchläuft, als Nullmeridian und somit als Ausgangspunkt für die Berechnung der Längengrade.</p>

    <figure class="image_container left-align" style="width:256px;">
      <img src="../Images/964la.png" alt=" Abbildung 4: Längengrade (Longitude) - By Pearson Scott Foresman [Public domain], via Wikimedia Commons"/>

      <figcaption class="para_Illustration">Abbildung 4: Längengrade (Longitude) - By Pearson Scott Foresman [Public domain], via Wikimedia Commons</figcaption>
    </figure>

    <p class="para_Text_body"><br/></p>

   

    <div id="chapter-23" class="para_Heading_3">
      Schreibweisen von geografischen Koordinaten
    </div>

    <p class="para_Text_body">Bei der Angabe von geographischen Koordinaten wird heute normalerweise eine von zwei Schreibweisen verwendet: Entweder das <span id="__DdeLink__13530_1716758346">Sexagesimalsystem</span>, welches in Wikipedia verwendet wird, oder die Dezimalschreibweise, die von Computerprogrammen bevorzugt wird. Im Laufe unserer Geschichte haben sich allerdings eine Menge mehr unterschiedlicher Systeme entwickelt.</p>

    <p class="para_Quotations">Falls Sie einmal in die Verlegenheit kommen sollten und eine Koordinate aus einem System in ein anderes umrechnen müssen, kann ich Ihnen die Website <a class="extern" href="https://www.deine-berge.de/Rechner/Koordinaten/Dezimal/51,10">https://www.deine-berge.de/Rechner/Koordinaten/Dezimal/</a><br/>empfehlen, weil diese das Umrechnen zwischen vielen verschiedenen Systemen unterstützt.</p>

    <div id="chapter-24" class="para_Heading_4">
      Das Sexagesimalsystem
    </div>

    <p class="para_Text_body">Das Sexagesimalsystem ist die traditionelle Schreibweise. Dieses System heißt Sexagesimal, weil ein Grad 60 Minuten entspricht und eine Minute 60 Sekunden entspricht. Somit basiert das <a class="extern" href="https://de.wikipedia.org/wiki/Sexagesimalsystem">Sexagesimalsystem</a> auf der Zahl 60.</p>

    <p class="para_Text_body">Jeder Breiten- und Längengrad wird in 60 Minuten mit je 60 Sekunden unterteilt. Eine Koordinate besteht aus drei Teilen.</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">Der erste Teil gibt die Längen- und Breitengrade als Winkel in Grad(°) an. Die Angabe ist ganzzahlig und liegt beim Längengrad zwischen -180 und +180 und beim Breitengrad zwischen -90 und +90. Dabei steht beim Längengrad -90° für die Angabe 90° Süd und +90° für die Angabe 90° Nord. Die Breite wird entsprechend in -180° bis +180° angegeben, anstelle von 180° West bis 180° Ost.</p></li>

      <li><p class="para_Text_body">Der zweite Teil gibt die Minuten an. Die Minuten werden durch eine Prime (′) gekennzeichnet. Jeder Grad hat 60 Minuten. Das bedeutet, dass diese Zahl nicht kleiner als 0 sein darf und kleiner als 60 sein muss.</p></li>

      <li><p class="para_Text_body">Der dritte Teil gibt die Sekunden an. Jede Minute hat 60 Sekunden, die anhand einer Doppelprime (″) erkennbar sind. Genau wie bei den Minuten gilt also auch hier: Die Sekundenzahl darf nicht kleiner als 0 sein und muss kleiner als 60 sein.</p></li>
    </ul>

    <p class="para_Text_body">Eine Breitenminute entspricht auf der Erdoberfläche einer Strecke von circa 1,852 Kilometern. Die Strecke, die einer Längenminute entspricht, beträgt am Äquator ebenfalls 1,852 Kilometer, verringert sich aber zum Pol hin auf 0 Kilometer.</p>

    <p class="para_Text_body"><span id="__DdeLink__13532_1716758346">So hat beispielsweise die Zugspitze die Koordinaten 47°25′16″N, 10°59′7″O.</span>So hat beispielsweise die Zugspitze die Koordinaten 47°25′16″N, 10°59′7″O. Einem Ort, der auf dem westlichen Teil der Südhalbkugel liegt, könnten die Koordinaten -11°27′30″N, -72°47′23″O zugeordnet werden.</p>

    <div id="chapter-25" class="para_Heading_4">
      Die Dezimalschreibweise
    </div>

    <p class="para_Text_body">Parallel zum traditionell gebräuchlichen Sexagesimalsystem hat sich zusätzlich die Angabe der Koordinaten im Dezimalsystem etabliert. Das Dezimalsystem basiert auf der Zahl 10. Dieses System wird vor allem deshalb von Computern gerne benutzt, weil es sich damit recht unkompliziert rechnen lässt.</p>

    <p class="para_Text_body">Die Genauigkeit einer Koordinate in der Dezimalschreibweise hängt sehr von der Anzahl der Nachkommastellen ab. Bei nur zwei Nachkommastellen ergibt sich eine mögliche Abweichung von bis zu einem Kilometer, bei vier Stellen nach dem Komma sind es nur noch zehn Meter Abweichung und sechs Nachkommastellen entsprechen einer Genauigkeit von einem Meter.</p>

    <p class="para_Text_body"><span id="__DdeLink__13587_1716758346">Orten auf der West- und Südhalbkugel wird in der Regel ein Minus (-) vorangestellt.</span>in der Regel ein Minus (-) vorangestellt. Die Breite wird in Dezimalgrad von -90° bis +90° angegeben. Dabei steht -90° für die Angabe 90° Süd und +90° für die Angabe 90° Nord. Die Breite wird entsprechend in -180° bis +180° angegeben, anstelle von 180° West bis 180° Ost. <span id="__DdeLink__13585_1716758346">Beispielsweise werden</span> im Dezimalsystem die Koordinaten der <span id="__DdeLink__13583_1716758346">Zugspitze mit 47.4211, 10.9852 angegeben. Einem Ort, der auf dem westlichen Teil der Südhalbkugel liegt, könnten die Koordinaten -13.163333, -72.545556 zugeordnet werden.</span>mit 47.4211, 10.9852 angegeben. Einem Ort, der auf dem westlichen Teil der Südhalbkugel liegt, könnten die Koordinaten -13.163333, -72.545556 zugeordnet werden.</p>

    <div id="chapter-26" class="para_Heading_2">
      Exkurs: Wie werden Landkarten auf einer Webseite angezeigt?
    </div>

    <p class="para_Text_body">Eine Karte ist im Grunde genommen nichts anderes als die Darstellung einer <a class="extern" href="https://de.wikipedia.org/wiki/Abbild">Abbildung</a> oder einer <a class="extern" href="https://de.wikipedia.org/wiki/Grafik">Grafik</a>. Abbildungen oder Grafiken müssen, damit sie von Computern verarbeitet werden können, in einem <a class="extern" href="https://de.wikipedia.org/wiki/Grafikformat">Grafikformat</a> gespeichert werden. Bevor wir uns genau ansehen, wie die Grafiken für Landkarten erstellt werden, erkläre ich Ihnen nachfolgend kurz die wesentlichen Unterschiede dieser beiden Formate.</p>

    <div id="chapter-27" class="para_Heading_3">
      Grafikformate: Vektoren und Rastergrafiken
    </div>

    <p class="para_Text_body">Ein Grafikformat ist ein Dateiformat, das den Aufbau einer Bilddatei beschreibt. Bei den Grafikformaten können Sie alles in allem zwischen <a class="extern" href="https://de.wikipedia.org/wiki/Vektorgrafik">Vektorgrafi</a><a class="extern" href="https://de.wikipedia.org/wiki/Vektorgrafik">ken</a> und <a class="extern" href="https://de.wikipedia.org/wiki/Rastergrafik">Rastergrafi</a><a class="extern" href="https://de.wikipedia.org/wiki/Rastergrafik">ken</a> unterscheiden.</p>

    <figure class="image_container left-align" style="width:302px;">
      <img src="../Images/930.png" alt=" Abbildung 5: http://help.adobe.com/en_US/Director/11.0/help.html?content=06_bitmaps_01.html todo Lizenz?"/><br/>

      <figcaption class="para_Illustration"><br/></figcaption>
    </figure>

    <div id="chapter-28" class="para_Heading_4">
      Vektoren
    </div>

    <p class="para_Text_body">Vektorgrafiken basieren, im Gegensatz zu Rastergrafiken, nicht auf einem Pixelraster, in dem jedem Bildpunkt ein Farbwert zugeordnet ist. Vektorgrafiken basieren auf einer Formel, die die Elemente, aus denen das Bild aufgebaut ist, genau beschreibt. Ein Kreis kann in einer Vektorgrafik anhand des Mittelpunktes, des Radiuses, der Linienstärke und der Farbe vollständig beschrieben werden. Deshalb müssen auch nur diese Parameter gespeichert werden. Je nach Bildgröße benötigen Vektorgrafiken daher oft weniger Speicherplatzbedarf als Rastergrafiken. Außerdem können sie im Gegensatz zu Rastergrafik stufenlose und verlustfreie skaliert, also vergrößert oder verkleinert werden.</p>

    <div id="chapter-29" class="para_Heading_4">
      Rastergrafiken
    </div>

    <p class="para_Text_body">Rastergrafiken kennen Sie sicherlich auch unter dem Namen Pixelgrafik oder Bitmap. Dieses Format beschreibt die Bilder in Form einer Anordnung von Pixeln als Raster. Pixel sind im Grunde genommen nichts anderes als Bildpunkten, denen jeweils eine Farbe zugeordnet ist. Anders als Vektorgrafiken ist die Bildgröße, also die Breite und Höhe gemessen in Pixeln, und die Farbtiefe ein wesentliches Merkmal des Bildes. Eine Rastergrafik kann nicht stufenlos und verlustfrei vergrößert werden.</p>

    <div id="chapter-30" class="para_Heading_3">
      Vektoren und Rastergrafiken für Karten
    </div>

    <p class="para_Text_body">Karten sollen intuitiv und einfach bedienbar sein. Idealerweise ist jeder Ausschnitt der Karte in jeder Auflösung schnell abrufbar.</p>

    <p class="para_Text_body"><span id="__DdeLink__13739_1716758346">Theoretisch ist dies für Vektorkarten möglich. Praktisch kostet es sehr viel Rechenzeit.</span> Abgesehen von Satellitenaufnahmen oder Luftbildern, die nichts anderes als ein Foto sind, sind Karten in der Regel keine Rastergrafiken. Die Informationen werden als Daten gespeichert, die eher der von Vektorinformation entsprechen. Eine Straße wird beispielsweise mithilfe einer Anzahl von geographischen Punkten, die miteinander verbunden sind, dargestellt. Zusätzlich werden mit diesen Punkten Eigenschaften wie Straßenname und andere beschreibende Daten abgespeichert.</p>

    <p class="para_Text_body">Leider ist die Darstellung dieser Informationen auf einer Webseite in einem Vektorformat schwierig. Nicht alle Browser können gut mit Vektorgrafiken umgehen. Außerdem gibt es viele Geodaten, die große Bereiche auf der Erde abdecken. Diese müssen bei der Verwendung eines Vektorformates auch dann verarbeitet werden, wenn Sie sich nur einen kleinen Bereich in Deutschland ansehen möchten. Mit Rastergrafiken hat kein Browser Probleme. So ziemlich jedem Browser kann eine Rasterkarte anstandslos auf einem Bildschirm anzeigen.</p>

    <p class="para_Text_body">Das einzige Problem bei der Bereitstellung von geographischen Informationen als Rastergrafik ist, dass eine gute Bildqualität eine hohe Auflösung voraussetzt. Dies hat zur Folge, das die Grafikdateien sehr groß werden. Dass Bilddateien, die über das Internet geladen und im Browser angezeigt werden so klein wie möglich sein sollten, ist Ihnen sicher klar.</p>

    <p class="para_Text_body"><span id="__DdeLink__13741_1716758346">Aus diesem Grund werden die Karten in der Regel in kleinen Ausschnitten im Vorfeld berechnet und in einem Rasterformat gespeichert.</span>Aus diesem Grund werden die Karten in der Regel in kleinen Ausschnitten im Vorfeld berechnet und in einem Rasterformat gespeichert.<span id="__DdeLink__13743_1716758346">Aus diesem Grund werden die Karten in der Regel in kleinen Ausschnitten im Vorfeld berechnet und in einem Rasterformat gespeichert.</span><a class="extern" href="https://de.wikipedia.org/wiki/Portable_Network_Graphics">PNG</a> verwendet. Wie dies genau gemacht wird, erkläre ich Ihnen im nächsten Kapitel.</p>

    <div id="chapter-31" class="para_Heading_3">
      Wir unterteilen die Welt in Kacheln
    </div>

    <p class="para_Text_body">Um eine Karte anzuzeigen, wird die Welt also in Ausschnitte, genau genommen in Quadrate zerlegt und die Quadrate werden Tiles, das ist das englische Wort für Kacheln, genannt. Jedes Quadrat ist exakt 256 Pixel x 256 Pixel groß.</p>

    <p class="para_Quotations">Nicht nur OpenStreetMap, auch die Google Maps API unterteilt ihr Kartenbilder in Kacheln. Wenn Sie die Website <a class="extern" href="https://www.google.de/maps">https://www.google.de/maps</a> aufrufen und eine neue Vergrößerungsstufe wählen wird ermittelt, welche Daten erforderlich sind. Diese Daten werden dann in einen Satz mit Kacheln übersetzt und angezeigt.</p>

    <p class="para_Text_body">Dabei bildet die Zoom-Stufe 0 die ganze Welt auf ein Quadrat ab. Teilt man den Erdumfang von 40.038 Kilometern durch die 256 Pixel der Kachel sieht man im Ergebnis, dass ein Pixel 156,4 Kilometer darstellt. Das ist noch nicht sehr detailliert. Bis Zoom-Stufe 19 ändert sich aber eine ganze Menge. In der nachfolgenden Tabelle sehen Sie, dass bei Zoom-Stufe 19 ein Pixel einem Bereich von 0,3 Metern auf der Erde entspricht. Damit kann man schon etwas anfangen!</p>

    <div style="align: justify;">
      <table style="margin-top: 0px; margin-bottom: 0px; width: 100%;">
        <tbody>
          <tr>
            <td style="padding: 3px; border-top-width: 1px; border-top-style: solid; border-top-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Text_body"><span id="__DdeLink__29177_1677780976">Zoom­-Stufe</span>Stufe</p>
            </td>

            <td style="padding: 3px; border-top-width: 1px; border-top-style: solid; border-top-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Text_body">Kachel­-Anzahl</p>
            </td>

            <td style="padding: 3px; border-top-width: 1px; border-top-style: solid; border-top-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Text_body"><span id="__DdeLink__29179_1677780976">Kachel-Breite</span>Breite</p>
            </td>

            <td style="padding: 3px; border: 1px solid rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Text_body">Ein Pixel entspricht</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">0</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">1</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Text_body"><span id="__DdeLink__29181_1677780976">40.038 </span>Kilometer</p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Text_body">156 Kilometer</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">1</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">4</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Text_body"><span id="__DdeLink__29183_1677780976">20.019 </span>Kilometer</p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Text_body">78 Kilometer</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">2</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">16</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">10.009 Kilometer</p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">39 Kilometer</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">3</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">64</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">5.004 Kilometer</p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">19,5 Kilometer</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">4</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">256</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">2502 Kilometer</p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">9,8 Kilometer</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">..</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents"><br/><br/></p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents"><br/><br/></p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents"><br/><br/></p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">15</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">1 Milliarde</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">1224 Meter</p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">4,8 Meter</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">16</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">4 Milliarden</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">612 Meter</p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">2,4 Meter</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">17</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">17 Milliarden</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">306 Meter</p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">1,2 Meter</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">18</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents"><span id="__DdeLink__29186_1677780976">69 Milliard</span>illiarden</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">153 Meter</p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">0,6 Meter</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">19</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">275 Milliarden</p>
            </td>

            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">76 Meter</p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">0,3 Meter</p>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Die vollständige Tabelle können Sie unter der Adresse <a class="extern" href="http://wiki.openstreetmap.org/wiki/Zoom_levels">http://wiki.openstreetmap.org/wiki/Zoom_levels</a> mit weiteren Angaben im Internet abrufen.</p>

    <p class="para_Text_body">Vielleicht probieren Sie nun das vorangegangene Beispiel aus und wundern sich, dass Sie die Karte nur bis zur Zoom-Stufe 18 vergrößern können. Das liegt daran, dass bei dieser Karte standardmäßig die Option maxZoom mit 18 gesetzt ist. Sie können diese Option jedoch überschreiben. Wie das geht sehen Sie im nachfolgenden Programmcodebeispiel fett formatiert. Weitere Informationen finden Sie im Kapitel Stamen.</p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 180px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 13);</p>

    <p class="para_Quelltext">console.log(mymap);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {minZoom: 0, maxZoom: 19}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_995a.html--&gt;</p>

    <p class="para_Quotations">Vielleicht sind Sie es gewohnt, bei der Darstellung von Landkarten in den Zahlen eines Maßstabs zu denken? Bei digitalen Karten gibt es keinen Maßstab im Sinne einer Papierkarte, weil die Druckauflösung nicht bekannt ist und ein Maßstab hiervon abhängt. Ein Maßstab kann immer nur relativ zur Auflösung angegeben werden.</p>

    <div id="chapter-32" class="para_Heading_3">
      Wie weiß Leaflet welche Kacheln angezeigt werden sollen?
    </div>

    <p class="para_Text_body">Nun haben wir jede Menge Kacheln und möchten mit diesen gerne eine digitale Karte mit Leaflet auf unserer Website anzeigen. Woher weiß Leaflet, welche Kacheln es vom verlinkten Server laden und an welcher Stelle es diese anzeigen soll? Dazu sehen wir uns zunächst einmal an, wie die Kacheln genau erstellt werden.</p>

    <p class="para_Text_body">Um ein Bild von einer Karte in kleine überschaubare Abschnitte zu teilen, unterscheidet der Server, der die Kacheln erzeugt, zwischen verschiedenen Zoom-Stufen und für jede Zoom-Stufe erstellt er ein eigenes Set von Kacheln – praktisch eine eigene Ebene. Da der Standard für die Größe der Kacheln 256 Pixel x 256 Pixel beträgt, ist bei der Zoom-Stufe 0 die gesamte Welt in einer einzigen 256 Pixel x 256 Pixel großen Kachel enthalten. In der Tabelle im vorherigen Kapitel konnten Sie ja schon erkennen, dass jede Erhöhung der Zoom-Stufe auch die Anzahl der Kacheln erhöht.</p>

    <p class="para_Text_body">Um die Kacheln in der richtigen Weise zu benutzen, muss es ein Muster geben, das befolgt werden kann, um sicherzustellen, dass die richtige Kachel vom Server geladen werden und vom Browser des Clients an der richtigen Stelle angezeigt werden.</p>

    <p class="para_Text_body">In Kapitel hatten wir die URL für den Tile Server mit http://{s} .tile.openstreetmap.org/{z}/{x}/{y}.png todo angegeben.</p>

    <p class="para_Text_body">Der Teil {z}/{x}/{y} des Pfades zur png-Datei ist die Beschreibung der Speicherung der Dateien.</p>

    <p class="para_Text_body">Das Verzeichnis {z} bezeichnet die zu ladende Zoom-Stufe.</p>

    <p class="para_Text_body">Das Verzeichnis {x} bezeichnet die Position auf der x-Achse der Kachel.</p>

    <p class="para_Text_body">Der {y} Bezeichner ist der Name der Fliese, die seine Position auf der y-Achse beschreibt.</p>

    <p class="para_Text_body">Der {s} steht für eine Subdomain.</p>

    <p class="para_Text_body">Zum Beispiel wird die niedrigste Zoom-Stufe (die mit der größten Ansicht des Bereichs pro Fliese) als 0/0 / 0.png gespeichert.</p>

    <figure class="image_container left-align" style="width:172px;">
      <img src="../Images/Bild13.png" alt=" Abbildung 6: Zoom Level 0. © OpenStreetMap contributors"/>

      <figcaption class="para_Illustration">Abbildung 6: Zoom Level 0. © OpenStreetMap contributors</figcaption>
    </figure>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Die vollständige URL, vielleicht möchten Sie meine Ausführungen überprüfen, ist http://a.tile.openstreetmap.org/0/0/0.png.</p>

    <p class="para_Quotations">Tiefer gehend können Sie das Thema auf der Website von OpenStreetMap, genau unter der Adresse <a class="extern" href="http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames">http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames</a> nachlesen.</p>

    <p class="para_Text_body">Bei der Zoom-Stufe 1 sind die Fliesen wie in der nachfolgenden Grafik dargestellt, angeordnet.</p>

    <figure class="image_container left-align" style="width:334px;">
      <img src="../Images/Bild12.png" alt=" Abbildung 7: Zoom Level 1. © OpenStreetMap contributors"/>

      <figcaption class="para_Illustration">Abbildung 7: Zoom Level 1. © OpenStreetMap contributors</figcaption>
    </figure>

    <br/>

    <p class="para_Text_body">Unter der Adresse <a class="extern" href="http://a.tile.openstreetmap.org/1/0/0.png">http://a.tile.openstreetmap.org/</a><a class="extern" href="http://a.tile.openstreetmap.org/1/0/0.png">1</a><a class="extern" href="http://a.tile.openstreetmap.org/1/0/0.png">/0/0.png</a> finden sie die Grafik in der linken oberen Ecke.</p>

    <div id="chapter-33" class="para_Heading_2">
      Schöne Kartenlayer
    </div>

    <p class="para_Text_body">Nachdem das Erstellen der ersten Karte so einfach vonstatten ging, fragen Sie sich sicher, ob es genauso einfach ist eine alternative Darstellung – also Kacheln eines anderen Providers – zu verwenden. Die Antwort ist: Ja, es ist geanuso einfach!</p>

    <p class="para_Text_body">Ich zeige Ihnen dies hier anhand von zwei weiteren Providern, nämlich <a class="extern" href="https://www.thunderforest.com/">Thunderforest</a> und <a class="extern" href="https://stamen.com/">Stamen</a>.</p>

    <p class="para_Quotations">Hinweis:<br/>Mögen Sie die Karten von GoogleMaps und möchten Sie gerne die Kacheln von Google nutzen? Wenn Sie dies zusammen mit Leaflet tun möchten, dann ist das Plugin <a class="extern" href="https://gitlab.com/IvanSanchez/Leaflet.GridLayer.GoogleMutant">L.GridLayer.GoogleMutant</a> sicherlich etwas für.</p>

    <div id="chapter-34" class="para_Heading_3">
      Thunderforest
    </div>

    <p class="para_Text_body">Todod bei Anmeldung apikey</p>

    <p class="para_Text_body">Thunderforest bietet Ihnen gleich neun verschiedene Kachel-Varianten. Sie erreichen die Kacheln alle über die gleiche URL, lediglich das Unterverzeichnis muss angepasst werden.</p>

    <p class="para_Quotations">Um Kacheln von Thunderforest zu verwenden, müssen Sie ein Zugriffstoken anfordern <a class="extern" href="https://www.thunderforest.com/docs/apikeys/">https://www.thunderforest.com/docs/apikeys/</a> und dieses als an das Ende der URL des Tile-Servers anhängen. Zum Beispiel so:<br/>https://{s}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png?apikey=YourApiKey</p>

    <p class="para_Text_body">Die Kacheln der OpenCyclemap finden Sie beispielsweise unter der Adresse https://{s}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png?apikey=YourApiKey abgelegt. Die Transportvariante finden Sie unter der Adresse https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey= YourApiKey.</p>

    <p class="para_Text_body"><span id="__DdeLink__41119_70561617">Die nachfolgende Tabelle zeigt Ihnen eine Übersicht über die verschiedenen Kartenstile von Thunderforest.</span></p>

    <div style="align: justify;">
      <table style="margin-top: 0px; margin-bottom: 0px; width: 100%;">
        <tbody>
          <tr>
            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild17.png" alt="Bild17"/>
              </figure>

              <p class="para_Table_Contents">cycle</p>
            </td>

            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild18.png" alt="Bild18"/>
              </figure>

              <p class="para_Table_Contents">transport</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild19.png" alt="Bild19"/>
              </figure>

              <p class="para_Table_Contents">landscape</p>
            </td>

            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild20.png" alt="Bild20"/>
              </figure>

              <p class="para_Table_Contents">outdoors</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild21.png" alt="Bild21"/>
              </figure>

              <p class="para_Table_Contents">Transport-dark</p>
            </td>

            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild22.png" alt="Bild22"/>
              </figure>

              <p class="para_Table_Contents">Spinal-map</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild23.png" alt="Bild23"/>
              </figure>

              <p class="para_Table_Contents">pioneer</p>
            </td>

            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild24.png" alt="Bild24"/>
              </figure>

              <p class="para_Table_Contents">Mobile-atlas</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild25.png" alt="Bild25"/>
              </figure>

              <p class="para_Table_Contents">neigborhood</p>
            </td>

            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <p class="para_Table_Contents"><br/><br/></p>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Wenn Sie Thunderforest verwenden möchten, müssen Sie als Tile Layer nur die im nachfolgenden Beispiel zu sehende URL angeben. Der nachfolgende Beispiel-Programmcode zeigt Ihnen ein vollständiges Beispiel.</p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 13);</p>

    <p class="para_Quelltext">L.tileLayer('https://{s}.tile.thunderforest.com/landscape/{z}/{x}/{y}.png?apikey=MeinZugriffstoken').addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_994.html--&gt;</p>

    <h6 id="chapter-35" class="para_Heading_3">Stamen</h6>

    <p class="para_Text_body">Stamen legt den Schwerpunkt auf gutes Design. Informationen zu den Karten von Stamen finden Sie auf der Website <a class="extern" href="http://maps.stamen.com/">http://maps.stamen.com/</a>. Die nachfolgende Tabelle zeigt Ihnen drei Kartenstile von Stamen.</p>

    <div style="align: justify;">
      <table style="margin-top: 0px; margin-bottom: 0px; width: 100%;">
        <tbody>
          <tr>
            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild14.png" alt="Bild14"/>
              </figure>

              <p class="para_Table_Contents">toner 996.png</p>
            </td>

            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild15.png" alt="Bild15"/>
              </figure>

              <p class="para_Table_Contents">watercolor 996.png</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild16.png" alt="Bild16"/>
              </figure>

              <p class="para_Table_Contents">terraint 996.png</p>
            </td>

            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <p class="para_Table_Contents"><br/><br/></p>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Beim Einbinden eine Karte von Stamen müssen Sie zusätzlich eine JavaScript Datei einbinden. Wie Sie den StamenTileLayer genau nutzen, können Sie im nachfolgenden Programmcodebeispiel ablesen.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script type="text/javascript" src="http://maps.stamen.com/js/tile.stamen.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 13);</p>

    <p class="para_Quelltext">var layer = new L.StamenTileLayer("watercolor");</p>

    <p class="para_Quelltext">mymap.addLayer(layer);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_993.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quotations">Achtung:<br/>Der StamenTileLayer unterstützt nicht alle Zoom-Stufen. Wenn Sie den Typ watercolor verwenden, sehen Sie zum Beispiel mit der Zoom-Stufe 19 eine leere graue Fläche. Um dies zu verhindern, können Sie, die Optionen des StamenTileLayer überschreiben. Setzten Sie dafür nach der Instanziierung die Options maxZoom auf 19. So bleibt die Zoom-Stufe 19 als Ebene auf der Karte erhalten. Setzen Sie dann die Option maxNativeZoom auf 18. Dies bewirkt, dass Leaflet nicht versucht, Kachel für eine Zoom-Stufe 19 zu laden. Stattdessen benutze Leaflet auch bei Zoom-Stufe 19 die Kacheln der Zoom-Stufe 18 – skaliert diese aber auf die Größe der Zoom-Stufe 19.<br/><br/>…<br/>var layer = new L.StamenTileLayer("watercolor");<br/>layer.options.maxZoom = 19;<br/>layer.options.maxNativeZoom = 18;<br/>…</p>

    <p class="para_Text_body">ESRI ist ein weiterer Anbieter von Basiskarten. Was ESRI genau ist und wie Sie die Karten dieses Institius einbinden können erkläre ich Ihnen im Kapitel ESRI.</p>

    <p class="para_Quotations">Hinweis:<br/>Haben Sie noch nicht den Kartenstil gefunden, den Sie suchen oder sind Sie einfach nur neugierig, welche Karten sonst noch angeboten werden? Verweise auf weitere Tile-Server-Provider finden Sie unter der Adresse: <a class="extern" href="http://wiki.openstreetmap.org/wiki/Tiles">http://wiki.openstreetmap.org/wiki/Tiles</a></p>

    <div id="chapter-36" class="para_Heading_2">
      Images als Layer – Web-Map-Service
    </div>

    <p class="para_Text_body"><span id="__DdeLink__31232_458207731">Sie haben eine Satellitenaufnahme und möchten diese als Schicht in Ihrer Karte anzeigen.</span>Schicht in Ihrer Karte anzeigen. Oder denken Sie an die Wetterwarnkarten des Deutschen Wetterdienstes, die im Grunde genommen nur aus eingefärbten Polygonen besteht. E<span id="__DdeLink__31234_458207731">in Umwandeln dieser Grafikdateien in 275 Milliarden Kacheln, wie es im vorherigen Kapitel beschriebenen wurde, wäre zwar möglich – Sie können sich aber sicher vorstellen, dass es für diese Aufgabenstellungen adäquatere alternative Techniken gibt.</span></p>

    <div id="chapter-37" class="para_Heading_3">
      Eine einfache Leaflet-Karte mithilfe des Web-Map-Services erstellen
    </div>

    <p class="para_Text_body"><span id="__DdeLink__31240_458207731">Eine Alternative zur schon beschriebenen Kachel-Technik ist der Web-Map-Service (WMS).</span>schon beschriebenen Kachel-Technik ist der <a class="extern" href="https://de.wikipedia.org/wiki/Web_Map_Service">Web-Map-Service</a> (WMS). Der WMS ist ein Spezialfall eines <a class="extern" href="https://de.wikipedia.org/wiki/Webservice">Web </a><a class="extern" href="https://de.wikipedia.org/wiki/Webservice">Services</a>. Dieser Service bietet Ihnen <span id="__DdeLink__31242_458207731">eine Schnittstelle zum Abrufen Landkartenausschnitten über das Internet</span>ausschnitten über das Internet.</p>

    <p class="para_Text_body">Ein WMS bietet drei Funktionen, die von einem Benutzer angefragt werden können. Die Funktionen GetCapabilities und GetFeatureInfo können wir hier vernachlässigen. Diese sind für die Anzeige der Karte nicht relevant. Die Funktion GetMap ist die, die wir uns genauer ansehen sollten und die auch von Leaflet angewendet wird. Bei einem Aufruf von GetMap<span id="__DdeLink__31244_458207731"> liefert der WMS ein georeferenziertes Rasterbild aus.</span></p>

    <p class="para_Quotations">Hinweis:<br/>Bei einem georeferenzierten Rasterbild handelt es sich um eine Bilddatei, der raumbezogene Informationen hinzugefügt wurden. Das hört sich zunächst einmal sehr theoretisch an. Praktisch können Sie sich den Vorgang der Georeferenzierung auch so veranschaulichen: Stellen Sie sich vor, dass das Bild auf einen speziellen Bereich auf der Erde gelegt wird. Gleichzeitig wird das Gradnetz der Erde dieses Bereichs mit dem Bild verbunden. Im Ergebnis wird also jedem Pixel des Bildes eine Koordinate – in Relation zum <span id="__DdeLink__12702_1056280011">Gradnetz</span> der Erde – zugewiesen. Georeferenzierung kennen Sie vielleicht auch unter dem Begriff Geokodierung, Geotagging oder Verortung.</p>

    <p class="para_Text_body">Innerhalb des GetMap Aufrufs können Sie Optionen auswählen. Zum Beispiel können Sie angeben, welchen Koordinatensystem zugrundelegt werden soll, welchen Kartenausschnitt Sie sehen möchten, wie groß der Kartenausschnitt sein soll oder welches Ausgabeformat Sie gerne hätten.</p>

    <p class="para_Text_body">Mit folgendem URL-Abruf erhalten Sie beispielsweise ein speziell zusammengestelltes Bild vom GeoWebservice des <a class="extern" href="http://www.dwd.de/">Deutschen Wetterdienstes</a>.</p>

    <p class="para_Text_body"><a class="extern" href="https://maps.dwd.de/geoserver/dwd/wms?service=WMS&amp;version=1.1.1&amp;request=GetMap&amp;layers=dwd:Warnungen_Landkreise&amp;bbox=6.15,51.76,14.90,55.01&amp;width=512&amp;height=418&amp;srs=EPSG:4326&amp;format=image%2Fjpeg&amp;CQL_FILTER=EC_II%20IN%20('51','52">https://maps.dwd.de/geoserver/dwd/wms?service=WMS&amp;amp;version=1.1.1&amp;amp;request=GetMap&amp;amp;layers=dwd:Warnungen_Landkreise&amp;amp;bbox=6.15,51.76,14.90,55.01&amp;amp;width=512&amp;amp;height=418&amp;amp;srs=EPSG:4326&amp;amp;format=image%2Fjpeg&amp;amp;CQL_FILTER=EC_II%20IN%20('51','52</a>')</p>

    <p class="para_Text_body">Probieren Sie es aus: Der Aufruf der URL im Browser produziert eine Karte mit allen momentan ausgegebenen gültigen Windwarnungen der Kategorie 51 (Windböen) und 52 (Sturmböen) für Norddeutschland. Ausgegeben im JPG-Format. Sie sehen allerdings nur dann ein Bild, wenn tatsächlich Wetterwarnungen vorhanden sind.</p>

    <p class="para_Quotations">Hinweis:<br/>Eine Anleitung zur Nutzung des GeoWebservices des Deutschen Wetterdienstes finden Sie unter der Adresse <a class="extern" href="http://www.dwd.de/DE/wetter/warnungen_aktuell/objekt_einbindung/einbindung_karten_geowebservice.pdf?__blob=publicationFile&amp;v=2">http://www.dwd.de/DE/wetter/warnungen_aktuell/objekt_einbindung/einbindung_karten_geowebservice.pdf?__blob=publicationFile&amp;amp;v=2</a>.<br/><br/>Detaillierte technische Informationen zum Web Mapping Service (WMS) allgemein finden Sie unter der Adresse <a class="extern" href="http://www.opengeospatial.org/standards/wms">http://www.opengeospatial.org/standards/wms</a> im Internet.</p>

    <p class="para_Text_body">Ich möchte Sie hier an dieser Stelle nicht mit trockenen Dokumentationen von Web Services langweilen. Ausführliche Informationen zu den möglichen Funktionen eines Geoservers finden Sie unter <a class="extern" href="http://docs.geoserver.org/">http://docs.geoserver.org</a>. Viel lieber zeige ich Ihnen ein praktisches Beispiel. Im nachfolgenden Programmcodeausschnitt sehen Sie die wesentlichen Zeilen fett hervorgehoben.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">var dwd = L.tileLayer.wms("https://maps.dwd.de/geoserver/dwd/wms", {</p>

    <p class="para_Quelltext">layers:'dwd:bluemarble',</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_992.html--&gt;</p>

    <p class="para_Text_body"><br/></p>

    <p class="para_Text_body">Wenn Sie dieses Beispiel mit dem Laden eines L.tileLayer ohne WMS vergleichen, ist eigentlich nur eine Zeile anders.</p>

    <p class="para_Text_body">Anstelle der Zeile</p>

    <p class="para_Text_body">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Text_body">haben wir</p>

    <p class="para_Text_body">L.tileLayer.wms("https://maps.dwd.de/geoserver/dwd/wms", {</p>

    <p class="para_Text_body"><span id="__DdeLink__13018_1056280011">layers</span>:'<span id="__DdeLink__12931_1056280011">dwd:bluemarble</span>',</p>

    <p class="para_Text_body">}).addTo(mymap);</p>

    <p class="para_Text_body">eingefügt.</p>

    <p class="para_Text_body"><span id="__DdeLink__13793_1716758346">Wichtig ist, dass Sie dem Aufruf L.tileLayer.wms richtige Adresse zum WMS Service mitgeben und die Option layers passend setzten. Für alle anderen Parameter setzt Leaflet oder der Service selbst Standardwerte ein – falls Sie nichts Spezielles angeben,.</span>L.tileLayer.wms richtige Adresse zum WMS Service mitgeben und die Option layers passend setzten. Für alle anderen Parameter setzt Leaflet oder der Service selbst Standardwerte ein – falls Sie nichts Spezielles angeben,.</p>

    <p class="para_Quotations">Hinweis:<br/>Die Leaflet Klasse L.tileLayer.wms können Sie sich <a class="extern" href="https://github.com/Leaflet/Leaflet/blob/79e8bf724c4da1d7a95f758026c974ae96dfbc5c/src/layer/tile/TileLayer.WMS.js#L31">hier</a> auf Github ansehen.</p>

    <p class="para_Text_body">Nun möchten Sie sicher wissen, was vom WMS-Service geliefert wird, oder? Dann öffnen Sie doch die HTML-Datei des vorherigen Beispiels in Ihrem Browser. Mit dem Layer dwd:bluemarble können Sie ein Satellitenbild zu Ihrer Karte hinzufügen. Wie das genau aussieht, sehen Sie zusätzlich im nachfolgenden Bild.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild26.png" alt="Bild26"/>
    </figure>

    <p class="para_Text_body">995.png</p>

    <div id="chapter-38" class="para_Heading_3">
      L.tileLayer.wms über L.tileLayer.wms
    </div>

    <p class="para_Text_body">Das Schöne an WMS-Layern ist, das Sie diese übereinander legen können. Das nachfolgende Beispiel enthält Programmcode, der im Ergebnis gleichzeitig drei WMS-Layer übereinander anzeigt.</p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext"><br/>L.tileLayer.wms("https://maps.dwd.de/geoserver/dwd/wms",</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">transparent: true,</p>

    <p class="para_Quelltext">layers:'dwd:bluemarble',</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext"><br/>L.tileLayer.wms("https://maps.dwd.de/geoserver/dwd/wms",</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">format: 'image/png',</p>

    <p class="para_Quelltext">transparent: true,</p>

    <p class="para_Quelltext">layers:'dwd:Warngebiete_Kreise'</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext"><br/>L.tileLayer.wms("https://maps.dwd.de/geoserver/dwd/wms",</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">format: 'image/png',</p>

    <p class="para_Quelltext">transparent: true,</p>

    <p class="para_Quelltext">layers:'dwd:Warnungen_Gemeinden_vereinigt'</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;<br/>&lt;!--index_991.html--&gt;</p>

    <p class="para_Text_body">Dieses Beispiel ist meiner Meinung nach selbsterklärend. Wichtig ist, dass Sie die <span id="__DdeLink__13795_1716758346">Option transparent mit true übergeben</span>transparent mit true übergeben. Andernfalls sehen Sie nur einen – nämlich den obersten – Layer. Bereiche, die nicht mit Daten gefüllt sind, werden weiß gezeichnet. Außerdem müssen Sie die <span id="__DdeLink__13797_1716758346">Option format mit 'image/png' belegen</span>format mit 'image/png' belegen. Leaflet lädt ansonsten automatisch das Format 'image/jpeg' und dieses Format unterstützt keine Transparenz.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild27.png" alt="Bild27"/>
    </figure>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">994.png</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild28.png" alt="Bild28"/>
    </figure>

    <p class="para_Text_body">994a.png</p>

    <div id="chapter-39" class="para_Heading_3">
      L.tileLayer.wms und L.tileLayer zusammen auf einer Karte
    </div>

    <p class="para_Text_body">Das nachfolgende Beispiel zeigt Ihnen, dass Sie einen normalen L.tileLayer mit einem L.tileLayer.wms kombinieren können.</p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext"><br/>L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext"><br/>L.tileLayer.wms("https://maps.dwd.de/geoserver/dwd/wms",</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">format: 'image/png',</p>

    <p class="para_Quelltext">transparent: true,</p>

    <p class="para_Quelltext">layers:'dwd:Warngebiete_Kreise'</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext"><br/>L.tileLayer.wms("https://maps.dwd.de/geoserver/dwd/wms",</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">transparent: true,</p>

    <p class="para_Quelltext">format: 'image/png',</p>

    <p class="para_Quelltext">layers:'dwd:Warnungen_Gemeinden_vereinigt'</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;<br/>&lt;!--index_990.html--&gt;</p>

    <p class="para_Text_body">Für dieses Beispiel gilt das, was ich im vorherigen Beispiel bezüglich Transparenz und Format geschrieben haben, auch. Zusätzlich müssen Sie darauf achten, dass Sie den L.tileLayer nicht über die L.tileLayer.wms Layer legen. Der L.tileLayer ist nicht transparent, er würde die L.tileLayer.wms Layer vollständig abdecken.</p>

    <p class="para_Text_body">Die nachfolgende Abbildung zeigt Ihnen die zwei L.tileLayer.wms über dem L.tileLayer.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild29.png" alt="Bild29"/>
    </figure>

    <p class="para_Text_body">994b.png</p>

    <p class="para_Quotations">Achtung:<br/>Wenn auf Ihrer Karte der Layer dwd:Warnungen_Gemeinden_vereinigt nicht angezeigt wird, kann es auch daran liegen, dass es zur Zeit keine Warnungen gibt. Dieser Layer enthält nur Daten, wenn aktuell Wetterwarnungen vorliegen. Die grünen Polygone, die die Landkreise darstellen, im Layer dwd:Warngebiete_Kreise werden dahingegen immer eingeblendet.</p>

    <div id="chapter-40" class="para_Heading_2">
      In diesem Kapitel haben wir …
    </div>

    <p class="para_Text_body">Sie können nun eine digitale Karte mit Leaflet in ein HTML Dokument einbinden, Sie wissen was geografische Koordinaten sind und wie die Imagedateien für digitale Karten erstellt werden. Darauf aufbauend können wir nun im nächsten Kapitel Ihre digitale Karte mit Geodaten füllen.</p>

    <div id="chapter-41" class="para_Heading_1">
      Die Karte mit Daten bestücken
    </div>

    <p class="para_Text_body">Bisher haben wir ausschließlich vollständige Layer zur Karte hinzugefügt. Wie das Beispiel mit den Warnhinweisen vom Deutschen Wetterdienst zeigt, können diese Layer dynamisch mit Daten bestückt werden.</p>

    <div id="chapter-42" class="para_Heading_2">
      In diesem Kapitel werden wir …
    </div>

    <p class="para_Text_body">In diesem Kapitel zeige ich Ihnen nun, wie Sie selbst Layer mit Daten erstellen und als Schicht auf Ihrer Karte anzeigen können. Dabei verwenden wir einfache geometrischen Objekten, die in einem zweidimensionalen Raum definiert sind. Konkret sind die Punkte, Linien und Polygone.</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">Punkte/Marker:<br/>Das einfachste Objekt ist ein Punkt. Auf einer Landkarte wird ein Punkt mit Zahlen – den Koordinaten – beschrieben. In Leaflet gibt neben dem Punkte noch ein komfortableres Element – nämlich den Marker. Auf einer realen Karte könnte ein Marker zum Beispiel einen interessanten Ort, also einen Point of Interest (POI) darstellen.</p></li>

      <li><p class="para_Text_body">Linien:<br/>Eine Linie besteht aus mindestens zwei Punkten, die miteinander verbunden sind.</p></li>

      <li><p class="para_Text_body">Polygone:<br/>Ähnlich wie eine Linie besteht ein Polygon aus mehreren miteinander verbundenen – zusätzlich ist beim Polygon auch der erste Punkt mit dem letzten Punkte verbunden. Somit stellt ein Polygon eine geschlossene Figur dar.</p></li>
    </ul>

    <p class="para_Text_body">Wie können Sie nun <span id="__DdeLink__1061_736041745">Punkte, Marker, Linien und Polygone</span>Marker, Linien und Polygone auf Ihre Karte zeichnen? Das ist Thema dieses Kapitels. Und auch, wie und warum Sie die Objekte in Layer-Gruppen und Feature-Gruppen gruppieren können oder sollten.</p>

    <p class="para_Text_body">Zusätzlich sehen wir uns an, wie Sie die Karte mobil passend anzeigen und wie Sie auf Ereignisse reagieren können.</p>

    <div id="chapter-43" class="para_Heading_2">
      Punkte, Marker, Linien, Polygone, Rechtecke und Kreise als Leaflet Objekte
    </div>

    <p class="para_Text_body">Leaflet biete Ihnen jede Menge verschiedene Objekte. Beginnen wir mit den einfachsten – den Punkten und Markern.</p>

    <div id="chapter-44" class="para_Heading_3">
      Punkte und Marker
    </div>

    <p class="para_Text_body">Ich gehen wir noch einmal von unserer Basiskarte aus. Zur besseren Übersicht habe ich Ihnen das HTML-Grundgerüst dazu nachfolgend noch einmal abgedruckt.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext"><span id="__DdeLink__11049_41650818">&lt;!--index_989.html--</span>&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">In der nächsten Abbildung sehen Sie der Vollständigkeit halber auch noch einmal die Karte, die angezeigt werden sollte, wenn Sie die vorhergehende HTML-Datei in einem Browser öffnen.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild30.png" alt="Bild30"/>
    </figure>

    <p class="para_Text_body">993.png</p>

    <p class="para_Text_body">Diese Karte ist bisher nicht sehr spannend. Landkarten, die Straßen und Orte anzeigen findet man wie Sand am Meer. Auf Ihrer Website geht es sicher um etwas Besonderes und so möchten Sie sicher auch einen besonderen Ort hervorheben oder ein besonderes Thema beschreiben. Beginnen wir mit einem besonderen Ort – beziehungsweise einem besonderen Punkt.</p>

    <div id="chapter-45" class="para_Heading_4">
      Punkte
    </div>

    <p class="para_Text_body">Die Leaflet <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#point">Klasse </a><a class="extern" href="http://leafletjs.com/reference-1.1.0.html#point">Point</a> stellt einen Punkt mit X- und Y-Koordinaten in Pixeln dar. Die Koordinaten werden in Leaflet im Dezimalformat formatiert. Die erste Zahl steht für die Latitude – als die geografische Breite – und die zweite Zahl für die Longitude – also die geografische Länge.</p>

    <p class="para_Quotations">Achtung:<br/>Sie haben richtig gelesen. Bei einem Punkt arbeite Leaflet nicht mit geografischen Koordinaten. Hier müssen Sie tatsächlich die Pixel der Grafik, mit die Karte angezeigt wird, angeben.</p>

    <p class="para_Text_body"><span id="__DdeLink__13895_1716758346">Objekte vom Typ Point sind in Leaflet nicht zur Anzeige gedacht. </span>Vielmehr wird mit Ihnen gearbeitet. Zum Beispiel gibt es die <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#map-methods-for-modifying-map-state">Methode </a><a class="extern" href="http://leafletjs.com/reference-1.1.0.html#map-methods-for-modifying-map-state">panBy(&amp;amp;lt;Point&amp;amp;gt; </a><a class="extern" href="http://leafletjs.com/reference-1.1.0.html#map-methods-for-modifying-map-state">offset, &amp;amp;lt;Pan options&amp;amp;gt; options?)</a> mit der die Karte um eine gegebene Anzahl von Pixeln verschoben werden kann.</p>

    <p class="para_Text_body">Sie merken schon. Ein Objekt vom Typ Point ist nicht das, was wir möchten, wenn wir einen Punkt auf der Karte hervorheben möchten. Um einen Punkt als Besonders zu markieren, möchten Sie sicher eher einen Marker mit Informationen an dieser Stelle – also an den geografischen Koordinaten – anzeigen. Und für diesen Zweck bietet Leaflet ein spezielles Objekt – das Marker Objekt.</p>

    <p class="para_Text_body">Im nachfolgenden Programmcode-Beispiel sehen wir uns aber zunächst kurz an, was Sie mit einem Punkt anstellen können.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var point = L.point(400, 600);</p>

    <p class="para_Quelltext">mymap.panBy(point);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_988.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Wenn Sie das vorhergehende HTML-Dokument in Ihrem Browser öffnen, müssen Sie ganz schnell gucken. Nur dann können Sie erkennen, dass die Karte unmittelbar nach dem Öffnen um 400 Pixel nach rechts und 600 Pixel nach unten geschoben wird.</p>

    <p class="para_Quotations">Hinweis:<br/>Anstelle von<br/><br/>var point = L.point(400, 600);<br/>mymap.panBy(point);<br/><br/>hätten Sie auch ganz einfach<br/><br/>mymap.panBy([400, 600]);<br/><br/>oder<br/><br/>mymap.panBy(L.point(400, 600));<br/><br/>schreiben können.</p>

    <p class="para_Text_body">An dieser Stelle füge ich kein Bild, auf dem das Ergebnis dargestellt ist, ein. Das Verschieben der Karte wäre auf diesem nicht zu erkennen.</p>

    <div id="chapter-46" class="para_Heading_4">
      Marker
    </div>

    <p class="para_Text_body"><span id="__DdeLink__13897_1716758346">Die Leaflet Klasse Marker wird verwendet, um anklickbare und/oder verschiebbare Symbole auf einer Karte anzuzeigen.</span><a class="extern" href="http://leafletjs.com/reference-1.1.0.html#marker">Klasse </a><a class="extern" href="http://leafletjs.com/reference-1.1.0.html#marker">Marker</a> wird verwendet, um anklickbare und/oder verschiebbare Symbole auf einer Karte anzuzeigen. Die Klasse erweitert die Klasse <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#layer">Layer</a>. In der Regel wird dieses Symbol mit einem erweitert, auf dem weitere Informationen zu der entsprechenden Stelle auf der Erde enthalten sind.</p>

    <p class="para_Text_body">Machen wir mit einem einfachen Beispiel weiter und fügen einen einfachen Marker zu unserer bisher noch langweiligen Karte hinzu.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.1.0/dist/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="https://unpkg.com/leaflet@1.1.0/dist/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var myMarker = L.marker([50.27264, 7.26469],</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">title:"Gering",</p>

    <p class="para_Quelltext">alt:"Ein schönes kleines Dorf auf dem Maifeld in der Eifel",</p>

    <p class="para_Quelltext">draggable:true</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_987.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was haben wir genau gemacht? Mit dem Text var myMarker = L.marker([50.27264, 7.26469]) haben wir ein Marker Objekt, das an den Koordinaten [50.27264, 7.26469] angezeigt wird, instanziiert. Im Weiteren haben wir die Optionen title, alt und <span id="__DdeLink__13144_1777524942">draggable</span>. Dabei setzen Sie mit title den Tooltip der erscheint, wenn Sie die Maus über den Marker bewegen, mit alt setzen Sie den Text für das alt Attribut des Marker Bildes und mit draggable legen Sie fest, ob der Marker mithilfe der Maus auf der Karte bewegt werden kann – oder nicht.</p>

    <p class="para_Text_body">Das Image-Tag des Markers fügt Leaflet wie folgt ins HTML-Dokument ein:</p>

    <p class="para_Text_body">&lt;img src="file:///images/marker-icon.png" class="leaflet-marker-icon leaflet-zoom-animated leaflet-interactive leaflet-marker-draggable" style="margin-left: -12px; margin-top: -41px; width: 25px; height: 41px; transform: translate3d(637px, 350px, 0px); z-index: 350;" title="Gering" alt="Ein schones kleines Dorf auf dem Maifeld in der Eifel" tabindex="0"&gt;</p>

    <p class="para_Text_body">Alle Optionen und Methoden, die Ihnen die Leaflet Klasse Marker bietet, können Sie in der <a class="extern" href="http://leafletjs.com/reference-1.2.0.html#marker">Leaflet Dokumentation</a> nachlesen.</p>

    <p class="para_Text_body">Im nächsten Bild sehen Sie den Marker in die Karte integriert. Als Bild wurde das <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#icon-default">Standardbild</a> verwendet, da die Option icon nicht gesetzt wurde. Wie Sie ein benutzerdefiniertes Icon verwenden können, sehen wir uns in Kapitel Custom Markers genauer an. Den Marker können Sie im Browser mit der Maus bewegen, da die Option draggable auf true gesetzt wurde. Probieren Sie es aus!</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild31.png" alt="Bild31"/>
    </figure>

    <p class="para_Text_body">992.png</p>

    <p class="para_Quotations">Hinweis:<br/>Sie müssen für einen Marker keine Variable instanziieren. Sie können den Marker auch ganz einfach so zur Karte hinzufügen:<br/><br/>L.marker([50.27264, 7.26469], { title:"Gering", alt:"Ein schönes kleines Dorf auf dem Maifeld in der Eifel", draggable:true } ).addTo(mymap);<br/><br/>Beachten Sie dabei aber folgendes: Falls Sie den Marker später einmal modifizieren möchten, benötigen Sie einen Namen.Andernfalls können Sie den Marker nicht identifizieren und somit auch nicht zum Ändern auswählen.</p>

    <div id="chapter-47" class="para_Heading_3">
      Objekte, die aus mehr als einem Punkte bestehen
    </div>

    <div id="chapter-48" class="para_Heading_4">
      Linien
    </div>

    <p class="para_Text_body"><span id="__DdeLink__14139_1716758346">Linien können Sie in Leaflet mit der Klasse Polyline erstellen.</span>Linien können Sie in Leaflet mit der Klasse <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#polyline">Polyline</a> erstellen.<span id="__DdeLink__14141_1716758346">Linien können Sie in Leaflet mit der Klasse Polyline erstellen.</span>Die Klasse Polyline erweitert die abstrakte Klasse <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#path">Path</a>. Diese Klasse ermöglicht es Ihnen eine einfache Linie oder mehrere aneinandergereihte Liniensegmente zu erstellen.</p>

    <p class="para_Text_body">Im nachfolgenden Programmcodebeispiel habe ich den Text, der für die Erstellung des Polyline Objektes verantwortlich ist, fett formatiert.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var polyline = L.polyline([</p>

    <p class="para_Quelltext">[50.27264, 7.26469],</p>

    <p class="para_Quelltext">[51.27264, 7.26469],</p>

    <p class="para_Quelltext">[51.27264, 6.26469]],</p>

    <p class="para_Quelltext">{color: 'red', weight:8}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_986.html--&gt;</p>

    <p class="para_Text_body">986.html</p>

    <p class="para_Text_body">Im Beispiel wird ein Polyline Objekt instanziiert, das aus drei Punkten besteht. Außerdem werden die Optionen color und weigth verwendet. Diese Optionen erbt die Klasse Polyline von der Klasse Path. Konkret legen wir im Beispiel mit color = 'red' die Farbe der Linie fest – diese soll rot sein. Mit weight:8 bestimmen wir, dass die Linie 8 Pixel dick sein soll.</p>

    <p class="para_Text_body">In der nächsten Abbildung sehen Sie genau diese Linie.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild32.png" alt="Bild32"/>
    </figure>

    <p class="para_Text_body">991.png</p>

    <div id="chapter-49" class="para_Heading_4">
      Polygone
    </div>

    <p class="para_Text_body"><span id="__DdeLink__14143_1716758346">Ein Polygone ist eine geschlossene Linie – also eine Linie die einen Innenbereich von einem Außenbereich abtrennt.</span>ne Linie – also eine Linie die einen Innenbereich von einem Außenbereich abtrennt. Mit der Klasse <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#polygon">Polygone</a> können Sie, wie der Name schon sagt, Polygone Objekte auf Ihre Karte zeichnen. Die Klasse Polygone erweiterte die Klasse Polyline und somit auch die Klasse Path. Alle Optionen dieser Klasse können Sie also auch mit einem Polygone Objekt nutzen.</p>

    <p class="para_Quotations">Achtung:<br/>Die Punkte, die Sie beim Erstellen eines Polygons übergeben, sollten als letzten Punkt keinen Punkt enthalten, der dem ersten entspricht. Es ist besser, solche Punkte herauszufiltern. Leaflet schließt Ihr Polygon automatisch und, wenn der erste Punkt mit dem letzten Punkt übereinstimmt, kann dies zu Problemen führen.</p>

    <p class="para_Text_body">Wie Sie ein Polygon in Leaflet erstellen, zeigt Ihnen der nachfolgende Programmcode und das konkrete Polygon sehen im darauf folgenden Bild. Alle Methoden und Optionen, die Sie auf ein Polygon Objekt anwenden könne, finden Sie in der Leaflet Dokumentation.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var polygon = L.polygon([</p>

    <p class="para_Quelltext">[50.27264, 7.26469],</p>

    <p class="para_Quelltext">[51.27264, 7.26469],</p>

    <p class="para_Quelltext">[51.27264, 6.26469]],</p>

    <p class="para_Quelltext">{color: 'red', weight:2, fillColor:'green', fillOpacity:0.5}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_985.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild33.png" alt="Bild33"/>
    </figure>

    <p class="para_Text_body">990.png</p>

    <div id="chapter-50" class="para_Heading_3">
      Rechtecke und Kreise
    </div>

    <p class="para_Text_body"><span id="__DdeLink__14146_1716758346">Um einen Kreis oder ein Rechteck zu erstellen benötigt man eigentlich keine eigene Klasse. Man könnten diese mit der Klasse Polygon erzeugen. Beim Kreis wäre dies allerdings sehr mühselig</span>Kreis oder ein Rechteck zu erstellen benötigt man eigentlich keine eigene Klasse. Man könnten diese mit der Klasse Polygon<span id="__DdeLink__1150_736041745">Polygon</span> und auch für ein Rechteck gibt es einfacherer Verfahrensweisen. Leaflet bietet deshalb für diese beiden Formen spezielle Klassen an.</p>

    <p class="para_Text_body">Das Zeichnen von Rechtecken und Kreisen ist kein Hexenwerk. Der Vollständigkeit halber finden Sie aber in den nächsten beiden Kapiteln jeweisls ein Beispiel für beide Formen.</p>

    <div id="chapter-51" class="para_Heading_4">
      Rechtecke
    </div>

    <p class="para_Text_body">Der nachfolgende Programmcode zeigt Ihnen an einem Beispiel, wie Sie ein Rechteck – also ein Objekt vom Typ <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#rectangle">Rectangle</a> – in eine Leaflet Karte einfügen.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var myRectangle = L.rectangle([</p>

    <p class="para_Quelltext">[50.27264, 7.26469],</p>

    <p class="para_Quelltext">[51.27264, 6.26469]</p>

    <p class="para_Quelltext">],</p>

    <p class="para_Quelltext">{color: "yellow", weight: 8, fillColor:"purple"}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_984.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><span id="__DdeLink__14196_1716758346">Als Parameter geben Sie für das Rechteck immer die diagonal versetzten beiden Ecken an. Dabei ist es egal, in welcher Reihenfolge Sie diese angeben.</span>diagonal versetzten beiden Ecken an. Dabei ist es egal, in welcher Reihenfolge Sie diese angeben.</p>

    <p class="para_Text_body">var myRectangle = L.rectangle([</p>

    <p class="para_Text_body">[50.27264, 7.26469],</p>

    <p class="para_Text_body">[51.27264, 6.26469]</p>

    <p class="para_Text_body">])</p>

    <p class="para_Text_body">sieht auf der Karte genauso aus, wie</p>

    <p class="para_Text_body">var myRectangle = L.rectangle([</p>

    <p class="para_Text_body">[51.27264, 6.26469],</p>

    <p class="para_Text_body">[50.27264, 7.26469]</p>

    <p class="para_Text_body">]).</p>

    <p class="para_Text_body">Und wie das Rechteck aussieht, zeigt Ihnen die nachfolgende Abbildung.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild34.png" alt="Bild34"/>
    </figure>

    <p class="para_Text_body">989.png</p>

    <p class="para_Text_body">In diesem Zusammenhang ist vielleicht ganz interessant wie Leaflet das Koordinatensystem der Erde verarbeitet. Dieses Koordinatensystem ist ja kein gewöhnliches Koordinatensystem, sondern ein sphärisches. Unter einer Sphäre versteht man in der Mathematik ganz vereinfacht ausgedrückt die Oberfläche einer Kugel. Und auf einer Kugel führen, im Gegensatz zu einer Ebene, immer zwei Linien auf direktem Wege zu einem anderen Punkt. Die nachfolgenden Abbildungen zeigen Ihnen, dass Leaflet dieses Problem vereinfacht. Es behandelt das sphärische Koordinatensystem als normales Koordinatensystem. Um von dem Punkt [50, -180] zum Punkt [51, 180] zu gelangen, muss man mit Leaflet einmal um die ganze Erde laufen.</p>

    <div style="align: justify;">
      <table style="margin-top: 0px; margin-bottom: 0px; width: 100%;">
        <tbody>
          <tr>
            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/929a.png" alt="Bild88"/>
              </figure>

              <p class="para_Table_Contents">929a.png</p>
            </td>

            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/929b.png" alt="Bild89"/>
              </figure>

              <p class="para_Table_Contents"><br/><br/></p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/929c.png" alt="Bild90"/>
              </figure>

              <p class="para_Table_Contents"><br/><br/></p>
            </td>

            <td style="padding: 3px; text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/929d.png" alt="Bild91"/>
              </figure>

              <p class="para_Table_Contents"><br/><br/></p>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <p class="para_Text_body"><br/><br/></p>

    <div id="chapter-52" class="para_Heading_4">
      Kreise
    </div>

    <p class="para_Text_body">Anhand des nachfolgenden Programmcode können Sie erkennen, wie ein Kreis – also ein Objekt vom Typ <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#circle">Circle</a> – in eine Leaflet Karte eingefügt wird.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">L.circle(</p>

    <p class="para_Quelltext">[50.27264, 7.26469],</p>

    <p class="para_Quelltext">100000,</p>

    <p class="para_Quelltext">{color: "red", weight: 8, fillColor:"green"}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_983.html--&gt;</p>

    <p class="para_Text_body"><span id="__DdeLink__14198_1716758346">Ein Kreis wird anhand seines Mittelpunktes und seines Radius definiert.</span> Der Radius muss dabei in Metern angegeben. In den Beispielen habe ich den Rand meist mit 8 Pixel festgelegt. Diese Breite passt auch für die Zoom-Stufe 7. Probieren Sie doch einmal aus, wie der Rand aussieht, wenn Sie die Karte vergrößern. Sie werden feststellen, dass man irgendwann nur noch den Rand sieht und es wichtig sein könnte, dessen Größe immer relativ zum Zoom zu setzen.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild35.png" alt="Bild35"/>
    </figure>

    <p class="para_Text_body">988.png</p>

    <div id="chapter-53" class="para_Heading_2">
      Mehrere Poly- Objekte auf einer Ebene
    </div>

    <p class="para_Text_body"><span id="__DdeLink__14200_1716758346">In den vorhergehenden Beispielen haben wir jedes Element auf einem separaten Layer – also einer separaten Ebenen – abgebildet. Spätestens, wenn Sie selbst unterschiedliche Geodaten auf einer Karte darstellen möchten werden Sie sich wünschen, Objekte mit gleichen Eigenschaften auf einem Layer gruppieren zu können.</span>n den vorhergehenden Beispielen haben wir jedes Element auf einem separaten Layer – also einer separaten Ebenen – abgebildet. Spätestens, wenn Sie selbst unterschiedliche Geodaten auf einer Karte darstellen möchten werden Sie sich wünschen, Objekte mit gleichen Eigenschaften auf einem Layer gruppieren zu können. Denn nur so können sie alle Elemente gleichzeitig ansprechen. Stellen Sie sich vor, Sie möchten auf Ihrer Website Touren für Aktivurlauber beschreiben. Diese Touren sind unterteilt in Wanderer, Bergsteiger, Gipfelstürmer und Freikletterer. Auf der Karte kann ein Kunde Angebote für eine bestimmte Region heraus filtern. Wenn Sie pro Touren-Typen einen <a class="extern" href="https://de.wikipedia.org/wiki/Layertechnik">Layer</a> anlegen und die Touren entsprechend ihres Typs auf diesen Layern ablegen, können Sie es dem Kunden zusätzlich auf einfache Art ermöglichen, nur die für ihn relevanten Touren einzublenden. Warum erkläre ich Ihnen dies an dieser Stelle? Alle Polyline Objekte alle Polygone Objekte zusammen definiert wurden, liegen automatisch zusammen auf einem eigenen separaten Layer.</p>

    <p class="para_Text_body"><span id="__DdeLink__14202_1716758346">Das Setzen von Klammern beim Arbeiten mit Polygon Objekten und Polyline Objekten die mehrere Objekte gleichzeitig auf einem Layer erstellen, kann sehr herausfordernd sein.</span>Das Setzen von Klammern beim Arbeiten mit Polygon Objekten und Polyline Objekten die mehrere Objekte gleichzeitig auf einem Layer erstellen, kann sehr herausfordernd sein.</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">Sie müssen zum einen alle Objekte – Polygon Objekte oder Polyline Objekte – mit einer äußeren Klammer versehen.<br/>[<br/>[[50.17264, -7.26469], [49.27264, -6.26469]],<br/>[[50.37264, -7.26469], [51.27264, -8.26469]] <br/>]</p></li>

      <li><p class="para_Text_body">Außerdem müssen Sie jedes einzelne Objekt – Polyline oder Polygone – mit einer Klammer umgeben.<br/>[<br/>[[50.17264, -7.26469], [49.27264, -6.26469]],<br/>[[50.37264, -7.26469], [51.27264, -8.26469]]<br/>]</p></li>

      <li><p class="para_Text_body">Und zuletzt werden auch die Koordinaten selbst noch eingeklammert.<br/>[<br/>[[17264, -7.26469], [27264, -6.26469]],<br/>[[37264, -7.26469], [27264, -8.26469]]<br/>]</p></li>
    </ul>

    <div id="chapter-54" class="para_Heading_3">
      Mehrere Polyline Objekte auf einer Ebene
    </div>

    <p class="para_Text_body">In diesem Kapitel gibt es nun ein praktisches Beispiel. Der nachfolgende Programmcodeausschnitt zeigt Ihnen, wie Sie mit dem instanziieren eines Poyline Objekt mehrer Polyline Objekte auf eine Ebene zeichnen können. Und das die beiden auf einer Ebene liegen, beweise ich Ihnen gleichzeitig auch noch.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var multipolyline = L.polyline(</p>

    <p class="para_Quelltext">[</p>

    <p class="para_Quelltext">[[50.17264, -7.26469],</p>

    <p class="para_Quelltext">[49.27264, -7.26469],</p>

    <p class="para_Quelltext">[49.27264, -6.26469]],</p>

    <p class="para_Quelltext">[[50.37264, -7.26469],</p>

    <p class="para_Quelltext">[51.27264, -7.26469],</p>

    <p class="para_Quelltext">[51.27264, -8.26469]]</p>

    <p class="para_Quelltext">],</p>

    <p class="para_Quelltext">{color: 'black'}).addTo(mymap);</p>

    <p class="para_Quelltext">mymap.fitBounds(multipolyline.getBounds());</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_981.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was zeigt Ihnen dieses Beispiel? Zunächst einmal können Sie erkennen, dass das Erstellen mehrerer Polyline Objekte zusammen möglich ist. Und das es auch einfacher ist erkennen Sie daran, dass Sie Optionen nur einmal zuweisen müssen. Beide Linien werden gleichzeitig schwarz gefärbt.</p>

    <p class="para_Text_body">Am meisten Vorteile bringt aber die Tatsache, dass beide Linien eine Ebene darstellen. Die Methode <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#map-fitbounds">fitBounds()</a> verschiebt eine Karte an die Stelle, an der die übergebenen Koordinaten sich befinden und setzt die Zoom-Stufe so, dass die Karte für die übergebenen Koordinaten ideal angezeigt wird. Würden die beiden Linien nicht auf einer Ebenen liegen, wäre es schwere beide gleichzeitig mit maximalem Zoom anzuzeigen. Da sie aber auf einer Ebene liegen, sehen Sie wie nachfolgend im Bild ersichtlich, beide Linien an der richtigen Stelle auf der Erde.</p>

    <p class="para_Quotations">Hinweis:<br/>Noch einmal zur Erinnerung: Ein Objekt vom Typ Polygon und auch ein Polyline Objekt ist eine Ebene – die beiden Klassen erweitern die Leaflet Klasse <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#layer">Layer</a>.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild36.png" alt=" Abbildung 8"/>

      <figcaption class="para_Illustration">Abbildung 8</figcaption>
    </figure>

    <p class="para_Text_body">987.png</p>

    <div id="chapter-55" class="para_Heading_3">
      Mehrere Polygone Objekte auf einer Ebene
    </div>

    <p class="para_Text_body">In diesem Kapitel zeige ich Ihnen ein Beispiel, bei dem mehrere Polygone zusammen erstellt werden.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var multipolygone = L.polygon(</p>

    <p class="para_Quelltext">[</p>

    <p class="para_Quelltext">[[50.17264, 7.26469],</p>

    <p class="para_Quelltext">[49.27264, 7.26469],</p>

    <p class="para_Quelltext">[49.27264, 6.26469]],</p>

    <p class="para_Quelltext">[[50.37264, 7.26469],</p>

    <p class="para_Quelltext">[51.27264, 7.26469],</p>

    <p class="para_Quelltext">[51.27264, 8.26469]]</p>

    <p class="para_Quelltext">],</p>

    <p class="para_Quelltext">{color: 'black'}).addTo(mymap).bindPopup("Wir sind auf einer Ebene");</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_982.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><span id="__DdeLink__14252_1716758346">In diesem Beispiel sehen Sie nun auch, wie Sie mit der Methode bindPopup() ein zu einem Element hinzufügen können.</span>bindPopup() ein zu einem Element hinzufügen können. Später im Buch werden Fenster noch einmal Thema sein. An dieser Stelle habe ich die Methode gewählt, weil ich der Meinung bin, das diese hier gut passt. Es gibt viele unzusammenhängende Flächen auf der Erde, für die die gleichen Informationen zutreffend sind. Zum Beispiel haben viele Länder Kolonien an weit entfernten Stellen auf der Erde. Wenn nun alle zu einem Land gehörenden Gebiete als Polygon auf einem Layer zusammengefasst sind, dann ist es ein Leichtes, diesen allen Gebieten eines Landes das gleiche Fenster zuzuweisen. Und wenn Sie nun die ganze Welt auf Ihrer Karte abdecken möchten, dann können Sie sich den Vorteil dieser <a class="extern" href="https://de.wikipedia.org/wiki/Layertechnik">Layer-Technik</a> sicherlich gut vorstellen.</p>

    <p class="para_Text_body">Auf der nächsten Abbildung sehen sie zwar keine Ländergrenzen. Der Einfachheit halber habe ich mich auf zwei Dreiecke beschränkt.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild37.png" alt=" Abbildung 9"/>

      <figcaption class="para_Illustration">Abbildung 9</figcaption>
    </figure>

    <p class="para_Text_body">986.png</p>

    <div id="chapter-56" class="para_Heading_4">
      Mehrere sich überschneidende Polygone Objekte auf einer Ebene
    </div>

    <p class="para_Text_body">Die Besonderheit bei einem Polygon ist, dass es einen Außen- und einen Innenbereich gibt. Das lesen Sie hier im Buch des Öfteren. Wenn Sie mehrere Polygone auf einem Layer zusammen erstellen, dann beeinflussen diese sich gegenseitig, wenn sie übereinander liegen. In der nachfolgenden Tabelle habe ich verschiedene Konstellationen mit Bild und Text aufgenommen. Anhand von Beispielen ist das Zusammenspiel der verschiedenen Bereiche meiner Meinung nach am leichtesten nachzuvollziehen.</p>

    <div style="align: justify;">
      <table style="margin-top: 0px; margin-bottom: 0px; width: 100%;">
        <tbody>
          <tr>
            <td style="padding: 3px; border-top-width: 1px; border-top-style: solid; border-top-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/928a.png" alt=" Abbildung 10"/>

                <figcaption class="para_Illustration">Abbildung 10</figcaption>
              </figure>

              <p class="para_Table_Contents">928a.png</p>
            </td>

            <td style="padding: 3px; border: 1px solid rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">Beginnen wir mit einem einfachen Polygone:<br/><span id="__DdeLink__14093_325619444">L.polygon([ [ [1, 1], [1, 10], [10, 10], [10, 1] ] ])</span>)</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/928b.png" alt=" Abbildung 11"/>

                <figcaption class="para_Illustration">Abbildung 11</figcaption>
              </figure>

              <p class="para_Table_Contents"><br/><br/></p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">Wenn Sie innerhalb dieses Polygons ein weiteres Polygon zeichnen, dann wird der Innenbereich des ersten Polygon um die Fläche des zweiten Polygon verringert. Das zweite Polygon wird praktisch aus dem ersten Polygone ausgeschnitten.</p>

              <p class="para_Table_Contents"><span id="__DdeLink__14095_325619444">L.polygon([ [ [1, 1], [1, 10], [10, 10], [10, 1] ], [ [2, 2], [2, 5], [5, 5], [5, 2] ] ])</span>[ [2, 2], [2, 5], [5, 5], [5, 2] ] <br/>])</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild94.png" alt=" Abbildung 12"/>

                <figcaption class="para_Illustration">Abbildung 12</figcaption>
              </figure>

              <p class="para_Table_Contents"><br/><br/></p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">In dieses zweite Polygon können Sie nun wiederum ein Polygon zeichnen. Nun wird diese Fläche wieder voll als Innenbereich gezeichnet.<br/><span id="__DdeLink__14097_325619444">L.polygon([ [ [1, 1], [1, 10], [10, 10], [10, 1] ], [ [2, 2], [2, 5], [5, 5], [5, 2] ], [ [3, 3], [3, 4], [4, 4], [4, 3] ] ])</span>[ [3, 3], [3, 4], [4, 4], [4, 3] ] <br/>])</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/928d.png" alt=" Abbildung 13"/>

                <figcaption class="para_Illustration">Abbildung 13</figcaption>
              </figure>

              <p class="para_Table_Contents">928d.png</p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents">Zeichnen Sie nun ein weiteres Polygon, dass Innenbereich und Außenbereich gleichzeitig abdeckt, dann wird der abgedeckte Innenbereich zum Außenbereich und umgekehrt.<br/><span id="__DdeLink__14147_325619444">L.polygon([ [ [1, 1], [1, 10], [10, 10], [10, 1] ], [ [2, 2], [2, 5], [5, 5], [5, 2] ], [ [3, 3], [3, 4], [4, 4], [4, 3] ], [ [9, 9], [11, 9], [11, 11], [9, 11] ] ])</span>[ [9, 9], [11, 9], [11, 11], [9, 11] ] <br/>])</p>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <p class="para_Text_body"><br/><br/></p>

    <div id="chapter-57" class="para_Heading_2">
      Daten mit Layern gruppieren
    </div>

    <p class="para_Text_body"><span id="__DdeLink__14254_1716758346">Im vorherigen Kapitel haben Sie gesehen, dass Sie mehrere Polygone Objekte oder mehrere Polyline Objekte zusammen auf einem Layer positionieren können. Es wird aber sicher auch einmal vorkommen, dass Sie Elemente unterschiedlicher Typen auf einem Layer zusammen gruppieren möchten.</span>Polygone Objekte oder mehrere Polyline Objekte zusammen auf einem Layer positionieren können. Es wird aber sicher auch einmal vorkommen, dass Sie Elemente unterschiedlicher Typen auf einem Layer zusammen gruppieren möchten.</p>

    <div id="chapter-58" class="para_Heading_3">
      Layergruppen
    </div>

    <p class="para_Text_body">Die Klasse Leaflet Klasse <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#layergroup">LayerGroup</a> wird verwendet, um mehrere Layer oder Ebenen zu gruppieren. So können Sie diese Ebenen wie eine Ebene behandeln. Wenn Sie ein Objekt vom Typ LayerGroup zur Karte hinzufügen, werden alle zur Gruppe gehörenden Layer zur Karten Objekt hinzugefügt.</p>

    <p class="para_Text_body">Der nachfolgende Programmcodeausschnitt zeigt Ihnen, wie Sie ein Objekt vom Typ LayerGroup erstellen und zu Ihrem Karten Objekt hinzufügen können.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var marker1 = L.marker([50.27264, 7.26469],</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">title:"Marker1",</p>

    <p class="para_Quelltext">alt:"Ich bin ein Marker"</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">).bindPopup('Marker1');</p>

    <p class="para_Quelltext">var polyline = L.polyline([</p>

    <p class="para_Quelltext">[50.27264, 7.26469],</p>

    <p class="para_Quelltext">[51.27264, 7.26469],</p>

    <p class="para_Quelltext">[51.27264, 6.26469]],</p>

    <p class="para_Quelltext">{color: 'red', weight:8});</p>

    <p class="para_Quelltext">var myLayerGroup = L.layerGroup([marker1, polyline]).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_980.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Im vorherigen Beispiel habe ich einen Marker und ein Objekt vom Typ Polyline erstellt und beide zusammen auf dem Layer myLayerGroup gruppiert.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quotations">Hinweis:<br/>Sie können auch später noch Objekt zum LayerGroup Objekt hinzufügen. Zum Beispiel so:<br/><br/>var marker2 = L.marker([51.27264, 6.26469],<br/>{<br/>title:"Marker2",<br/>alt:"Ich bin ein anderer Marker"<br/>}</p>

    <p class="para_Quotations">).bindPopup('Marker2');<br/>myLayerGroup.addLayer(marker2);</p>

    <p class="para_Text_body">Entfernen können sie das LayerGroup Objekt – und somit alle zu ihr gehörenden Objekt auf einen Schlag – mit der Methode removeLayer(). In unserm Beispiel konkret mit der Zeile myLayerGroup.removeLayer(polyline);.</p>

    <div id="chapter-59" class="para_Heading_3">
      Featuregruppen
    </div>

    <p class="para_Text_body">Die Klasse FeatureGroup erweitert die Klasse LayerGroup. Während die Klasse LayerGroup eher Methoden zum Gruppieren von Layern bereit stellt, geht es in der FeatureGroup hauptsächlich um das gemeinsame Verarbeiten von Ereignissen und das Hinzufügen von Stylen.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var marker1 = L.marker([50.27264, 7.26469],</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">title:"Marker1",</p>

    <p class="para_Quelltext">alt:"Ich bin ein Marker"</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">);</p>

    <p class="para_Quelltext">var polyline = L.polyline([</p>

    <p class="para_Quelltext">[50.27264, 7.26469],</p>

    <p class="para_Quelltext">[51.27264, 7.26469],</p>

    <p class="para_Quelltext">[51.27264, 6.26469]],</p>

    <p class="para_Quelltext">);</p>

    <p class="para_Quelltext">var myfeatureGroup=L.featureGroup([marker1, polyline]).addTo(mymap);</p>

    <p class="para_Quelltext">myfeatureGroup.bindPopup('Wir haben alle das gleiche Pop-up!');</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_979.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Analog zum Beispiel im Kapitel Layergruppen sehen Sie im vorhergehenden Programmcodeausschnitt, wie zwei Elemente erstellt und einem Objekt vom Typ FeatureGroup zugeordnet werden. Sie werden zusammen zum Karten Objekt hinzugefügt und ein Aufruf der Methode bindPopup() beim FeatureGroup Objekt fügt das zu allen Objekten des FeatureGroup Objektes hinzu.</p>

    <p class="para_Text_body">Wenn Sie alle Elemente des FeatureGroup Objektes rot färben möchten, reicht die Zeile myfeatureGroup.setStyle({color:'red'}) aus.</p>

    <p class="para_Text_body">Der Eintrag</p>

    <p class="para_Text_body">myfeatureGroup.on('click', function()<br/>{<br/>alert('Ein Gruppenmitglied wurde angeklickt!');<br/>})</p>

    <p class="para_Text_body">würde bewirken, dass sich immer dann, wenn ein Element des FeatureGroup Objektes angeklickt wird, ein Hinweisfenster öffnet.</p>

    <p class="para_Text_body">Wenn Sie das FeatureGroup Objekt und dessen Inhalt mit einem Mausklick los werden möchten, können Sie folgenden Text zu Ihrem Skript hinzufügen:</p>

    <p class="para_Text_body">myfeatureGroup.on('click', function()<br/>{<br/>myfeatureGroup.removeLayer(polyline);<br/>})</p>

    <div id="chapter-60" class="para_Heading_2">
      Popups
    </div>

    <p class="para_Text_body">In diesem Kapitel geht es um Leaflet Objekte vom Typ <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#popup">Popup</a>. Mithilfe dieses Objekts können Sie Fenster an bestimmten Stellen auf Ihrem Karten Objekt öffnen. Wenn Sie die Methode <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#map-openpopup">openPopup()</a> einsetzten, um das zu öffnen, stellt Leaflet sicher, dass gleichzeitig nur ein geöffnet ist. Ich empfehle Ihnen diese Methode einzusetzen, weil ich der Meinung bin, das das gleichzeitige Öffnen von mehreren Fenstern nicht benutzerfreundlich ist. Nichtsdestotrotz kann es aber sein, dass Sie gerne mehrere Fenster gleichzeitig anzeigen möchten. In diesem Fall müssen Sie das mit der Methode <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#map-addlayer">addLayer()</a> auf einem eigenen Layer einbinden.</p>

    <p class="para_Text_body">So nun aber genug der Theorie. Sehen Sie sich das alles anhand des nachfolgenden Programmcodes – am besten auf praktische Weise – an.</p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {closePopupOnClick: false}).setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var marker1 = L.marker([50.27264, 7.26469],</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">title:"Marker1",</p>

    <p class="para_Quelltext">alt:"Ich bin Marker 1"</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">).addTo(mymap);</p>

    <p class="para_Quelltext">var marker2 = L.marker([51.27264, 6.26469],</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">title:"Marker2",</p>

    <p class="para_Quelltext">alt:"Ich bin Marker 2"</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">).addTo(mymap);</p>

    <p class="para_Quelltext">marker1.bindPopup("&lt;h1&gt;Gering&lt;/h1&gt;&lt;p&gt;Ein kleines &lt;a href='https://de.wikipedia.org/wiki/Dorf'&gt;Dorf&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;auf dem Maifeld&lt;/li&gt;&lt;li&gt;in der Eifel&lt;/li&gt;&lt;li&gt;an der Elz&lt;/li&gt;&lt;/ul&gt;");</p>

    <p class="para_Quelltext">marker2.bindPopup("&lt;h1&gt;Boisheim&lt;/h1&gt;&lt;p&gt;Ein kleines Dorf&lt;/p&gt;&lt;ul&gt;&lt;li&gt;irgendwo&lt;/li&gt;&lt;li&gt;nordwestlich&lt;/li&gt;&lt;li&gt;von Gering&lt;/li&gt;&lt;/ul&gt;");</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_978.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was zeigt Ihnen dieses Beispiel genau? Sie sehen, wie Sie zwei Marker auf erstellen und diesen mit der Methode bindPopup() ein Pop up Fenster hinzufügen könne. Wenn Sie den ersten Marker anklicken, dann öffnet sich das Fenster dieses Markers. Wenn Sie danach den zweiten Marker anklicken, schließt sich das des ersten Markers und das des zweiten Markers wird aktiv. Vielleicht ist Ihnen aufgefallen, dass wir beim Karten Objekt die Option closePopupOnClick auf false gesetzt haben. Diese Option ist standardmäßig mit true belegt, was bedeutet, dass auch beim Klick auf eine beliebige Position auf der Karte ein eventuell offenes von Leaflet automatisch geschlossen wird.</p>

    <p class="para_Text_body">Möchten Sie, dass das zum Marker mit dem Namen marker1 schon beim Öffnen der Karte angezeigt wird? Dann schreiben Sie einfach den Text marker1.openPopup(); in Ihr Skript.</p>

    <p class="para_Text_body">Wie die Karte zum vorhergehend Programmcodeabschnitt im Browser aussieht, sehen Sie in der nachfolgenden Abbildung.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild38.png" alt=" Abbildung 14"/>

      <figcaption class="para_Illustration">Abbildung 14</figcaption>
    </figure>

    <p class="para_Text_body">985.png</p>

    <p class="para_Quotations">Hinweis:<br/>Ich hatte Ihnen ja zu Beginn dieses Kapitels schon erklärt, dass Leaflet standardmäßig nur ein gleichzeitig offen anzeigt. Dies ist so, wenn Sie das mithilfe der Methode openOn() zu Karte hinzufügen:</p>

    <p class="para_Quotations">var popup1 = L.popup({<span id="__DdeLink__15934_617783285">keepInView:true</span>:true})<br/>.setLatLng([49.27264, 6.26469])<br/>.setContent('&lt;p&gt;Hallo Welt&lt;br /&gt;Ich bin ein Popup.&lt;/p&gt;')<br/>.openOn(mymap);</p>

    <p class="para_Quotations">Falls Sie mehrere Fenster gleichzeitig anbieten möchte, dann können Sie dies mithilfe der Methode addTo() bewerkstelligen.</p>

    <p class="para_Quotations">var popup1 = L.popup()<br/>.setLatLng([49.27264, 6.26469])<br/>.setContent('&lt;p&gt;Hallo Welt&lt;br /&gt;Ich bin ein Popup.&lt;/p&gt;')<br/>.addTo(mymap);</p>

    <p class="para_Quotations">Die Eigenschaft keepInView:true bewirkt hier übrigens, dass die Karte nur so weit verschoben werden kann, wie der Marker sichtbar ist.</p>

    <div id="chapter-61" class="para_Heading_2">
      Mobil
    </div>

    <p class="para_Text_body">Ein großer Vorteil von JavaScript ist es, das Landkarten in jedem aktuellen Standardbrowser ohne notwendige externe Applikationen oder Plugins angezeigt werden können.</p>

    <p class="para_Quotations">Genaue Informationen zu den unterstützten Browsern finden Sie auf der Website von <a class="extern" href="http://leafletjs.com/">Leaflet</a> im Bereich Features.</p>

    <p class="para_Text_body">Jede Website, die eine Leaflet Karte anzeigt, kann vom Entwickler auf die gleiche Art und Weise programmiert werden. Der Entwickler muss im Normalfall nichts Spezielles für ein Gerät beachtet. Ein paar erwähnenswerte Punkte gibt es aber trotzdem und das was meiner Meinung nach erwähnenswert ist finden Sie in diesem Kapitel.</p>

    <p class="para_Text_body">Das Spannendste bei der Arbeit mit mobilen Anwendungen ist sicherlich die Funktion <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#map-locate">locate()</a>. Diese Funktion versucht, den Benutzer mit der W3C Geolocation API zu lokalisieren. Die <a class="extern" href="https://www.w3.org/TR/geolocation-API/">W3C Geolocation API </a>ist eine einheitliche Webbrowser-Programmierschnittstelle zum Ermitteln des geografischen Standorts des zugehörigen Endgeräts. Aber beginnen wir von vorne mit dem Bereich HTML und CSS.</p>

    <div id="chapter-62" class="para_Heading_3">
      HTML und CSS
    </div>

    <p class="para_Text_body">Sie möchten Ihre Leaflet Karte auch für mobile Geräte optimal konfigurieren? Dann sollten Sie als Erstes sicherstellen, dass die Karte passend angezeigt wird. Sie möchten sicher nicht, dass jemand der die Karte über ein Gerät mit einem kleinen Display aufruft, nur einen Teil der Karte sieht und er diese erst verschieben muss, um auch die Randbereiche zu erkennen. Oder, dass die Karte so klein dargestellt wird, das der Inhalt auf einem kleinen Display nicht lesbar ist. Ideal ist es, wenn die vollständige Karte im Display lesbar angezeigt wird. In diesem Punkt stimmen Sie mir sicher zu! Das nächste Beispiel zeigt Ihnen, wie Sie diesen Punkt umsetzten können.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" /&gt;</p>

    <p class="para_Quelltext">&lt;style&gt;</p>

    <p class="para_Quelltext">body {</p>

    <p class="para_Quelltext">padding: 0;</p>

    <p class="para_Quelltext">margin: 0;</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">html, body, #mapid {</p>

    <p class="para_Quelltext">height: 100vh;</p>

    <p class="para_Quelltext">width: 100vw;</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">&lt;/style&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {closePopupOnClick: false}).setView([50.27264, 7.26469], 18);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">mymap.locate({setView: true, maxZoom: 18});</p>

    <p class="para_Quelltext">mymap.on('locationfound', onLocationFound);</p>

    <p class="para_Quelltext">mymap.on('locationerror', onLocationError);</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">function onLocationFound(e) {</p>

    <p class="para_Quelltext">var radius = e.accuracy / 2;</p>

    <p class="para_Quelltext">L.marker(e.latlng).addTo(mymap).bindPopup("Sie sind etwa" + radius + " Meter von diesem Punkt entfernt.").openPopup();</p>

    <p class="para_Quelltext">L.circle(e.latlng, radius).addTo(mymap);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">function onLocationError(e) {</p>

    <p class="para_Quelltext">alert(e.message);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_977.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quotations">Hinweis:<br/>Wissen Sie, dass Sie zum Debuggen die Methode console.log() verwenden können? <br/>Der Eintrag<br/>&lt;script&gt;<br/>..<br/>console.log(e);<br/>..<br/>&lt;/script&gt;<br/>gibt an einer Stelle, an das Objekt e instanziiert ist, den Inhalt dieses Objektes aus.<br/>Die Konsole können Sie im Browser <a class="extern" href="https://www.mozilla.org/de/firefox/new/">Mozilla Firefox</a> über das Menü Extras | Web Entwickler | Web Konsole öffnen. Im Browser <a class="extern" href="https://www.google.de/chrome/browser/desktop/index.html">Google Chrome</a> finden Sie die Konsole über das Menü Tools | Javascipt-Konsole.</p>

    <p class="para_Text_body">Dieses Beispiel enthält zusätzlich zu den vorhergehenden Beispielen ein &lt;style&gt;-Element. In diesem sind die Abstände, also padding und margin, auf 0 gesetzt. So passt die Karte sich genau an die Seite an und es wird kein Platz mit Rändern verschwendet. Außerdem haben wir die Höhe auf 100 % gesetzt, damit diese voll ausgenutzt wird.</p>

    <p class="para_Quotations">Hinweis:<br/>Die Einheiten <a class="extern" href="https://www.w3.org/TR/css3-values/#viewport-relative-lengths">vw</a><a class="extern" href="https://www.w3.org/TR/css3-values/#viewport-relative-lengths"> und </a><a class="extern" href="https://www.w3.org/TR/css3-values/#viewport-relative-lengths">vh</a> definieren eine Breite beziehungsweise Höhe in Relation zur Größe des Browser-Fensters. Dabei steht vw für die Breite und vh für die Höhe. Diese sogenannten Viewport Units ermöglichen es, Größen in Relation zur jeweils aktuellen Größe des Browser-Fensters zu definieren.</p>

    <p class="para_Text_body">Den fixen Wert für die Höhe, der im div-Element des Karten-Objektes enthalten war, habe ich entfernt. So verschwindet auch die Bildlaufleiste am rechten Rand.</p>

    <p class="para_Text_body">Außerdem ist in diesem Beispiel das Meta-Element viewport hinzu gekommen. Somit kann die Seite nicht verkleinert oder vergrößert werden – zoomen ist aber immer noch möglich!</p>

    <p class="para_Quotations">Hinweis:<br/>Sehr wichtig im Bereich der mobilen Entwicklung ist Meta-Element viewport. In unserm Beispiel haben wir die Attribute initial-scale=1.0, maximum-scale=1.0, user-scalable=no verwendet.<br/><br/>Das Attribut initial-scale legt die anfänglichen Zoom-Stufe fest. 1.0 führt dazu, dass die Inhalte in ihrer Originalgröße dargestellt werden. Das bedeutet, dass auf einem Display mit 320 Pixel Breite, eine 320 Pixel breite Grafik die komplette Breite ausfüllen würde. Im Gegensatz dazu würde der Wert 2.0 zu einer 2-fachen Vergrößerung führen – das Bild wäre nur noch halb zu sehen.<br/>Das Attribut user-scalable bestimmt, ob der Nutzer die Anzeige der Website vergrößern oder verkleinern kann.<br/>Die Attribute minimum-scale und maximum-scale ermöglichen es die Zoom-Stufe einzuschränken. Die Vorgabe maximum-scale =1.0, bewirkt, dass der Inhalt nicht vergrößert werden kann.</p>

    <div id="chapter-63" class="para_Heading_3">
      JavaScript
    </div>

    <p class="para_Text_body">Die Karte wird nun passend auf der Website angezeigt. Soweit so gut! Wir können die Karte aber noch benutzerfreundlicher machen. Jemand der mit einem mobilen Gerät im Internet unterwegs ist, nutzt sein Gerät in der Regel an verschiedenen Standorten. Und meistens ist es so, dass das was in der Nähe ist, am interessantesten ist. Ideal wäre es also, wenn die Karte sich sofort so öffnet, dass der aktuelle Standort in der Mitte der Karte dargestellt wird. Und das ist einfach möglich. Leaflet bietet Ihnen Funktionen, die Sie nutzen können.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" /&gt;</p>

    <p class="para_Quelltext">&lt;style&gt;</p>

    <p class="para_Quelltext">body {</p>

    <p class="para_Quelltext">padding: 0;</p>

    <p class="para_Quelltext">margin: 0;</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">html, body, #mapid {</p>

    <p class="para_Quelltext">height: 100vh;</p>

    <p class="para_Quelltext">width: 100vw;</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">&lt;/style&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {closePopupOnClick: false}).setView([50.27264, 7.26469], 18);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">mymap.locate({setView: true, maxZoom: 18});</p>

    <p class="para_Quelltext">mymap.on('locationfound', onLocationFound);</p>

    <p class="para_Quelltext">mymap.on('locationerror', onLocationError);</p>

    <p class="para_Quelltext">function onLocationFound(e) {</p>

    <p class="para_Quelltext">var radius = e.accuracy / 2;</p>

    <p class="para_Quelltext">L.marker(e.latlng).addTo(mymap).bindPopup("Sie sind etwa" + radius + " Meter von diesem Punkt entfernt.").openPopup();</p>

    <p class="para_Quelltext">L.circle(e.latlng, radius).addTo(mymap);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">function onLocationError(e) {</p>

    <p class="para_Quelltext">alert(e.message);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_977.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Wenn Sie eine Website besuchen, die standortbezogenes Surfen unterstützt – zum Beispiel die Leaflet Karte im vorherigen Beispielcode – prüft der Browser, ob Sie Ihren Aufenthaltsort bekannt geben möchten. Wenn Sie zustimmen, berechnet der Browser Ihren Standort über nahe gelegene Funkzugangsknoten und die IP-Adresse Ihres Computers. Diese ungefähre Ortsangabe wird dann an die anfragende Website weitergegeben.</p>

    <p class="para_Text_body">Wenn Sie Ihren Standort freigegeben haben, dann sehen beim Aufruf der Karte einen Kreis, der Ihren ungefähren Standort wiedergibt und ein , dass Ihnen erklärt wo Sie sich gerade befinden. Möchten Sie Ihren Standort nicht mit anderen teilen, dann sehen Sie eine Fehlermeldung beim Öffnen der Karte, die Ihnen erklärt, warum Sie nicht geortet werden können.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/984.png" alt=" Abbildung 15"/>

      <figcaption class="para_Illustration">Abbildung 15</figcaption>
    </figure>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">984.png</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/984a.png" alt=" Abbildung 16"/>

      <figcaption class="para_Illustration">Abbildung 16</figcaption>
    </figure>

    <p class="para_Text_body">984a.png</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/984b.png" alt=" Abbildung 17"/>

      <figcaption class="para_Illustration">Abbildung 17</figcaption>
    </figure>

    <p class="para_Text_body">984b.png</p>

    <p class="para_Text_body">Leaflet bietet Ihnen noch weitere <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#locate-options">Geolokalisierungsmethoden</a> und <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#locationevent">Geolokalisierungsereignisse</a> an.</p>

    <div id="chapter-64" class="para_Heading_2">
      Ereignisse in Leaflet
    </div>

    <p class="para_Text_body">Bisher haben wir ausschließlich mit statischen Daten gearbeitet. In der Welt passiert aber fortwährend ganz schön viel und Sie möchten sicherlich mit Ihrer Karte auf das ein oder andere Ereignis reagieren. Vielleicht möchten Sie je nach Standort einen Text ändern – oder dann, wenn der Marker zum bewegt wird. Oder Sie möchten auf ein anderes Ereignis reagieren. Vielleicht wissen Sie auch noch gar nicht so genau auf welche Ereignisse Sie reagieren können. Dann shen Sie sich zur Inspiration doch einfach einmal an, was Leaflet Ihnen bietet. Insgesamt bietet Leaflet Ihnen 34 verschiedene Ereignisse, die die sie nutzen können. Alle Ereignisse sind der <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#events">Dokumentation</a> gut erklärt.</p>

    <p class="para_Text_body">Exemplarisch sehen wir uns mit dem folgenden Programmcode – wieder anhand eines ganz einfache Beispiels – die Vorgehensweise genauer an. Konkret reagieren wir auf einen Mausklick.</p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {closePopupOnClick: false}).setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">mymap.on('click', function(){alert('Sie haben auf die Karte geklickt.')});</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_976.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Leaflet bietet die Methode <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#evented-on">on()</a> um auf ein Ereignis zu reagieren. Der erste Parameter, der mit dieser Methode übergeben wird, steht für den Ereignistyp. In unserem Falle ist die click. Der zweite Wert erwartet eine Funktion, die beim Eintreten des Ereignisses ausgeführt werden soll.</p>

    <p class="para_Quotations">Hinweis:<br/>In unserem Beispiel haben wir die Funktion sofort in den Methodenaufruf eingefügt: <br/>mymap.on('click', function(){alert('Sie haben auf die Karte geklickt.')});.<br/>Diese Schreibweise wird auch als anonymer Funktionsausdruck bezeichnet, weil die Funktion keinen Namen hat.</p>

    <p class="para_Text_body">Wenn Sie die Karte des vorhergehenden Beispiels im Browser aufrufen und anklicken, sehen Sie die in der nachfolgenden Abbildung dargestellte Meldung.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/983.png" alt=" Abbildung 18"/>

      <figcaption class="para_Illustration">Abbildung 18</figcaption>
    </figure>

    <p class="para_Text_body">983.png</p>

    <p class="para_Quotations">Hinweis:<br/>Vielleicht möchten sie mittlerweile selbst eigene Beispiele ausprobieren und diesen vielleicht auch mit anderen teilen. Insbesondere bei der Fehlersuche ist dies oft hilfreich. Sie können die ganz einfach mithilfe des <a class="extern" href="http://playground-leaflet.rhcloud.com/fixo/edit?html,console,output">Leaflet Playgrounds</a> tun.</p>

    <div id="chapter-65" class="para_Heading_3">
      Eine benutzerdefinierte Funktionen
    </div>

    <p class="para_Text_body">Die Methoden, die Leaflet Ihnen bietet, kennen Sie nun. Bisher haben Sie immer die Variable e in den Funktionen übergeben. Mit JavaScript können Sie aber auch eigene Variablen übergeben. Außerdem können Sie eigene Funktionen an beliebigen Stellen im Programmcode aufrufen.</p>

    <p class="para_Text_body">Probieren wir das doch sofort einmal aus. Im nächsten Beispiel erstellen wir einen Marker und verbinden diesen mit einem – und das mithilfe einer selbst erstellten Funktion.</p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {closePopupOnClick: false}).setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var marker1 = L.marker([50.27264, 7.26469]).addTo(mymap).bindPopup(createPopup("Text als Parameter"));</p>

    <p class="para_Quelltext">var marker2 = L.marker([51.27264, 6.26469]).addTo(mymap).bindPopup(createPopup("Anderer Text als Parameter"));</p>

    <p class="para_Quelltext">function createPopup(popuptext){</p>

    <p class="para_Quelltext">return L.popup({autoClose:false, keepInView:true, closeButton:false}).setContent(popuptext);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_975.html--&gt;</p>

    <p class="para_Text_body">975.html</p>

    <p class="para_Text_body">In diesem Beispiel ging es nur um das Grundsätzliche und die Mächtigkeit von eigenen Funktionen wird noch nicht ganz klar. Vielleicht können Sie sich aber trotzdem schon vorstellen, wie viel Text mithilfe einer benutzerdefinierten Funktion eingespart werden kann.</p>

    <p class="para_Quotations">Achtung:<br/>Wenn Sie bei einem Popup Objekt die Eigenschaften autoClose:false und closeButton:false gleichzeitig setzten, kann dieses Fenster tatsächlich nicht mehr geschlossen werden.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/982.png" alt=" Abbildung 19"/>

      <figcaption class="para_Illustration">Abbildung 19</figcaption>
    </figure>

    <p class="para_Text_body">982.png</p>

    <p class="para_Text_body"><br/><br/></p>

    <div id="chapter-66" class="para_Heading_3">
      Ein interaktives Beispiel
    </div>

    <p class="para_Text_body">Und zu guter Letzt möchte ich Ihnen noch ein interaktives Beispiel zeigen.</p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;p&gt;Bitte geben Sie eine Koordinte an:&lt;/p&gt;&lt;br&gt;</p>

    <p class="para_Quelltext">Geographische Breite:&lt;input type="text" id="lat"&gt;&lt;br&gt;</p>

    <p class="para_Quelltext">Geographische Länge:&lt;input type="text" id="long"&gt;&lt;br&gt;</p>

    <p class="para_Quelltext">Name:&lt;input type="text" id="name"&gt;&lt;br&gt;</p>

    <p class="para_Quelltext">&lt;button onclick="save()"&gt;Speichern&lt;/button&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">function save()</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">var p1 = parseFloat(document.getElementById("lat").value);</p>

    <p class="para_Quelltext">var p2 = parseFloat(document.getElementById("long").value);</p>

    <p class="para_Quelltext">L.marker([p1,p2]).bindPopup(document.getElementById("name").value).addTo(mymap);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_974.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Im vorhergehenden Beispiel ist eine Schaltfläche integriert, die – wenn sie angeklickt wird – eine benutzerdefiniert Funktion ausführt. Mit der Funktion wird ein Marker mit einem in die Karte eingesetzt. Dies ist nur als Beispiel gedacht. Die können in der benutzerdefinierten Funktion alles Mögliche ausführen – lassen Sie Ihrer Fantasie freien Lauf. Ein weiterer Anwendungsfall könnte eine Art Heiß-Kalt Spiel sein. Sie kennen sicher das einfache Suchspiel für Kinder.</p>

    <p class="para_Quotations">Hinweis:<br/>Möchten die interaktiv eingefügten Daten in einem Objekt speichern, um einen Überblick über diese zu haben und eventuell weitere Aktionen von dem Datenbestand abhängig zu machen?<br/>Das vorhergehende Beispiel könnten Sie in diesem Falle wie folgt erweitern. Sie könnten mithilfe der Zeile<br/>var myStorage = localStorage;<br/>ein <a class="extern" href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">localStorage</a> Objekt instanziieren. Mit <br/>myStorage.setItem(document.getElementById("name").value, document.getElementById("lat").value+","+document.getElementById("long").value);<br/>konnten Sie daraufhin alle eingefügten Objekte speichern und mit diesen arbeiten.<br/><br/>Die sessionStorage-Eigenschaft erlaubt den Zugriff auf ein, nur während der aktuellen Sitzung, verfügbares Storage-Objekt. sessionStorage ist mit einer Ausnahme identisch zu Window.localStorage: In localStorage gespeicherte Daten besitzen kein Verfallsdatum, während Sie im sessionStorage mit Ablauf der Sitzung gelöscht werden. Eine Sitzung endet erst mit dem Schließen des Browsers, sie übersteht das Neuladen und Wiederherstellen einer Webseite. Das Öffnen einer Webseite in einem neuen Tabulator oder Browser-Fenster erzeugt jedoch eine neue Sitzung. Dies unterscheide ein sessionStorage Objekt von einem Session-Cookie. <a class="extern" href="https://developer.mozilla.org/de/docs/Web/API/Window/sessionStorage">https://developer.mozilla.org/de/docs/Web/API/Window/sessionStorage</a><br/></p>

    <div id="chapter-67" class="para_Heading_2">
      In diesem Kapitel haben wir …
    </div>

    <p class="para_Text_body">In diesem Kapitel haben Sie Punkte, Marker, Linien und Polygone kennen gelernt. Sie können diese nun auf eine Leaflet-Karte zeichnen und wissen, wann welches Objekt das Richtige ist. Sie können Layer-Gruppen und Featur-Gruppen voneinander unterscheiden und wissen die Grundlagen zur Anzeige von mobilen Leaflet Karte. Und auf einen Mausklick oder ein anderes Ereignis können Sie entsprechend reagieren. Im nächsten Kapitel geht es um das Format GeoJson und darum, wie Sie Daten auch in großen Mengen gut Handhaben können.</p>

    <div id="chapter-68" class="para_Heading_1">
      GeoJSON
    </div>

    <p class="para_Text_body">GeoJSON ist ein offenes Format, welches es einfach macht, geografische Daten zu beschreiben. Dabei richtet es sich nach Spezifikation – nämlich nach der Simple-Feature-Access-Spezifikation. Für die Beschreibung der Geodaten verwendet GeoJSON die JavaScript Objekt Notation (JSON).</p>

    <p class="para_Quotations">Hinter dem Begriff <a class="extern" href="https://de.wikipedia.org/wiki/Simple_Feature_Access">Simple Feature Acces</a><a class="extern" href="https://de.wikipedia.org/wiki/Simple_Feature_Access">s-</a><a class="extern" href="https://de.wikipedia.org/wiki/Simple_Feature_Access">Spezifikation</a> versteckt sich eine Spezifikation des <a class="extern" href="https://de.wikipedia.org/wiki/Open_Geospatial_Consortium">Open Geospatial Consortium</a> (OGC). Diese Spezifikation beinhaltet eine allgemein gültige Beschreibung für Geodaten und deren Geometrien. Dadurch, dass die Spezifikation allgemein gültig ist, können diese Daten ausgetauscht werden. Das OGC ist eine gemeinnützige Organisation, die die Entwicklung von allgemeingültigen Standards für Geodaten zum Ziel hat.</p>

    <div id="chapter-69" class="para_Heading_2">
      In diesem Kapitel werden wir …
    </div>

    <p class="para_Text_body"><span id="__DdeLink__13893_1172668605">Als Erstes sehen wir uns an, warum GeoJSON entwickelt wurde.</span>Als Erstes sehen wir uns an, warum GeoJSON entwickelt wurde.<span id="__DdeLink__13893_1172668605">Als Erstes sehen wir uns an, warum GeoJSON entwickelt wurde.</span>Als Nächstes vergleichen wir die einzelnen Elemente mit den Objekten, die uns Leaflet zur Verfügung stellt.<span id="__DdeLink__13895_1172668605">Als Nächstes vergleichen wir die einzelnen Elemente mit den Objekten, die uns Leaflet zur Verfügung stellt.</span>Und zu guter Letzt probieren wir die Methoden aus, die Leaflet Ihnen – spezielle für das Verarbeiten von GeoJSON-Daten – anbietet.<span id="__DdeLink__13831_1172668605">Als Erstes sehen wir uns an, warum GeoJSON entwickelt wurde. Als Nächstes vergleichen wir die einzelnen Elemente mit den Objekten, die uns Leaflet zur Verfügung stellt. Und zu guter Letzt probieren wir die Methoden aus, die Leaflet Ihnen – spezielle für das Verarbeiten von GeoJSON-Daten – anbietet.</span></p>

    <div id="chapter-70" class="para_Heading_2">
      Die Entwicklungsgeschichte von GeoJSON
    </div>

    <p class="para_Text_body">GeoJSON baut auf <a class="extern" href="https://de.wikipedia.org/wiki/JavaScript_Object_Notation">JSON</a> auf und bevor JSON als Datenformat spezifiziert wurde, gab es die erweiterbare Auszeichnungssprache <a class="extern" href="https://de.wikipedia.org/wiki/Extensible_Markup_Language">XML</a> (englisch Extensible Markup Language). Immer wenn etwas Neues entsteht, gibt es einen Grund dafür. <span id="__DdeLink__4917_1740998680">XML wurde 1998 veröffentlicht, um Daten zwischen Maschinen austauschen zu können</span><a class="extern" href="https://www.w3.org/TR/1998/REC-xml-19980210">veröffentlicht</a>, um Daten zwischen Maschinen austauschen zu können, ohne das Menschen nacharbeiten müssen. Dies wurde in Zeiten des Internets immer wichtiger. Nun muss es auch einen Grund geben, warum neben XML JSON – und später GeoJSON entstanden ist.</p>

    <div id="chapter-71" class="para_Heading_3">
      Warum ist das Format GeoJSON entstanden?
    </div>

    <p class="para_Text_body">Warum hat XML für den Austausch von Daten nicht ausgereicht und welche Vorteile bietet JSON, beziehungsweise GeoJSON? Zunächst einmal bieten alle drei Formate folgenden:</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">Alle drei Formate können von einem Menschen gelesen und verstanden werden.</p></li>

      <li><p class="para_Text_body">Alle drei Formate sind hierarchisch gegliedert. Das bedeutet, das Werte innerhalb von anderen Werten dargestellt werden können.</p></li>

      <li><p class="para_Text_body">Alle drei Formate sind relativ leicht zu erlernen.</p></li>

      <li><p class="para_Text_body">Alle drei Formate können von vielen Programmiersprachen analysiert und genutzt werden.</p></li>

      <li><p class="para_Text_body">Alle drei Formate sind mit mithilfe des Hypertext Transfer Protokolls (HTTP) – also über das Internet – austauschbar.</p></li>
    </ul>

    <p class="para_Text_body">Wenn wir uns in den nächsten Kapiteln die einzelnen Formate genauer ansehen wird Ihnen klar werden, welche Vorteile das Format JSON – beim Arbeiten mit <a class="extern" href="https://de.wikipedia.org/wiki/Geodaten">Geodaten</a> das Format GeoJSON – gegenüber XML bringt.</p>

    <div id="chapter-72" class="para_Heading_4">
      XML
    </div>

    <p class="para_Text_body">XML beschreibt die Struktur von Daten. Anhand der Tags wird den Daten eine Bedeutung – eine Semantik – gegeben. <span id="__DdeLink__4919_1740998680">Durch das Tag-System von XML werden oft kleine Datenbestände sehr aufgebläht und unübersichtlich.</span> Zusätzlich ist das Ansprechen einzelner Tags in einer XML-Datei nicht immer leicht.</p>

    <div id="chapter-73" class="para_Heading_4">
      JSON
    </div>

    <p class="para_Text_body">JSON ist im Grunde genommen nichts anderes als die Festlegung auf eine bestimmte Syntax – also eine Syntax-Konvention. Den Daten wird keine bestimmte Bedeutung geben, vielmehr geht es um die syntaktische Anordnung. Da JSON Daten strukturiert können leicht Objekte aus diesen Daten definiert werden. Im Dezember 1999 wurde die erste JSON <a class="extern" href="http://json.org/JSON">Format-Spezifikation</a> verabschiedet. Im Juni 2017 wurde die 8. Edition des Standards ECMA-262 veröffentlicht.</p>

    <p class="para_Text_body">Der große Vorteil von JSON im Vergleich zu XML liegt in der einfachen Handhabung. <span id="__DdeLink__4921_1740998680">Da JSON selbst gültiges Javascript darstellt, kann es direkt ausgeführt</span> und somit in ein Javascript-Objekt überführt werden. Auf die einzelnen Eigenschaften dieser Objekte kann dann über Attribut zugegriffen werden. Im Kapitel Heatmaps in Leaflet – Dichte werden wir eine Datei, die GeoJSON Objekte enthält, als Skript einbinden und können nur durch das Einbinden der Datei innerhalb anderer Skripte auf die GeoJSON Objekte der eingebundenen Datei zugreifen. Im Gegensatz dazu muss eine XML-Datei erst mit einem XML-Parser analysiert werden.</p>

    <p class="para_Text_body">Ein weiterer Vorteil von JSON: In JSON gibt es kein Ende-Tag, hauptsächlich deshalb ist JSON kompakter. Dies hat zur Folge, dass JSON schneller gelesen und verarbeitet werden kann.</p>

    <p class="para_Quotations">Hinweis:<br/>Die Daten einer jeden GeoJson-Datei, die sich in einem GitHub Repository befindet, werden – wenn man die Datei im Repository anklickt – automatisch auf einer interaktiven Karte angezeigt. <a class="extern" href="https://github.com/blog/1528-there-s-a-map-for-that">Github</a> erstellt diese Karte schon seit 2013 mit Leaflet. Dies können Sie sich beispielsweise im Repository <a class="extern" href="https://github.com/astridx/world.geo.json/blob/master/countries.geo.json">world.geo.json</a> ansehen.</p>

    <p class="para_Text_body">Schon ein kleines Beispiel veranschaulicht, dass XML für das Beschreiben des gleichen Objektes mehr Zeichen benötigt als JSON. Ein in XML mit 95 Zeichen kodiertes Objekt benötigt in JSON gerade einmal 73 Zeichen. Bei einem Objekt ist dieser Unterschied vernachlässigbar. In der Regel werden aber eine Vielzahl von Objekten digital beschrieben und bei einer Vielzahl von Objekten kann dieser Unterschied stark ins Gewicht fallen.</p>

    <p class="para_Text_body">Hier sehen Sie zunächst den aus 95 Zeichen bestehende XML Ausschnitt.</p>

    <p class="para_Text_body"><span id="__DdeLink__4923_1740998680">&lt;joomlers&gt; &lt;number&gt;1721&lt;/number&gt; &lt;vorname&gt;Astrid&lt;/vorname&gt; &lt;nachname&gt;Günther&lt;/nachname&gt; &lt;/joomlers&gt; Das gleiche Objekt im JSON Format kann mit 73 Zeichen beschrieben werden. „joomlers“: { „number“: „1721“, „vorname“: „Astrid“, „nachname“: „Günther“ }, </span>joomlers&gt;</p>

    <p class="para_Text_body">&lt;number&gt;1721&lt;/number&gt;</p>

    <p class="para_Text_body">&lt;vorname&gt;Astrid&lt;/vorname&gt;</p>

    <p class="para_Text_body">&lt;nachname&gt;Günther&lt;/nachname&gt;</p>

    <p class="para_Text_body">&lt;/joomlers&gt;</p>

    <p class="para_Text_body">Das gleiche Objekt im JSON Format kann mit 73 Zeichen beschrieben werden.</p>

    <p class="para_Text_body">„joomlers“: {</p>

    <p class="para_Text_body">„number“: „1721“,</p>

    <p class="para_Text_body">„vorname“: „Astrid“,</p>

    <p class="para_Text_body">„nachname“: „Günther“</p>

    <p class="para_Text_body">},</p>

    <div id="chapter-74" class="para_Heading_4">
      Und warum nun auch noch GeoJSON?
    </div>

    <p class="para_Text_body">Geodaten könnten in JSON beschrieben und verarbeitet werden. Welchen Vorteil bringt das spezielle <span id="__DdeLink__4935_1740998680">GeoJSON-Format? GeoJSON ist JSON – allerdings auf Geodaten spezialisiert.</span>Format? GeoJSON ist JSON – allerdings auf Geodaten spezialisiert. GeoJSON gibt den GeoDaten wieder eine Semantik – also eine Bedeutung. GeoJSON beschreibt Punkten, Linien und Polygonen und gut mit diesen in einem Koordinatensystem umgehen. Im vorausgehenden Kapitel haben wir gesehen, dass das Arbeiten mit Geodaten im Grunde genommen nichts anderes ist. GeoJSON hat sich zu einem sehr beliebten Datenformat vieler Geninformationssysteme entwickelt. In diesem Buch erwähne ich GeoJSON speziell, weil auch Leaflet sehr gut im Umgang mit Daten im GeoJSON Format ist. Hier sehen wir uns zunächst die GeoJSON Objekte einmal genauer an. Wenn Sie lieber sofort praktisch arbeiten möchten, dann Blättern Sie am besten ein Kapitel weiter. Im Kapitel GeoJson in Leaflet erfahren Sie, wie Sie GeoJSON-Elemente auf Ihrer Karte anzeigen und weiter bearbeiten können. Im Juni 2008 wurde die erste Format-Spezifikation verabschiedet. Im August 2016 wurde die <a class="extern" href="http://geojson.org/">RFC (Requests for Comments) 7946</a> veröffentlicht.</p>

    <div id="chapter-75" class="para_Heading_3">
      GeoJSON erkunden
    </div>

    <p class="para_Text_body">Sie wissen nun, dass Sie mit GeoJSON viele geografische Datenstrukturen in einer maschinenlesbaren Sprache kodieren können. Ein GeoJSON-Objekt kann dabei eine einfache Geometrie, zum Beispiel einen Punkt eine Linie oder ein Polygon, darstellen. Zusätzlich können Sie einer Geometrie aber auch Eigenschaften zuordnen. In diesem Fall erstellen Sie ein Objekt vom Typ Feature. Wenn Sie mehrere Feature-Objekte zu einer Gruppe zusammen fassen möchten, können Sie diese zu einer Sammlung von Features zusammen fassen. Hierfür gibt es den GEOJson Typ FeatureCollection. Das Verständnis dieser Konzepte bringt viele Vorteile. Es hilft Ihnen auch, die Arbeit mit Geodaten im Allgemeinen zu verstehen: Die Grundkonzepte, die in GeoJSON angewandt werden, sind schon seit vielen Jahren ein Teil von <a class="extern" href="https://de.wikipedia.org/wiki/Geoinformationssystem">Geoinformationssystemen</a>.</p>

    <p class="para_Quotations">Die formale Spezifikation des GeoJSON Formates finden Sie unter der Adresse <a class="extern" href="https://tools.ietf.org/html/rfc7946">https://tools.ietf.org/html/rfc7946</a> im Internet.</p>

    <div id="chapter-76" class="para_Heading_4">
      Eine Geometrie
    </div>

    <p class="para_Text_body">Eine Geometrie ist eine Form. Alle Formen in GeoJSON werden mit einer oder mehreren Koordinaten beschrieben. Eine Koordinate heißt in GeoJSON Position. GeoJSON unterstützt die Geometriearten Point, LineString, Polygon, MultiPoint, MultiLineString, and MultiPolygon – und diese beinhalten Positionen.</p>

    <div id="chapter-77" class="para_Heading_5">
      Position
    </div>

    <p class="para_Text_body"><span id="__DdeLink__5030_517448937">Das wichtigste Element beim Arbeiten mit Geodaten ist die Beschreibung des Punktes auf der Erde, dem die Geodaten zugeordnet werden.</span>beim Arbeiten mit Geodaten ist die Beschreibung des Punktes auf der Erde, dem die Geodaten zugeordnet werden. <span id="__DdeLink__5032_517448937">Diesen Wert kennen wir auch unter dem Namen Koordinate.</span>Koordinate. Im Kapitel Das Koordinatensystem der Erde hatte ich schon eine ganze Menge zum Thema Koordinaten auf der Erde geschrieben. Hier noch einmal kurz: E<span id="__DdeLink__5034_517448937">ine Koordinate ist eine Zahlenkombination. Jede Zahl einer Koordinate steht für eine Dimension. </span>ist eine Zahlenkombination. Jede Zahl einer Koordinate steht für eine Dimension. Wir beschränken uns in diesem Buch auf zwei Dimensionen, nämlich die geografische Längen und die geografische Breite. GeoJSON unterstützt drei Dimensionen – neben der geografischen Länge und der geografischen Breite können Sie zusätzlich die Höhe auf der Erde angeben.</p>

    <p class="para_Quotations">Beim <a class="extern" href="http://wiki.openstreetmap.org/wiki/DE:Genauigkeit_von_GPS-Daten">globales Navigationssatellitensystem</a> (GPS) ist noch eine vierte Große relevant. Neben der horizontalen Position und der Höhe spielt auch die aktuelle Zeit eine Rolle.</p>

    <p class="para_Text_body"><span id="__DdeLink__5060_517448937">Die Koordinaten werden in GeoJSON im Dezimalformat formatiert.</span>Die Koordinaten werden in GeoJSON im Dezimalformat formatiert.<span id="__DdeLink__5058_517448937">Die Koordinaten werden in GeoJSON im Dezimalformat formatiert.</span>Die erste Zahl steht für die Longitude – also die geografische Länge – und die zweite Zahl für die Latitude – also die geografische Breite. Konkret sieht eine Position in GeoJSON so aus:</p>

    <p class="para_Text_body"><span id="__DdeLink__5006_517448937">[Länge, Breite, Höhe]</span>[Länge, Breite, Höhe]<span id="__DdeLink__5018_517448937">[Länge, Breite, Höhe]</span>oder [50.254, 7.5847, 324.1]</p>

    <p class="para_Quotations">Vielleicht haben Sie in der Vergangenheit schon öfter mit Geodaten gearbeitet und wundern sich nun über die Reihenfolge, in der die Dimensionen im Format GeoJSON stehen. Viele alt eingesetzte Systeme geben zuerst die geografische Länge und erst dann die geografische Breite an. Auch in Leaflet wird bei der Koordinate zuerst die Latitude, also die geografische Länge, und erste dann die Longitude, also die geografische Breite, angegeben. Um dieses Durcheinander zu verstehen, müssen Sie folgendes bedenken: <span id="__DdeLink__13637_1716758346">Früher war es üblich, dass die erste Stelle einer Koordinate den Breitengrad und die zweite Stelle den Längengrad beschrieb.</span>Koordinate den Breitengrad und die zweite Stelle den Längengrad beschrieb. <span id="__DdeLink__13639_1716758346">In der Mathematik ist die übliche Reihenfolge beim Arbeiten mit Koordinatensystemen: X-Wert | Y-Wert.</span> Wenn man eine Landkarte mit einem Koordinatensystem vergleicht, erkennt man schnell, dass der Breitengrad dem X-Wert und der Längengrad der dem Y-Wert entspricht. Dies hat zur Folge, dass es beim Rechnen mit einem Computer viele Vorteile bringt, wenn man die Reihenfolge Längengrad | Breitengrad einhält. <span id="__DdeLink__13641_1716758346">I</span>n der digitalen Welt gibt es momentan noch keine Einigkeit über die Reihenfolge. Es sieht so aus, als wir da mitten in einem Umbruch stecken. Eine Übersicht, die zeigt, welche Anwendung welche Dimension als erstes verwendet, finden Sie unter anderem unter der Adresse <a class="extern" href="https://macwright.org/lonlat/">https://macwright.org/lonlat/</a>.</p>

    <p class="para_Text_body">Früher erlaubte GeoJSON die Speicherung von mehr als 3 Zahlen pro Position. Diese Möglichkeit wurde auch genutzt. Es wurden beispielsweise Sportdaten wie die Herzfrequenz zusammen mit der Position gespeichert. Da dies nicht der Sinn einer Position ist, führte dieses Vorgehen teilweise zu Problemen in anderen GeoJSON Anwendungen. In der <a class="extern" href="https://tools.ietf.org/html/rfc7946#section-3.1.1">neue</a><a class="extern" href="https://tools.ietf.org/html/rfc7946#section-3.1.1">n</a><a class="extern" href="https://tools.ietf.org/html/rfc7946#section-3.1.1"> Spezifikation</a> ist das Speichern von mehr als drei Werten pro Position nun nicht mehr zulässig.</p>

    <div id="chapter-78" class="para_Heading_5">
      Point
    </div>

    <p class="para_Text_body">Der Typ <span id="__DdeLink__5135_517448937">Point – also ein Punkt – ist die einfachste Geometrie in GeoJSON. Er gibt die Koordinaten einer bestimmten Position an. Die genaue Schreibweise </span> – also ein Punkt – ist die einfachste Geometrie in GeoJSON. Er gibt die Koordinaten einer bestimmten Position an. Die genaue Schreibweise sehen Sie nachfolgende.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><span id="__DdeLink__4904_1740998680">{ "type": "Point", "coordinates": [30, 10] }</span>Point",</p>

    <p class="para_Text_body">"coordinates": [30, 10]</p>

    <p class="para_Text_body">}<span id="__DdeLink__4904_1740998680">{ "type": "Point", "coordinates": [30, 10] }</span></p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">In Leaflet wird der Typ Point als Marker eingefügt.</p>

    <div id="chapter-79" class="para_Heading_5">
      Multipoint
    </div>

    <p class="para_Text_body">Der Typ MultiPoint wird mit einem Array von Positionen beschrieben. Mit ihm können mehrere Punkte auf der Erde angegeben werden.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><span id="__DdeLink__4949_1740998680">{ "type": "MultiPoint", "coordinates": [ [10, 40], [40, 30], [20, 20], [30, 10] ] }</span>MultiPoint",</p>

    <p class="para_Text_body">"coordinates": [</p>

    <p class="para_Text_body">[10, 40], [40, 30], [20, 20], [30, 10]</p>

    <p class="para_Text_body">]</p>

    <p class="para_Text_body">}<span id="__DdeLink__4949_1740998680">{ "type": "MultiPoint", "coordinates": [ [10, 40], [40, 30], [20, 20], [30, 10] ] }</span></p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Mit dem Typ Multipoint können Sie mehrere Marker auf einen Schlag zu Ihrer Leaflet Karte hinzufügen.</p>

    <div id="chapter-80" class="para_Heading_5">
      LineString
    </div>

    <p class="para_Text_body"><span id="__DdeLink__5133_517448937">Um eine Linie darzustellen, benötigen Sie mindestens zwei Punkte. Die Linie ist die Verbindung zwischen diesen Punkten.</span>Punkte. Die Linie ist die Verbindung zwischen diesen Punkten. Eine Linie wird mit einem Array von zwei oder mehr Positionen dargestellt. In GeoJSON wir eine Linie mit dem Typ LineString dargestellt.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><span id="__DdeLink__4953_1740998680">{ "type": "LineString", "coordinates": [ [30, 10], [10, 30], [40, 40] ] }</span>LineString",</p>

    <p class="para_Text_body">"coordinates": [</p>

    <p class="para_Text_body">[30, 10], [10, 30], [40, 40]</p>

    <p class="para_Text_body">]</p>

    <p class="para_Text_body">}<span id="__DdeLink__4953_1740998680">{ "type": "LineString", "coordinates": [ [30, 10], [10, 30], [40, 40] ] }</span></p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Ein GeoJSON Objekt vom Typ LineString entspricht einem Polyline Objekt in Leaflet.</p>

    <div id="chapter-81" class="para_Heading_5">
      MultiLineString
    </div>

    <p class="para_Text_body">Beim Typ MultiLineString werden die Koordinaten mit einem Array von LineString-Koordinaten-Arrays angegeben.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><span id="__DdeLink__4957_1740998680">{ "type": "MultiLineString", "coordinates": [ [[10, 10], [20, 20], [10, 40]], [[40, 40], [30, 30], [40, 20], [30, 10]] ] </span>MultiLineString",</p>

    <p class="para_Text_body">"coordinates": [</p>

    <p class="para_Text_body">[[10, 10], [20, 20], [10, 40]],</p>

    <p class="para_Text_body">[[40, 40], [30, 30], [40, 20], [30, 10]]</p>

    <p class="para_Text_body">]</p>

    <p class="para_Text_body"><span id="__DdeLink__4957_1740998680">{ "type": "MultiLineString", "coordinates": [ [[10, 10], [20, 20], [10, 40]], [[40, 40], [30, 30], [40, 20], [30, 10]] ] </span></p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Ein GeoJSON Objekt vom Typ MultiLineString entspricht einem Leaflet Polyline Objekt, welches mehr als eine abgeschlossene Linie definiert. Das bedeute, dass alle Linien zusammen auf einen Layer gezeichnet werden.</p>

    <p class="para_Quotations">Wie bei den Objekten in Leaflet gilt auch hier: <span id="__DdeLink__4959_1740998680">Linien und Punkte sind die einfachsten Geometrieformen.</span> sind die einfachsten Geometrieformen. Bei beiden müssen Sie nicht viele geometrische Regeln beachten. Ein Punkt kann irgendwo an einem Ort liegen und eine Linie kann eine beliebige Anzahl an Punkten enthalten. Eine Linie kann sich selbst überqueren. <span id="__DdeLink__4961_1740998680">Punkte und Linien haben keine Fläche – somit gibt es auch kein Außen und kein Innen.</span>haben keine Fläche – somit gibt es auch kein Außen und kein Innen.</p>

    <div id="chapter-82" class="para_Heading_5">
      Polygone
    </div>

    <p class="para_Text_body">Im Vergleich zu Linien sind Polygone komplexe Geometrien. <span id="__DdeLink__5157_517448937">Polygone verfügen über eine Fläche.</span>Fläche. <span id="__DdeLink__5159_517448937">Es gibt also einen Innenbereich, der sich von einem Außenbereich unterscheidet. Und hinzu kommt: Der Innenbereich kann Löcher haben!</span> Wie die Löcher in einem Polygon entstehen habe ich Ihnen im Kapitel Die Karte mit Daten bestücken im Unterkapitel Polygone bereits erklärt. Ein GeoJSON Objekt vom Typ Polygon entspricht einem Polygon Objekt in Leaflet. Die Koordinatenliste enthält bei einem Polygon – analog zu Leaflet – eine Ebene mehr als der Typ LineString. Ich habe die relevante Klammerung im nachfolgenden Beispiel fett formatiert.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><span id="__DdeLink__4965_1740998680">{ "type": "Polygon", "coordinates": [ [[30, 10], [40, 40], [20, 40], [10, 20], [30, 10]] ] }</span>Polygon",</p>

    <p class="para_Text_body">"coordinates": [</p>

    <p class="para_Text_body">[[30, 10], [40, 40], [20, 40], [10, 20], [30, 10]]</p>

    <p class="para_Text_body">]</p>

    <p class="para_Text_body">}<span id="__DdeLink__4965_1740998680">{ "type": "Polygon", "coordinates": [ [[30, 10], [40, 40], [20, 40], [10, 20], [30, 10]] ] }</span></p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Bei einem einfachen Polygon ist der Sinn dieser Ebene nicht offensichtlich. Auf den ersten Blick könnten Sie der Meinung sein, dass es einfacher wäre, das Polygon genau wie die Linie zu erstellen. Dass es sich um ein Polygon handelt, ist über den Eintrag bei der Eigenschaft Typ klar – und wenn es sich um den Typ Polygon handelt, wird die Linie einfach geschlossen! Der erste Blick ist oft trügerisch. Wir benötigen diese zusätzliche Möglichkeit der Klammerung oder Verschachtelung um Löcher in die Fläche zeichnen zu können. Polygone sind in GeoJSON mehr als nur geschlossene Linien. Ich wiederhole mich. Polygone haben einen Innenbereich und dieser kann Löcher haben. Aus diesem Grund ist beim Typ Polygone in der GeoJSON Spezifikation ein neuer Begriff zu lesen, nämlich der Begriff LinearRing. Ein LinearRing ist ein geschlossener LineString mit vier oder mehr Positionen. Obwohl ein LinearRing nicht explizit als GeoJSON-Geometrie-Typ eingeführt ist, wird der Begriff in der <a class="extern" href="https://tools.ietf.org/html/rfc7946#section-3.1.6">Polygon-Geometrie-Typ-Definition</a> erwähnt.</p>

    <p class="para_Text_body">Ein LinearRing ist entweder die äußere Ringposition, die die äußere Kante des Polygons bildet und definieren, welche Teile gefüllt sind. Ein LinearRing kann aber auch ein Innenring sein, der die Teile des Polygons definieren, die leer sind. <span id="__DdeLink__5216_517448937">Es kann eine beliebige Anzahl von Innenringen geben, einschließlich null Innenringe. Wenn das Polygon über keinen Innenring verfügt bedeutet dies, dass das Polygon nur einen Innenbereich und einen Außenbereich hat – also keine Löcher hat.</span>null Innenringe. Wenn das Polygon über keinen Innenring verfügt bedeutet dies, dass das Polygon nur einen Innenbereich und einen Außenbereich hat – also keine Löcher hat.</p>

    <div style="align: justify;">
      <table style="margin-top: 0px; margin-bottom: 0px; width: 100%;">
        <tbody>
          <tr>
            <td style="padding: 3px; border-top-width: 1px; border-top-style: solid; border-top-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Text_body">{ "type": "Polygon",</p>

              <p class="para_Text_body">"coordinates": [</p>

              <p class="para_Text_body">[[1, 1], [1, 10], [10, 10], [10, 1], [1, 1]],</p>

              <p class="para_Text_body">[[2, 2], [2, 5], [5, 5], [5, 2], [2, 2]]</p>

              <p class="para_Text_body">]</p>

              <p class="para_Text_body">}</p>
            </td>

            <td style="padding: 3px; border: 1px solid rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild44.png" alt=" Abbildung 20: Ein Polygon mit einem Innenring. Der Innenring definiert einen Außenbereich im Polygon – er schneidet quasi ein Loch in das Polygon."/>

                <figcaption class="para_Illustration">Abbildung 20: Ein Polygon mit einem Innenring. Der Innenring definiert einen Außenbereich im Polygon – er schneidet quasi ein Loch in das Polygon.</figcaption>
              </figure>

              <p class="para_Table_Contents"><br/><br/></p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Text_body">{ "type": "Polygon",</p>

              <p class="para_Text_body">"coordinates": [</p>

              <p class="para_Text_body">[[1, 1], [1, 10], [10, 10], [10, 1], [1, 1]],</p>

              <p class="para_Text_body">[[2, 2], [2, 5], [5, 5], [5, 2], [2, 2]],<br/>[[3, 3], [3, 4], [4, 4], [4, 3], [3, 3]]</p>

              <p class="para_Text_body">]</p>

              <p class="para_Text_body">}</p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/928c.png" alt=" Abbildung 21: Ein Polygon mit zwei Innenringen – der zweite Innenring wird innerhalb des ersten Innenringes gezeichnet. Dieser zweite Innenring zeichnet einen neuen Innenbereich in den Außenbereich der durch den ersten Innenring entstanden ist."/>

                <figcaption class="para_Illustration">Abbildung 21: Ein Polygon mit zwei Innenringen – der zweite Innenring wird innerhalb des ersten Innenringes gezeichnet. Dieser zweite Innenring zeichnet einen neuen Innenbereich in den Außenbereich der durch den ersten Innenring entstanden ist.</figcaption>
              </figure>

              <p class="para_Table_Contents"><br/><br/></p>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <p class="para_Quotations"><span id="__DdeLink__4993_1740998680"></span>Vielleicht ist Ihnen aufgefallen, das die erste und die letzte Koordinate jedes LinearRings gleich ist. Die Wiederholung der Koordinate ist bei einem Leaflet Objekt nicht erwünscht. Hier werden die Ringe eines Polygone automatisch geschlossen. Die erste und letzte Position eines GeoJSON LinearRing muss im Gegensatz dazu identisch sein.</p>

    <div id="chapter-83" class="para_Heading_5">
      MultiPolygon
    </div>

    <p class="para_Text_body">Beim Typ MultiPolygon werden die Koordinaten mit einem Array von Polygon-Koordinaten-Arrays angegeben. Hier sehen Sie zunächst ein Beispiel, dass zwei einfache Polygone darstellt.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><span id="__DdeLink__4989_1740998680">{ "type": "MultiPolygon", "coordinates": [ [ [[30, 20], [45, 40], [10, 40], [30, 20],[30, 20]] ], [ [[15, 5], [40, 10], [10, 20], [5, 10], [15, 5]] ] ] }</span>MultiPolygon",</p>

    <p class="para_Text_body">"coordinates": [</p>

    <p class="para_Text_body">[</p>

    <p class="para_Text_body">[[30, 20], [45, 40], [10, 40], [30, 20],[30, 20]]</p>

    <p class="para_Text_body">],</p>

    <p class="para_Text_body">[</p>

    <p class="para_Text_body">[[15, 5], [40, 10], [10, 20], [5, 10], [15, 5]]</p>

    <p class="para_Text_body">]</p>

    <p class="para_Text_body">]</p>

    <p class="para_Text_body">}<span id="__DdeLink__4989_1740998680">{ "type": "MultiPolygon", "coordinates": [ [ [[30, 20], [45, 40], [10, 40], [30, 20],[30, 20]] ], [ [[15, 5], [40, 10], [10, 20], [5, 10], [15, 5]] ] ] }</span></p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Es geht aber auch komplizierter. Sie können auch mehr als ein Polygon mit Löchern – also mehr als einem LinearString – zusammen als MultiPolygon gruppieren.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><span id="__DdeLink__4991_1740998680">{ "type": "MultiPolygon", "coordinates": [ [ [[40, 40], [20, 45], [45, 30], [40, 40]] ], [ [[20, 35], [10, 30], [10, 10], [30, 5], [45, 20], [20, 35]], [[30, 20], [20, 15], [20, 25], [30, 20]] ] ] } </span>MultiPolygon",</p>

    <p class="para_Text_body">"coordinates": [</p>

    <p class="para_Text_body">[</p>

    <p class="para_Text_body">[[40, 40], [20, 45], [45, 30], [40, 40]]</p>

    <p class="para_Text_body">],</p>

    <p class="para_Text_body">[</p>

    <p class="para_Text_body">[[20, 35], [10, 30], [10, 10], [30, 5], [45, 20], [20, 35]],</p>

    <p class="para_Text_body">[[30, 20], [20, 15], [20, 25], [30, 20]]</p>

    <p class="para_Text_body">]</p>

    <p class="para_Text_body">]</p>

    <p class="para_Text_body">}</p>

    <p class="para_Text_body"><span id="__DdeLink__4991_1740998680">{ "type": "MultiPolygon", "coordinates": [ [ [[40, 40], [20, 45], [45, 30], [40, 40]] ], [ [[20, 35], [10, 30], [10, 10], [30, 5], [45, 20], [20, 35]], [[30, 20], [20, 15], [20, 25], [30, 20]] ] ] } </span></p>

    <p class="para_Text_body">Ein GeoJSON Objekt vom Typ MultiPolygon entspricht einem Leaflet Polygon Objekt, welches mehr als ein Polygon definiert. Das bedeute, dass alle Formen zusammen auf einen Layer gezeichnet werden.</p>

    <div id="chapter-84" class="para_Heading_5">
      Mehrere Geometrien zusammenfassen - GeometryCollection
    </div>

    <p class="para_Text_body"><span id="result_box2"></span>Geodaten wollen die Welt beschreiben. Jeder der grundlegenden GeoJSON Typen ist ideal für die Darstellung eines Objektes auf der Erde. Unsere Welt enthält eine Menge Objekte, die gemeinsame Eigenschaften haben. Wenn wir diesen Objekten diese gemeinsamen Eigenschaften auf einen Schlag zuordnen möchten, können wir diese Objekte mit dem Typ GeometryCollection zusammenfassen.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><span id="__DdeLink__4998_1740998680">{ "type": "Feature", "geometry": { "type": "GeometryCollection", "geometries": [{ "type": "Point", "coordinates": [0, 0] }, { "type": "LineString", "coordinates": [[0, 0], [1, 0]] }] }, "properties": { "name": "Der Name dieser GeometryCollection" } }</span></p>

    <p class="para_Text_body">"type": "Feature",</p>

    <p class="para_Text_body">"geometry": {</p>

    <p class="para_Text_body">"type": "<span id="__DdeLink__4995_1740998680">GeometryCollection</span>",</p>

    <p class="para_Text_body">"geometries": [{</p>

    <p class="para_Text_body">"type": "Point",</p>

    <p class="para_Text_body">"coordinates": [0, 0]</p>

    <p class="para_Text_body">}, {</p>

    <p class="para_Text_body">"type": "LineString",</p>

    <p class="para_Text_body">"coordinates": [[0, 0], [1, 0]]</p>

    <p class="para_Text_body">}]</p>

    <p class="para_Text_body">},</p>

    <p class="para_Text_body">"properties": {</p>

    <p class="para_Text_body">"name": "Der Name dieser GeometryCollection"</p>

    <p class="para_Text_body">}</p>

    <p class="para_Text_body">}<span id="__DdeLink__4998_1740998680">{ "type": "Feature", "geometry": { "type": "GeometryCollection", "geometries": [{ "type": "Point", "coordinates": [0, 0] }, { "type": "LineString", "coordinates": [[0, 0], [1, 0]] }] }, "properties": { "name": "Der Name dieser GeometryCollection" } }</span></p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Einen Anwendungsfall für eine Geometriekollektionen gibt es in der Praxis allerdings nur sehr selten: Meist ist es so, dass jede Geometrie auch eigene Eigenschaften besitzt. Im nächsten Kapitel werden Sie lesen, dass Sie eine Geometrie mit eigenen Eigenschaften im Typ Feature beschreiben können und Feature Objekte werden mit dem Typ FeatureCollection zusammengefasst.</p>

    <div id="chapter-85" class="para_Heading_4">
      Einer GeoJSON Geometrien Eigenschaften zuordnen
    </div>

    <p class="para_Text_body">Geometrien sind Formen – nicht mehr und nicht weniger. Sie sind ein zentraler Teil von GeoJSON, aber die meisten Daten, die etwas mit der Welt zu tun haben, sind nicht einfach nur eine Form. Die Formen haben auch eine Identität und Attribute. Ein Polygon stellt beispielsweise den Reichstag dar. Ein anderes Polygone ist die Grenze von Deutschland. Und bei der Arbeit mit den Geometrien ist es wichtig zu wissen, welche Geometrie was ist und, welche Eigenschaften die Geometrie hat. In GeoJSON kann genau dies mit einem Objekt des Typs Feature erreicht werden.</p>

    <p class="para_Text_body">Das nachfolgende Programmcodebeispiel enthält ein ganz einfaches Feature Element.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">{</p>

    <p class="para_Text_body">"type": "Feature",</p>

    <p class="para_Text_body">"geometry": {</p>

    <p class="para_Text_body">"type": "Point",</p>

    <p class="para_Text_body">"coordinates": [0, 0]</p>

    <p class="para_Text_body">},</p>

    <p class="para_Text_body">"properties": {</p>

    <p class="para_Text_body">"name": "Der Name des Punktes"</p>

    <p class="para_Text_body">}</p>

    <p class="para_Text_body">}</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Das nachfolgende Programmcodebeispiel enthält ein etwas komplexeres Feature.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><span id="__DdeLink__5221_517448937">{ "type": "Feature", "geometry": { "type": "Polygon", "coordinates": [[30, 20], [45, 40], [10, 40], [30, 20]] }, "properties": { "prop0": "value0", "prop1": {"this": "that"}, "prop2": true, "prop3": null, "prop4": ["wert1", "wert2", "wert3"], "prop5": 0.0 } }</span></p>

    <p class="para_Text_body">"type": "<span id="__DdeLink__5218_517448937">Feature</span>",</p>

    <p class="para_Text_body">"geometry": {</p>

    <p class="para_Text_body">"type": "Polygon",</p>

    <p class="para_Text_body">"coordinates": [[30, 20], [45, 40], [10, 40], [30, 20]]</p>

    <p class="para_Text_body">},</p>

    <p class="para_Text_body">"properties": {</p>

    <p class="para_Text_body">"prop0": "value0",</p>

    <p class="para_Text_body">"prop1": {"this": "that"},</p>

    <p class="para_Text_body">"prop2": true,</p>

    <p class="para_Text_body">"prop3": null,</p>

    <p class="para_Text_body">"prop4": ["wert1", "wert2", "wert3"],</p>

    <p class="para_Text_body">"prop5": 0.0</p>

    <p class="para_Text_body">}</p>

    <p class="para_Text_body">}<span id="__DdeLink__5221_517448937">{ "type": "Feature", "geometry": { "type": "Polygon", "coordinates": [[30, 20], [45, 40], [10, 40], [30, 20]] }, "properties": { "prop0": "value0", "prop1": {"this": "that"}, "prop2": true, "prop3": null, "prop4": ["wert1", "wert2", "wert3"], "prop5": 0.0 } }</span></p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Eine Eigenschaft mit jedem <a class="extern" href="http://www.json.org/json-de.html">JSON-Objekt</a> Datentyp beschrieben werden.</p>

    <div id="chapter-86" class="para_Heading_4">
      FeatureCollection
    </div>

    <p class="para_Text_body">So nun haben wir jede Menge Typen kennen gelernt. Den Typ, den Sie sicherlich am meisten nutzen werden, habe ich für den Schluss aufgehoben. Die Syntax einer FeatureCollection können Sie im nachfolgenden Beispiel ablesen.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><span id="__DdeLink__5235_517448937">{ "type": "FeatureCollection", "features": [ { "type": "Feature", "geometry": { "type": "Point", "coordinates": [0, 0] }, "properties": { "name": "Der Name des Features" } } ] </span>{</p>

    <p class="para_Text_body">"type": "FeatureCollection",</p>

    <p class="para_Text_body">"features": [</p>

    <p class="para_Text_body">{</p>

    <p class="para_Text_body">"type": "Feature",</p>

    <p class="para_Text_body">"geometry": {</p>

    <p class="para_Text_body">"type": "Point",</p>

    <p class="para_Text_body">"coordinates": [0, 0]</p>

    <p class="para_Text_body">},</p>

    <p class="para_Text_body">"properties": {</p>

    <p class="para_Text_body">"name": "Der Name des Features"</p>

    <p class="para_Text_body">}</p>

    <p class="para_Text_body">}</p>

    <p class="para_Text_body">]</p>

    <p class="para_Text_body"><span id="__DdeLink__5235_517448937">{ "type": "FeatureCollection", "features": [ { "type": "Feature", "geometry": { "type": "Point", "coordinates": [0, 0] }, "properties": { "name": "Der Name des Features" } } ] </span></p>

    <p class="para_Text_body"><span id="__DdeLink__5223_517448937">{ "type": "FeatureCollection", "features": [ { "type": "Feature", "geometry": { "type": "Point", "coordinates": [0, 0] }, "properties": { "name": "Der Name des Features" } } ] } </span></p>

    <p class="para_Text_body">Ein Objekt vom Typ FeatureCollection enthält ein Schlüssel-Wert-Paar. Der Wert ist ein Array das aus Feature Objekten besteht und der Schlüssel lautet Features. Wie der Name schon sagt, darf das Array ausschließlich Objekte vom Typ Feature enthalten.</p>

    <p class="para_Text_body">Welche Vorteile bring ein Objekt vom Typ FeatureCollection zusätzlich zu den einzelnen Objekten? Ein Objekt vom Typ FeatureCollections ist sehr sinnvoll, wenn Sie mit GeoJSON-Typen arbeiten, die gemeinsame Eigenschaften haben.</p>

    <p class="para_Text_body">todo <a class="extern" href="http://geojsonlint.com/">http://geojsonlint.com/</a></p>

    <p class="para_Quotations">Hinweis:<br/>Sie möchten gerne mit GeoJSON nutzen und haben auch schon die ersten Dateien erstellt. Vielleicht sind Sie auch schon auf das ein oder andere Problem gestoßen oder möchten einfach nur mit der Syntax vertraut werden. Auf der Website <a class="extern" href="http://geojsonlint.com/">http://geojsonlint.com/</a> können Sie Ihre GeoJSON Daten testen.</p>

    <div id="chapter-87" class="para_Heading_3">
      Die Grenzen von GeoJSON
    </div>

    <p class="para_Text_body">Die Vorteile von GeoJSON hatte ich Ihnen weiter vorne in diesem Kapitel näher gebracht. Wie jedes andere Format hat GeoJSON aber auch seine Grenzen. Diese sind nun Thema dieses Kapitels.</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body"><span id="__DdeLink__5322_517448937">GeoJSON hat kein Konstrukt das eine Komprimierung unterstützt</span> wie beispielsweise <a class="extern" href="https://github.com/topojson/topojson">TopoJSON</a> oder <a class="extern" href="http://wiki.openstreetmap.org/wiki/OSM_XML">OSM XML</a>.</p></li>

      <li><p class="para_Text_body"><span id="__DdeLink__5310_517448937">GeoJSON unterstützt die gleichen Datentypen wie JSON. JSON unterstützt nicht jeden Datentyp.</span>GeoJSON unterstützt die gleichen Datentypen wie JSON. JSON unterstützt nicht jeden Datentyp.<span id="__DdeLink__5308_517448937">GeoJSON unterstützt die gleichen Datentypen wie JSON. JSON unterstützt nicht jeden Datentyp.</span>gibt es keinen Typ für Datumswerte in JSON.</p></li>

      <li><p class="para_Text_body"><span id="__DdeLink__5306_517448937">GeoJSON hat kein Konstrukt für die Anzeige von Fenstern wie Titel oder Beschreibung. Sie werden aber später sehen, wie Leaflet Sie bei der Erstellung von Fenstern unterstützt.</span>Sie bei der Erstellung von Fenstern unterstützt.</p></li>

      <li><p class="para_Text_body"><span id="__DdeLink__5304_517448937">GeoJSON hat keine Geometrie vom Typ Kreis – oder irgendeine andere Art von Kurve</span>.</p></li>

      <li><p class="para_Text_body"><span id="__DdeLink__5300_517448937">In GeoJSON können Sie den einzelnen Koordinaten – also den Positionen – keine eigene Eigenschaft zuweisen. Wenn Sie die LineString Darstellung eines Trainingslaufs </span>In GeoJSON können Sie den einzelnen Koordinaten – also den Positionen – keine eigene Eigenschaft zuweisen. Wenn Sie die LineString Darstellung eines Trainingslaufs <span id="__DdeLink__5302_517448937">In GeoJSON können Sie den einzelnen Koordinaten – also den Positionen – keine eigene Eigenschaft zuweisen. Wenn Sie die LineString Darstellung eines Trainingslaufs </span>GPS Gerät mehr als 1000 verschiedene Punkte während dieses Laufs zusammen mit Ihrer Herzfrequenz protokolliert hat, bietet GeoJSON keine klare Antwort auf die Frage, wie Sie diese Daten am besten Darstellen. Sie könnten eine zusätzliche Eigenschafte als Array mit der gleichen Länge wie das Koordinaten Array speichern – eine klare Regelung gibt es aber nicht.</p></li>
    </ul>

    <div id="chapter-88" class="para_Heading_2">
      GeoJson in Leaflet
    </div>

    <p class="para_Text_body">Leaflet unterstützt alle GeoJSON-Typen. In der Regel werden Sie überwiegend den Typ Feature und FeatureCollection nutzen. Sie möchten ja sicher nicht nur Geometrie Objekte auf Ihrer Karte anzeigen, sondern auch die Eigenschaften – also weitere Informationen – zu diesen Objekten. Die Typen Feature und FeatureCollection unterstützt Leaflet besonders gut.</p>

    <div id="chapter-89" class="para_Heading_3">
      Ein GeoJSON Feature in Leaflet einbinden
    </div>

    <p class="para_Text_body">Beginnen wir mit einem übersichtlichen Beispiel: Die einfachste Art GeoJSON in Ihrer Karte zu nutzen, ist die Verwendung als Variable direkt – fest programmiert. So etwas sollte man eigentlich nicht machen. Übungsbeispiele lassen sich so aber möglichst einfach darstellen.</p>

    <p class="para_Quotations">Eine andere alternative Art GeoJSON Daten in ein HTML-Dokument einzubinden finden Sie im Kapitel Choroplethenkarte und hier im Unterkapitel Open Data.</p>

    <p class="para_Text_body">Das nachfolgende Programmcodebeispiel enthält einen Punkt. Sobald Sie diesen – in GeoJSON formatierten – Punkt in einer Variablen gespeichert haben, können Sie diesen ganz einfach zur Karte hinzufügen. Leaflet zeigt auf der Karte als Ergebnis einen Marker an.</p>

    <p class="para_Quotations">Hinweis:<br/>Wir haben festgestellt, dass Leaflet Koordinaten in einer anderen Reihenfolge als GeoJSON schreibt. Wenn Sie die Standardfunktionen in Leaflet verwenden, müssen Sie sich hierüber aber keine Sorgen machen. Leaflet sortiert die Koordinaten selbständig in die passende Form.</p>

    <p class="para_Text_body">Hier also nun das erste praktische Beispiel zum Thema GeoJSON und Leaflet.</p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var geojsonFeature1 = {</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": {</p>

    <p class="para_Quelltext">"type": "Point",</p>

    <p class="para_Quelltext">"coordinates": [7.26469, 50.27264]</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">"properties": {</p>

    <p class="para_Quelltext">"name": "Gering"</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">L.geoJSON(geojsonFeature1).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_973.html--&gt;</p>

    <p class="para_Text_body">Was passiert hier genau? Als erste haben wir den GeoJSON Code fest in der Variablen geojsonFeature1 gespeichert. Als Nächstes haben wir ein Leaflet Objekt vom Typ <span id="__DdeLink__14502_1871350431">GeoJSON</span>eoJSON erstellt und diesem unseren GeoJSON Code, also die Variable geojsonFeature1, übergeben. Das GeoJSON Objekt haben wir gleichzeitig mithilfe der Methode addTo(mymap) zum Leaflet Kartenobjekt hinzugefügt. Mehr mussten wir nicht tun. Das Ergebnis ist ein Standard Marker an der Stelle auf der Erde, die das GeoJSON Point Element beinhaltet.</p>

    <p class="para_Quotations">Das Objekt <a class="extern" href="http://leafletjs.com/reference-1.2.0.html#geojson">GeoJSON</a> ist ein Leaflet Layer. Ganz konkret erweitert die Klasse GeoJSON die Klasse <a class="extern" href="http://leafletjs.com/reference-1.2.0.html#featuregroup">Feature</a><a class="extern" href="http://leafletjs.com/reference-1.2.0.html#featuregroup">Group</a>.</p>

    <p class="para_Text_body">Auf der nachfolgenden Abbildung können Sie sich das Ergebnis ansehen.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/981.png" alt=" Abbildung 22"/>

      <figcaption class="para_Illustration">Abbildung 22</figcaption>
    </figure>

    <p class="para_Text_body">981.png</p>

    <p class="para_Quotations">Hinweis:<br/>Wenn Sie an die Zeile <br/>L.geoJSON(geojsonFeature1).addTo(mymap);<br/>noch den Text<br/>.bindPopup(' Text');<br/>anhängen, also <br/>L.geoJSON(geojsonFeature1).addTo(mymap).bindPopup(' Text');<br/>schreiben, öffnet sich ein Fenster, wenn Sie den Marker anklicken.</p>

    <div id="chapter-90" class="para_Heading_3">
      Ein GeoJSON FeatureCollection in Leaflet einbinden
    </div>

    <p class="para_Text_body">Das Beispiel im letzten Kapitel enthielt ausschließlich einen Punkt – also ein Feature. Geodaten bestehen in der Regel aus mehreren Geometrien mit dazugehörigen Eigenschafte – aus FeatureCollections. Leaflet liest eine FeatureCollection genauso ein, wie Sie es im letzten Beispiel anhand des Features gesehen haben. Das nächste Beispiel zeigt Ihnen, wie Sie einen Punkt, ein Polygon und eine Linie – wieder mithilfe einer fest kodierten Variablen im GeoJson Format – in einem Schritt auf Ihrer Karte anzeigen könnten.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var geojsonFeatureCollection =</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "FeatureCollection",</p>

    <p class="para_Quelltext">"features":</p>

    <p class="para_Quelltext">[</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": {"type": "Point", "coordinates": [7, 50]},</p>

    <p class="para_Quelltext">"properties": {"prop0": "value0"}</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": { "type": "LineString", "coordinates": [</p>

    <p class="para_Quelltext">[7, 50], [7, 51], [6, 51], [6, 52]</p>

    <p class="para_Quelltext">]},</p>

    <p class="para_Quelltext">"properties": { "prop0": "value0", "prop1": 0.0 }</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">{ "type": "Feature",</p>

    <p class="para_Quelltext">"geometry": { "type": "Polygon", "coordinates": [</p>

    <p class="para_Quelltext">[ [6, 49], [5, 49], [5, 48], [4, 49], [4, 50] ]</p>

    <p class="para_Quelltext">]</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">"properties": { "prop0": "value0", "prop1": {"this": "that"}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">]</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">L.geoJSON(geojsonFeatureCollection).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_972.html--&gt;</p>

    <p class="para_Text_body">Voila! Drei Elemente mit Standardeigenschaften auf der Leaflet Karte.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild2.png" alt=" Abbildung 23"/>

      <figcaption class="para_Illustration">Abbildung 23</figcaption>
    </figure>

    <p class="para_Text_body">961.png</p>

    <div id="chapter-91" class="para_Heading_3">
      GeoJSON aus leaflet exportieren
    </div>

    <p class="para_Text_body">So, und nun machen wir genau das Gegenteil. Ein jedes Leaflet Objekt, das wir uns im Kapitel Die Karte mit Daten bestücken angesehen haben, hat eine Leaflet Methode mit dem Namen toGeoJson(). Und diese Methode tut genau das, was der Name schon vermuten lässt: Das übergebene Leaflet Objekt wird, in ein GeoJSON Objekt umgewandelt und ausgegeben. Sehen Sie sich im nächsten Beispiel die Anwendung der Methode toGeoJson() an.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var myMarker=L.marker([50.27264, 7.26469]);</p>

    <p class="para_Quelltext">var markerAsGeoJSON = myMarker.toGeoJSON();</p>

    <p class="para_Quelltext">var geoJsonLayer = L.geoJson().addTo(mymap);</p>

    <p class="para_Quelltext">geoJsonLayer.addData(markerAsGeoJSON).bindPopup("Ich bin mit der Methode .addData() zur Karte hinzugefügt worden. In GeoJson sehe ich so aus:&lt;br&gt; " + <span id="__DdeLink__15324_1871350431">JSON.stringify(markerAsGeoJSON)</span>);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_971.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was zeigt Ihnen dieses Beispiel genau? Das folgende Beispiel zeigt Ihnen, wie Sie einen Marker ins GeoJSON Format konvertieren können. Dazu erstellen Sie zunächst mit var myMarker=L.marker([50.27264, 7.26469]) einen Leaflet Marker. Danach rufen Sie die Methode toGeoJSON() des Markers auf und speichern das zurückgegeben GeoJSON Objekt in der Variablen markerAsGeoJSON. Als Nächstes erstellen Sie einen leeren GeoJSON Layer und fügen diesen zum Kartenobjekt hinzu: var geoJsonLayer = L.geoJson().addTo(mymap). Sie hätten den GeoJSON Code in der Variablen markerAsGeoJSON wie in vorherigen Beispielen sofort beim Erstellen des Layers als Parameter mitgeben können. Hier wollte ich ihnen aber die Methode addData() zeigen mit der Sie auch nachträglich noch GeoJSON Objekte zur GeoJSON Ebene hinzufügen können.</p>

    <p class="para_Quotations">Im vorausgehenden Beispiel habe ich die Methode JSON.stringify() beim Erstellen des Textes im Fenster angewandt. Mit der Methode <a class="extern" href="https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify()</a> können Sie eine JavaScript Variable in einen Text im JSON-Format konvertieren.</p>

    <p class="para_Text_body">Die nachfolgende Abbildung zeigt das Bild, welches Sie im Browser sehen, wenn Sie die HTML-Datei des vorausgehenden Beispiels im Browser öffnen.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild3.png" alt=" Abbildung 24"/>

      <figcaption class="para_Illustration">Abbildung 24</figcaption>
    </figure>

    <p class="para_Text_body">960.png</p>

    <p class="para_Text_body">Sie werden nun sicher mein Beispiel als umständlich ansehen. Ich habe einen Marker, denn ich ohne zusätzliche Schritte auf der Karten hätte anzeigen könnte, vorher umgewandelt dann in umgewandelter Form zur Karte hinzugefügt. Diese Vorgehensweise ist nicht Sinn und Zweck der Leaflet Methode toGeoJSON(). Sinn und Zweck ist es eher, Daten der Karte zum Export anzubieten.</p>

    <p class="para_Quotations">Hinweis:<br/>Wenn Sie möchten, dass die Methode toGeoJSON() Eigenschaften zu Ihrem Leaflet Objekt exportiert, müssen Sie diese in einer bestimmten Form mit Ihrem Leaflet Objekt speichern. Möchten Sie beispielsweise ein Polyline Objekt exportieren, dann müssen Sie mit diesem Polyline Objekt eine Variable feature speichern. Die Variablen feature enthält den Text Feature in der Variablen type und die zu exportierenden Eigenschaften in der Variablen properties.<br/><br/>var polyline = L.polyline([ <br/>[50.27264, 7.26469], [51.27264, 7.26469], [51.27264, 6.26469]<br/>]); <br/>polyline.feature = {};<br/>polyline.feature.type = "Feature";<br/>polyline.feature.properties = {};<br/>polyline.feature.properties["Foo"] = "Bar";<br/><br/>Der Export des Polyline Objektes würde wie folgt aussehen:<br/>{"type":"FeatureCollection", <br/>"features":[ <br/>{<br/>"type":"Feature", <br/>"properties":{"Foo":"Bar"}, <br/>"geometry":{"type":"LineString","coordinates":[[7.26469,50.27264],[7.26469,51.27264],[6.26469,51.27264]]}<br/>}<br/>]<br/>}</p>

    <div id="chapter-92" class="para_Heading_3">
      Stylen
    </div>

    <p class="para_Text_body">Ein GeoJSON Layer biete Ihnen mit der Methode setStyle() die Möglichkeit das Aussehen der Kartenschicht zu gestalten.</p>

    <p class="para_Text_body">Sie können neben den hier beschriebenen Optionen auf eine große Auswahl weitere Stil Optionen zugreifen. Die vollständige Liste finden Sie in der Dokumentation von Leaflet. Sehen Sie sich dazu die Optionen zum Klasse Path an: <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#path">http://leafletjs.com/reference-1.1.0.html#path</a>.</p>

    <p class="para_Text_body">Todo Optionen auflisten?</p>

    <div id="chapter-93" class="para_Heading_4">
      Beim Erstellen eines GeoJSON Layer einen Stil mitgeben
    </div>

    <p class="para_Text_body">Der nachfolgende Programmcode zeigt Ihnen, wie Sie Stylesheets beim Erstellen eines GeoJSON Layer als Parameter mitgeben können. Im nachfolgenden Programmcode finden Sie eine Funktion, die je nach GeoJSON Objekt eine andere Farbe zurück gibt. Wenn es sich um den Typ LineString handelt, gibt die Funktion die Farbe Rot zurück, falls ein Polygon vorliegt, antwortet die Funktion mit Violett.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">function styleFunction(feature)</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">switch (feature.geometry.type)</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">case 'LineString': return {color: "red"};</p>

    <p class="para_Quelltext">case 'Polygon': return {color: "purple"};</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">var geojsonFeatureCollection =</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "FeatureCollection",</p>

    <p class="para_Quelltext">"features":</p>

    <p class="para_Quelltext">[</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": {"type": "Point", "coordinates": [7, 50]},</p>

    <p class="para_Quelltext">"properties": {"prop0": "value0"}</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": { "type": "LineString", "coordinates": [</p>

    <p class="para_Quelltext">[7, 50], [7, 51], [6, 51], [6, 52]</p>

    <p class="para_Quelltext">]},</p>

    <p class="para_Quelltext">"properties": { "prop0": "value0", "prop1": 0.0 }</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">{ "type": "Feature",</p>

    <p class="para_Quelltext">"geometry": { "type": "Polygon", "coordinates": [</p>

    <p class="para_Quelltext">[ [6, 49], [5, 49], [5, 48], [4, 49], [4, 50] ]</p>

    <p class="para_Quelltext">]</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">"properties": { "prop0": "value0", "prop1": {"this": "that"}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">]</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">var geoJsonLayer = L.geoJson(geojsonFeatureCollection,{style:styleFunction}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_970.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quotations">Wenn Sie einen Stil auf alle Objekte anwenden möchten, dann ist es nicht notwendig eine Funktion zu erstellen. Die Zeile <br/>var geoJsonLayer = L.geoJson(geojsonFeatureCollection,{color: "purple"}).addTo(mymap); <br/>reicht völlig aus.</p>

    <p class="para_Text_body">Auf der Karte sehen Sie nun die Objekte in der für sie bestimmten Farbe.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild4.png" alt=" Abbildung 25"/>

      <figcaption class="para_Illustration">Abbildung 25</figcaption>
    </figure>

    <p class="para_Text_body">959.png</p>

    <div id="chapter-94" class="para_Heading_4">
      Ein komplexeres Beispiel: Eine andere Farbe beim Überrollen mit der Maus
    </div>

    <p class="para_Text_body">Im vorherigen Kapitel haben Sie gelernt, wie Sie mit der Option style des GeoJSON Layers ein Aussehen festlegen können. Sicherlich ändert sich das Aussehen Ihrer Objekte im Laufe der Zeit. Ganz häufig kommt es vor, dass man Objekte die anklickbar sind und angeklickt wurden, als schon besucht kennzeichnen will. Oder Sie möchten das Objekt, über dem sich die Maus gerade befindet, hervorheben. Genau diese beiden Anwendungsfälle sind Thema im nachfolgenden Beispielcode.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">function styleFunction(feature)</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">switch (feature.geometry.type)</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">case 'LineString': return {color: "red"};</p>

    <p class="para_Quelltext">case 'Polygon': return {color: "purple"};</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">var geojsonFeatureCollection =</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "FeatureCollection",</p>

    <p class="para_Quelltext">"features":</p>

    <p class="para_Quelltext">[</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": {"type": "Point", "coordinates": [7, 50]},</p>

    <p class="para_Quelltext">"properties": {"prop0": "value0"}</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": { "type": "LineString", "coordinates": [</p>

    <p class="para_Quelltext">[7, 50], [7, 51], [6, 51], [6, 52]</p>

    <p class="para_Quelltext">]},</p>

    <p class="para_Quelltext">"properties": { "prop0": "value0", "prop1": 0.0 }</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">{ "type": "Feature",</p>

    <p class="para_Quelltext">"geometry": { "type": "Polygon", "coordinates": [</p>

    <p class="para_Quelltext">[ [6, 49], [5, 49], [5, 48], [4, 49], [4, 50] ]</p>

    <p class="para_Quelltext">]</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">"properties": { "prop0": "value0", "prop1": {"this": "that"}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">]</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">var geoJsonLayer = L.geoJson(geojsonFeatureCollection,{style:styleFunction}).addTo(mymap);</p>

    <p class="para_Quelltext">geoJsonLayer.on('mouseover', styleWhenMouseOver);</p>

    <p class="para_Quelltext">geoJsonLayer.on('mouseout', styleWhenMouseOut);</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">function styleWhenMouseOver(e){</p>

    <p class="para_Quelltext">geoJsonLayer.setStyle({color:"green"});</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">function styleWhenMouseOut(e){</p>

    <p class="para_Quelltext">geoJsonLayer.eachLayer(function (layer) {</p>

    <p class="para_Quelltext">geoJsonLayer.resetStyle(layer);</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_969.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Auf den ersten Blick hat sich im Vergleich zum vorherigen Beispiel nichts geändert. Wenn Sie allerdings die Maus über ein Objekt bewegen, sehen Sie eine Änderung. Das Polygon und die Linie verfärben sich nun grün. Der Marker kann seine Farbe nicht ändern. Im Grunde genommen handelt sich bei ihm um ein Image und dieses HTML-Element verfügt nicht über die CSS Eigenschaft color. Wenn Sie das Aussehen des Markers ändern möchten, dann müssten Sie ein diesem eine andere Bilddatei zuordnen.</p>

    <p class="para_Standard"><br/><br/></p>

    <p class="para_Quotations">Wenn Sie ein schon angeklicktes Element mit der Farbe Grau einfärben möchten, dann könnten Sie dies über die Funktion <br/>function styleWhenMouseOut(e){<br/>geoJsonLayer.setStyle({color:"gray"});<br/>});<br/>}<br/>anstelle von <br/>function styleWhenMouseOut(e){<br/>geoJsonLayer.eachLayer(function (layer) {<br/>geoJsonLayer.resetStyle(layer);<br/>});<br/>}<br/>erreichen.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild5.png" alt=" Abbildung 26"/>

      <figcaption class="para_Illustration">Abbildung 26</figcaption>
    </figure>

    <p class="para_Text_body">958.png</p>

    <p class="para_Quotations">Achtung:<br/>Wenn Sie <br/>function styleWhenMouseOut(e){<br/>geoJsonLayer.eachLayer(function (layer) {<br/>geoJsonLayer.resetStyle(layer);<br/>});<br/>}<br/>anstelle von<br/>geoJsonLayer.on('mouseout',function(e){geoJsonLayer.resetStyle(e.layer);});<br/><br/>schreiben würden, würde nur ein Layer – nämlich der, der gerade überrollt wird – geändert.</p>

    <div id="chapter-95" class="para_Heading_3">
      Iterieren
    </div>

    <p class="para_Text_body">Interessant werden Karten, wenn Sie viele Informationen bieten. Eine Karte mit vielen Informationen setzt die Arbeit mit vielen Daten für den Kartenersteller voraus. Und, beim Arbeiten mit vielen Daten werden Sie die Möglichkeit, alle Features mit einem Schlag zu bearbeiten, zu schätzen lernen. Iterieren können sie in Leaflet durch GeoJSON Objekte mithilfe der Methode <span id="__DdeLink__11403_400736236">onEachFeature</span>.</p>

    <div id="chapter-96" class="para_Heading_4">
      OnEachFeature – Für jedes Feature
    </div>

    <p class="para_Text_body"><span id="__DdeLink__15259_730664599">OnEachFeature ist eine Methode, die einmal für jedes im Layer vorhandene GeoJSON Objekt vom Typ Feature aufgerufen wird</span> ist eine Methode, die einmal für jedes im Layer vorhandene GeoJSON Objekt vom Typ Feature aufgerufen wird. Nützlich ist diese Option zum Anhängen von Ereignissen und/oder Fenstern an jedes Feature Objekt.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var geojsonFeatureCollection =</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "FeatureCollection",</p>

    <p class="para_Quelltext">"features":</p>

    <p class="para_Quelltext">[</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": {"type": "Point", "coordinates": [6, 50]},</p>

    <p class="para_Quelltext">"properties": {"name": "Dorf 1"}</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": {"type": "Point", "coordinates": [7, 50]},</p>

    <p class="para_Quelltext">"properties": {"name": "Dorf 2"}</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": {"type": "Point", "coordinates": [7, 51]},</p>

    <p class="para_Quelltext">"properties": {"name": "Dorf 3"}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">]</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">L.geoJson(geojsonFeatureCollection, {</p>

    <p class="para_Quelltext">onEachFeature: function(feature, layer) {</p>

    <p class="para_Quelltext">layer.bindPopup(feature.properties.name);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_968.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Der vorhergehende Programmcode zeigt Ihnen, wie Sie jedem Feature Objekt, das über die hart kodiert eingefügten GeoJSON Daten eingelesen wird, ein anhängen können – und zwar jedem ein individuelles. Der Text für das wird ebenfalls aus den GeoJSON Daten ausgelesen, er versteckt sich in der Eigenschaft feature.properties.name.</p>

    <p class="para_Text_body">Das nachfolgende Bild stellt die drei Marker dar.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild6.png" alt=" Abbildung 27"/><br/><br/>
    </figure>

    <figure class="image_container left-align" style="width:642px;">
      Nun würden wir dem Marker aber vielleicht auch gerne ein spezielles Aussehen geben. Vielleicht möchten Sie sogar jeden Marker unterschiedlich gestalten. onEachFeature() bietet Ihnen hierzu keine Möglichkeit. Der Marker wird hier automatisch mit Standardwerten erstellt. Leaflet bietet Ihnen aber eine andere Funktion für diesen Zweck. Die Funktion heißt pointtoLayer() und ein Beispiel dazu, wie Sie mit dieser Methode einen eigenen Marker erstellen und mit individuellen Optionen verstehen können, finden Sie im nächsten Kapitel.
    </figure>

    <div id="chapter-97" class="para_Heading_4">
      PointToLayer – Punkt zu Ebene
    </div>

    <p class="para_Text_body">Die Methode <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#geojson-pointtolayer">pointToLayer</a>, die wir uns in diesem Kapitel ansehen, ist spezielle für die Arbeit mit einem GeoJSON Objekten vom Typ Point gemacht. Dieses ist das GeoJSON Pendant zum Marker. Wenn wir einen Point beim Erstellen des GeoJSON Layers als Parameter übergeben, dann wird ein Standard Marker erstellt. Wollen wir diesen Marker individuell gestalten, dann brauchten wir entweder einen Variablennamen, den wir ansprechen können, oder wir müssen ihn selbst instanziieren. Für das Instanziieren brauchen wir eine Position oder eine Point. Und nun schließt sich der Kreis. Die Option pointtoLayer gibt uns Zugriff auf die Koordinaten. Sehen Sie sich das nächste Beispiel an. Ein Beispiel erklärt oft mehr als viele Worte.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var geojsonFeatureCollection =</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "FeatureCollection",</p>

    <p class="para_Quelltext">"features":</p>

    <p class="para_Quelltext">[</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": {"type": "Point", "coordinates": [6, 50]},</p>

    <p class="para_Quelltext">"properties": {"name": "Dorf 1"}</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": {"type": "Point", "coordinates": [7, 50]},</p>

    <p class="para_Quelltext">"properties": {"name": "Dorf 2"}</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": {"type": "Point", "coordinates": [7, 51]},</p>

    <p class="para_Quelltext">"properties": {"name": "Dorf 3"}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">]</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">var options_draggable = {</p>

    <p class="para_Quelltext">draggable: true,</p>

    <p class="para_Quelltext">title: "Ein Ort in der Nähe von Gering"</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">var options_notdraggable = {</p>

    <p class="para_Quelltext">draggable: false,</p>

    <p class="para_Quelltext">title: "Ein Ort in der Nähe von Gering"</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">L.geoJson(geojsonFeatureCollection, {</p>

    <p class="para_Quelltext">pointToLayer: function(feature, latlng) {</p>

    <p class="para_Quelltext">switch(feature.properties.name)</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">case "Dorf 1": return L.marker(latlng, options_draggable).bindPopup(feature.properties.name);</p>

    <p class="para_Quelltext">case "Dorf 2": return L.marker(latlng, options_notdraggable).bindPopup(feature.properties.name);</p>

    <p class="para_Quelltext">case "Dorf 3": return L.marker(latlng, options_notdraggable).bindPopup(feature.properties.name);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_967.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Im vorhergehenden Programmcodebeispiel sehen Sie, wie ein Marker erstellt und mit einem individuellen Text versehen wird. Das Ergebnis ist auf den ersten Blick genau das Gleiche wie im vorhergehenden Kapitel. Welcher Text dem Marker genau zugewiesen wird, ist in dem Beispiel auch von der Eigenschaft feature.properties.name abhängig. Zusätzlich werden in diesem Beispiel Optionen von dem Namen abhängig gemacht. Nur der Marker von Dorf 1 kann auf der Karte verschoben werden. Der größte Unterschied ist aber, dass wir den Marker hier selbst erstellen und deshalb Einfluss auf die Optionen haben.</p>

    <p class="para_Text_body">Sehen Sie sich die Karte, die Sie in der folgenden Abbildung sehen in Ihrem Browser an. Auf den ersten Blick hat sich nichts zu dem Beispiel des vorherigen Kapitels geändert. Auf den zweiten Blick werden Sie feststellen, dass Sie nur den Marker von Dorf 1 auf der Karte verschieben können.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild7.png" alt=" Abbildung 28"/>
    </figure>

    <p class="para_Text_body"><br/></p>

    <div id="chapter-98" class="para_Heading_4">
      Filtern mit der Option filter
    </div>

    <p class="para_Text_body">Mithilfe der Option filter können Sie eine große Menge von Daten auf das Wesentliche beschränken. Sehen Sie sich dies im Kleinen im nächsten Beispiel an.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var geojsonFeatureCollection =</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "FeatureCollection",</p>

    <p class="para_Quelltext">"features":</p>

    <p class="para_Quelltext">[</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": {"type": "Point", "coordinates": [6, 50]},</p>

    <p class="para_Quelltext">"properties": {"name": "Dorf 1"}</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": {"type": "Point", "coordinates": [7, 50]},</p>

    <p class="para_Quelltext">"properties": {"name": "Dorf 2"}</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type": "Feature",</p>

    <p class="para_Quelltext">"geometry": {"type": "Point", "coordinates": [7, 51]},</p>

    <p class="para_Quelltext">"properties": {"name": "Dorf 3"}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">]</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">var options = {</p>

    <p class="para_Quelltext">draggable: true,</p>

    <p class="para_Quelltext">title: "Ein Ort in der Nähe von Gering"</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">L.geoJson(geojsonFeatureCollection, {</p>

    <p class="para_Quelltext">filter: function(feature, latlng) {</p>

    <p class="para_Quelltext">switch (feature.properties.name) {</p>

    <p class="para_Quelltext">case "Dorf 1": return true;</p>

    <p class="para_Quelltext">default: return false;</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_966.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Im Beispiel sehen Sie, dass auf einem GeoJSON Layer nur die Elemente angezeigt werden, deren Rückgabewert beim Filtern positiv oder true ist.</p>

    <p class="para_Text_body">Sie nachfolgende Abbildung zeigt es Ihnen: Nur Dorf 1 wird angezeigt. Die beiden anderen Orte, die sich in den GeoJSON Daten befinden, werden heraus gefiltert. Sie sehen nur einen Marker.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild8.png" alt=" Abbildung 29"/>

      <figcaption class="para_Illustration">Abbildung 29</figcaption>
    </figure>

    <p class="para_Text_body">955.png</p>

    <div id="chapter-99" class="para_Heading_2">
      In diesem Kapitel haben wir …
    </div>

    <p class="para_Text_body">In diesem Kapitel haben wir uns das Format GeoJSON genau angesehen<span id="__DdeLink__13831_11726686051">. Wir haben die GeoJSON Typen mit den Objekten die wir mit Leaflet erstellen können verglichen. Außerdem haben wir viele der Methoden und Optionen, die Leaflet zum Arbeiten mit GeoJSON bietet, angewandt</span>. Wir haben die GeoJSON Typen mit den Objekten die wir mit Leaflet erstellen können verglichen. Außerdem haben wir viele der Methoden und Optionen, die Leaflet zum Arbeiten mit GeoJSON bietet, angewandt<span id="__DdeLink__13831_11726686051">. Wir haben die GeoJSON Typen mit den Objekten die wir mit Leaflet erstellen können verglichen. Außerdem haben wir viele der Methoden und Optionen, die Leaflet zum Arbeiten mit GeoJSON bietet, angewandt</span>. <span id="__DdeLink__16477_730664599">Eine Karte mit Daten füllen können wir nun. Im nächsten Kapitel sehen wir uns an, wie wir mit den Daten auch Aussagen treffen oder Fragen beantworten können.</span>Eine Karte mit Daten füllen können wir nun. Im nächsten Kapitel sehen wir uns an, wie wir mit den Daten auch Aussagen treffen oder Fragen beantworten können.<span id="__DdeLink__16475_730664599">Eine Karte mit Daten füllen können wir nun. Im nächsten Kapitel sehen wir uns an, wie wir mit den Daten auch Aussagen treffen oder Fragen beantworten können.</span></p>

    <div id="chapter-100" class="para_Heading_1">
      Heatmaps und Choroplethenkarten
    </div>

    <p class="para_Text_body">In den ersten beiden Kapiteln haben wir uns angesehen, wie Sie Elemente entweder direkt – oder mithilfe einer in GeoJSON formatierten Daten – zu Ihrer Karte hinzugefügt können. Jetzt geht es darum, dieses Wissen in die Tat umzusetzen.</p>

    <div id="chapter-101" class="para_Heading_2">
      In diesem Kapitel werden wir …
    </div>

    <p class="para_Text_body">In diesem Kapitel werden wir nicht nur einfach Elemente auf der Karte zeichnen. Wir werden mit der Karte Informationen weitergeben und Fragen beantworten. Insbesondere statistische Daten können auf Karten viel besser veranschaulicht werden, als in einer trockenen Tabelle – und nebenbei macht es sogar Spaß eine solche Karte zu erkunden.</p>

    <p class="para_Text_body">Zwei Typen von Karten – nämlich <span id="__DdeLink__7354_1248725271">Heatmaps</span> und <span id="__DdeLink__7356_1248725271">Choroplethenkarten</span> – sehen wir uns nun in diesem Kapitel näher an. Beginnen wir mit der Heatmap.</p>

    <div id="chapter-102" class="para_Heading_2">
      Heatmaps
    </div>

    <p class="para_Text_body"><span id="__DdeLink__7358_1248725271">Heatmaps kennen wir im Deutschen auch unter dem Namen Wärmebild.</span><a class="extern" href="https://de.wikipedia.org/wiki/Heatmap">Heatmaps</a> kennen wir im Deutschen auch unter dem Namen Wärmebild.<span id="__DdeLink__7360_1248725271">Heatmaps kennen wir im Deutschen auch unter dem Namen Wärmebild.</span></p>

    <div id="chapter-103" class="para_Heading_3">
      Was ist eine Heatmap?
    </div>

    <p class="para_Text_body"><span id="__DdeLink__7362_1248725271">Eine Heatmap ist im Grunde genommen ein Diagramm, mit dem Daten visualisiert werden.</span>ist im Grunde genommen ein Diagramm, mit dem Daten visualisiert werden. Diese Visualisierung dient dazu, in einer großen Datenmenge intuitiv und schnell einen Überblick zu bekommen. <span id="__DdeLink__7376_1248725271">In der grafischen Darstellung kristallisieren sich besonders markante Werte oft schnell heraus.</span>besonders markante Werte oft schnell heraus.</p>

    <p class="para_Text_body"><span id="__DdeLink__7364_1248725271">Heatmaps färben Bereich unterschiedlich, wenn die Intensität oder die Dichte des untersuchten Objektes unterschiedlich ist.</span>oder die Dichte des untersuchten Objektes unterschiedlich ist.</p>

    <p class="para_Quotations">Hinweis:<br/><span id="__DdeLink__8514_697365185">Möchten Sie gerne wissen, wie die Darstellung einer Heatmap technisch umgesetzt wird? Vereinfacht ausgedrückt wird zunächst ein Gitternetz über die Karte gelegt. </span>Basierend auf diesem Gitternetz wird im nächsten Schritt die Anzahl der Punkte in jedem Gitternetz-Bereich gezählt. Je nach Punktanzahl wird zum Schluss die Anzeige angepasst. Ist in einem Bereich kein Punkt vorhanden, wird dieser Bereich nicht mit Farbe gefüllt. Bei den anderen Bereichen wird je nach Anzahl die passende Farbe im Bereich eingeblendet. Dieses Verfahren nennt man Multivariate Kerndichte Schätzung (englisch: Multivariate kernel density estimation). Detaillierter können Sie dies beispielsweise bei <a class="extern" href="https://en.wikipedia.org/wiki/Multivariate_kernel_density_estimation">Wikipedia</a> nachlesen.</p>

    <figure class="image_container left-align" style="width:500px;">
      <img src="../Images/946.png" alt=" Abbildung 30: (By Drleft (Own work) [CC BY-SA 3.0 (http://creativecommons.org/licenses/by-sa/3.0) or GFDL (http://www.gnu.org/copyleft/fdl.html)], via Wikimedia Commons)"/>

      <figcaption class="para_Illustration">Abbildung 30: (By Drleft (Own work) [CC BY-SA 3.0 (http://creativecommons.org/licenses/by-sa/3.0) or GFDL (http://www.gnu.org/copyleft/fdl.html)], via Wikimedia Commons)</figcaption>
    </figure>

    <p class="para_Quotations"><br/><br/></p>

    <p class="para_Text_body">Meist werden bei geringer Intensität oder geringer Dichte kalte Farben verwendet und bei einem hohen Aufkommen wird der Bereich mit warmen Farben eingefärbt. Dies erklärt auch den Namen Heatmap – der englische Begriff für Hitze ist heat.</p>

    <p class="para_Quotations">Hinweis:<br/>Blau gilt als <a class="extern" href="https://de.wikipedia.org/wiki/Kalte_Farbe">kalte Farbe</a>, Rot, Orange und Gelb gelten als <a class="extern" href="https://de.wikipedia.org/wiki/Warme_Farbe">warme Farben</a>.</p>

    <div id="chapter-104" class="para_Heading_3">
      Heatmaps in Leaflet – Dichte
    </div>

    <p class="para_Text_body">Unser erstes Beispiel zeigt eine Heatmap, die die unterschiedliche Dichte von Punkten sichtbar macht. Die Funktionen zum Anzeigen einer Heatmap werden nicht im Standardumfang von Leaflet mitgeliefert. Es handelt sich hierbei um eine besondere Funktion, die im Normalfall nicht zur Darstellung einer digitalen Karte benötigt wird. Leaflet selbst konzentriert sich auf die Anwendungsfälle, die üblicherweise beim Anzeigen einer Karte benötigt werden – ist aber offen für Plugins. Eines dieser Plugins ist <a class="extern" href="https://github.com/Leaflet/Leaflet.heat">Leaflet.heat</a>.</p>

    <p class="para_Quotations">Weiter Plugins, mit denen Sie Wärmeabbildungen oder ähnliche Visualisierungen aus Vektordaten erstellen können, finden Sie auf der Website von Leaflet im Bereich Plugins: <a class="extern" href="http://leafletjs.com/plugins.html#heatmaps">http://leafletjs.com/plugins.html#heatmaps</a></p>

    <p class="para_Text_body">Nachfolgende finden Sie das erste Beispiel für diesen Themenbereich.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-heat.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.1555 , 7.591838], 10);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var points = [</p>

    <p class="para_Quelltext">[50.1555 , 7.591838 , 0.2],</p>

    <p class="para_Quelltext">[50.0931 , 7.664177 , 0.2],</p>

    <p class="para_Quelltext">...</p>

    <p class="para_Quelltext">[50.088041 , 7.652033 , 0.2],</p>

    <p class="para_Quelltext">[50.088041 , 7.652033 , 0.2],</p>

    <p class="para_Quelltext">[50.088041 , 7.652033 , 0.2]</p>

    <p class="para_Quelltext">];</p>

    <p class="para_Quelltext">var heat = L.heatLayer(points,</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">minOpacity: 0.95,</p>

    <p class="para_Quelltext">blur: 15,</p>

    <p class="para_Quelltext">maxZoom: 15,</p>

    <p class="para_Quelltext">max: 1,</p>

    <p class="para_Quelltext">radius: 15,</p>

    <p class="para_Quelltext">gradient: {0.4: 'blue', 0.65: 'lime', 1: 'red'}</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_965.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was haben wir gemacht? Als Erstes haben wir die Skript-Datei zum Plugin mit &lt;script src="leaflet-heat.js"&gt;&lt;/script&gt; eingebunden. Ich hatte die Datei von der oben verlinkten Website kopiert und unter dem Namen leaflet-heat.js im Verzeichnis der HTML-Datei abgelegt. Danach habe ich eine Variable mit dem Namen points und dem Typ Array erstellt, in der 700 Koordinaten gespeichert sind. Zu guter Letzt habe ich ein Objekt der Klasse L.heatLayer instanziiert und diesem die Punkte in der Variablen points und einige Optionen übergeben.</p>

    <p class="para_Quotations">Der Dritte Wert bei der Übergabe der Daten steht für die Intensität.<br/><br/>var points = [<br/>[50.1555 , 7.591838 , 0.2],<br/>…<br/><br/>Ich habe diesen Wert hier absichtlich immer mit der gleichen Zahl belegt. Ich nutze dieses Plugin nicht für die Visualisierung der Intensität. Hierfür zeige ich Ihnen im nächsten Kapitel eine andere Leaflet Erweiterung.</p>

    <p class="para_Text_body">Das Ergebnis sehen Sie im nachfolgenden Bild. Da wir noch nichts gestaltet haben, sehen Sie Standardansicht. Diese ist noch sehr rudimentär. Das geht besser, Sie werden sehen.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/954.png" alt="Bild56"/>
    </figure>

    <p class="para_Text_body">954.png</p>

    <div id="chapter-105" class="para_Heading_4">
      Stile-Optionen
    </div>

    <p class="para_Text_body">Das <a class="extern" href="https://github.com/Leaflet/Leaflet.heat">Plugin Leaflet.heat</a> erlaubt es Ihnen Parameter zu übergeben. Dabei haben Sie folgende Möglichkeiten:</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">minOpacity: <br/>minOpacity gibt die minimale Dichte an, ab der die Anzeige beginnt.</p></li>

      <li><p class="para_Text_body">maxZoom:<br/>maxZoom sollte auf die Zoomstufe gesetzt werden, bei der die Punkte die maximale Intensität erreichen. Als Standard wird der Wert, der für</p>

      <p class="para_Text_body">maxZoom in der Karte gesetzt ist, verwendet. Auf die Darstellung des Heatmap-Layers hat dies keine Auswirkungen. Sie sollten den Wert so setzten, dass Ihre Karte die beste Aussagekraft hat. Wenn der Wert zu hoch ist, kann es sein, dass die Punkte so weit auseinander liegen, dass der dichteste Bereich nicht mehr deutlich erkennbar ist. Setzen Sie Wert zu niedrig an, kann man die Daten vielleicht nicht mehr zusammenhängend im Überblick sehen.</p></li>

      <li><p class="para_Text_body">max:<br/>Maximale Punktintensität – 1.0 ist der Standardwert. Diese Option arbeitet momentan nicht <a class="extern" href="https://github.com/Leaflet/Leaflet.heat/issues/74">korrekt</a>. Aus diesem Grund stelle ich Ihnen im nächsten Kapitel ein alternatives Plugin zur Visualisierung der Intensität vor.</p></li>

      <li><p class="para_Text_body">radius:<br/>Dieser Wert erklärt sich meiner Meinung nach von selbst. Mit dem Wert radius geben Sie die Größe an, in der die Punkte angezeigt werden sollen. 25 ist der Standardwert.</p></li>

      <li><p class="para_Text_body">blur:<br/>Mit dem Wert blur können Sie die Schärfe beeinflussen. Der Wert bestimmt, wie viele Punkte zusammen gefasst werden. Ein niedriger blur Wert erzeugt einzelnen Punkte, wohingegen ein hoher Wert mehrere Punkte zusammenfasst. Standardmäßig ist der Wert auf 15 festgesetzt.</p></li>

      <li><p class="para_Text_body">Gradient:<br/>Der Wert Gradient steht für die Konfiguration des Farbverlaufs. Standardwert ist {0.4: 'blue', 0.65: 'lime', 1: 'red'}. Sie können beliebig viele Werte zwischen 0 und 1 angeben. Die Farbe die am Rand, also bei geringer Dichte angezeigt werden soll, sollten Sie mit dem niedrigen Wert angeben. Die Farbe, die im Zentrum zu sehen sein soll, geben Sie idealerweise beim Wert 1 an.</p></li>
    </ul>

    <div id="chapter-106" class="para_Heading_5">
      Vergleich einer Ansicht mit unterschiedlichen Werten für die Optionen blur und maxZoom
    </div>

    <div style="align: justify;">
      <table style="margin-top: 0px; margin-bottom: 0px; width: 100%;">
        <tbody>
          <tr>
            <td style="padding: 3px; border-top-width: 1px; border-top-style: solid; border-top-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/980a.png" alt=" Abbildung 31 blur = 1"/>

                <figcaption class="para_Illustration">Abbildung 31 blur = 1</figcaption>
              </figure>

              <p class="para_Table_Contents">980a.png</p>
            </td>

            <td style="padding: 3px; border: 1px solid rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/980b.png" alt=" Abbildung 32 blur = 40 "/>

                <figcaption class="para_Illustration">Abbildung 32 blur = 40</figcaption>
              </figure>

              <p class="para_Table_Contents">980b.png</p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/980c.png" alt=" Abbildung 33 maxZoom = 6"/>

                <figcaption class="para_Illustration">Abbildung 33 maxZoom = 6</figcaption>
              </figure>

              <p class="para_Table_Contents"><br/><br/></p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/980d.png" alt=" Abbildung 34 maxZoom = 13"/>

                <figcaption class="para_Illustration">Abbildung 34 maxZoom = 13</figcaption>
              </figure>

              <p class="para_Table_Contents"><br/><br/></p>
            </td>
          </tr>

          <tr>
            <td style="padding: 3px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/Bild98.png" alt=" Abbildung 35 gradient {0.1: '#edf8fb', 0.2: '#ccece6', 0.3: '#99d8c9', 0.5: '#66c2a4', 0.7: '#2ca25f', 1: '#006d2c'}"/>

                <figcaption class="para_Illustration">Abbildung 35 gradient {0.1: '#edf8fb', 0.2: '#ccece6', 0.3: '#99d8c9', 0.5: '#66c2a4', 0.7: '#2ca25f', 1: '#006d2c'}</figcaption>
              </figure>

              <p class="para_Table_Contents">980e.png</p>
            </td>

            <td style="padding: 3px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <p class="para_Table_Contents"><br/><br/></p>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quotations">Gefallen Ihnen die kalten und warmen Farben nicht? Möchten Sie lieber Ihre eigene Farbzusammenstellung nutzen? Die Website <a class="extern" href="http://colorbrewer2.org/">http://colorbrewer2.org</a> hilft beim Auswählen von Farben.</p>

    <div id="chapter-107" class="para_Heading_4">
      Methoden
    </div>

    <p class="para_Text_body">Zusätzlich zu den Stylesheet Optionen bietet Ihnen das Plugin Leaflet.heat vier Methoden:</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">setOptions(options):<br/>Diese Methode setzt die Optionen der Heatmap neu und zeichnet die Heatmap neu.</p></li>

      <li><p class="para_Text_body">addLatLng(latlng):<br/>Diese Methode fügt einen Punkt zu Heatmap hinzu und aktualisiert die Ansicht gleichzeitig.</p></li>

      <li><p class="para_Text_body">setLatLngs(latlngs):<br/>Diese Methode liest die Daten neu ein und aktualisiert danach die Ansicht.</p></li>

      <li><p class="para_Text_body">Redraw():<br/>Diese Methode zeichnet die Heatmap neu. Sie beim Ausführen der drei anderen Methoden automatisch ausgeführt, so das Sie dies nicht selbst veranlassen müssen.</p></li>
    </ul>

    <div id="chapter-108" class="para_Heading_5">
      Die Methode AddLatLng()
    </div>

    <p class="para_Text_body">Mithilfe der Methode AddLatLng() können Sie nachträglich noch einen Punkt zum Heatmap Layer hinzufügen.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-heat.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 10);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var points = [</p>

    <p class="para_Quelltext">[50.1555, 7.591838, 0.2],</p>

    <p class="para_Quelltext">..</p>

    <p class="para_Quelltext">[50.188041, 7.662033, 0.2],</p>

    <p class="para_Quelltext">[50.88041, 7.52033, 0.2]</p>

    <p class="para_Quelltext">];</p>

    <p class="para_Quelltext">var heat = L.heatLayer(points,</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">minOpacity: 0.95,</p>

    <p class="para_Quelltext">blur: 15,</p>

    <p class="para_Quelltext">maxZoom: 15,</p>

    <p class="para_Quelltext">max: 1.0,</p>

    <p class="para_Quelltext">radius: 25,</p>

    <p class="para_Quelltext">gradient: {0.4: 'blue', 0.65: 'lime', 1: 'red'}</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">heat.addLatLng([50.27264, 7.26469, 0.2]);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_964.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">In der nächsten Abbildung können Sie den neu hinzugefügten Punkt erkennen.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild51.png" alt=" Abbildung 36"/>

      <figcaption class="para_Illustration">Abbildung 36</figcaption>
    </figure>

    <p class="para_Text_body">979.png</p>

    <p class="para_Quotations">Möchten Sie es Website Besuchern ermöglichen Punkte zur Heatmap auf ihrer Karte hinzuzufügen? Eine Demo auf der Website zum Plugin zeigt genau solch ein als Beispiel: <a class="extern" href="http://leaflet.github.io/Leaflet.heat/demo/draw.html">http://leaflet.github.io/Leaflet.heat/demo/draw.html</a></p>

    <div id="chapter-109" class="para_Heading_5">
      Die Methoden addLatLng(), addLatLngs() und setOptions() in einem Beispiel
    </div>

    <p class="para_Text_body">In diesem Kapitel stelle ich Ihnen ein Beispiel vor, dass per Schaltfläche die verschiedenen Methoden anwendet.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-heat.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;button onclick="add()"&gt;Punkt hinzufügen&lt;/button&gt;&lt;br&gt;</p>

    <p class="para_Quelltext">&lt;button onclick="newPoint()"&gt;Daten neu setzen&lt;/button&gt;&lt;br&gt;</p>

    <p class="para_Quelltext">&lt;button onclick="reset()"&gt;Reset&lt;/button&gt;&lt;br&gt;</p>

    <p class="para_Quelltext">&lt;button onclick="setOptions()"&gt;Farben ändern&lt;/button&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 10);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var points = [</p>

    <p class="para_Quelltext">[50.1555, 7.591838, 0.2],</p>

    <p class="para_Quelltext">..</p>

    <p class="para_Quelltext">[50.088041, 7.652033, 0.2],</p>

    <p class="para_Quelltext">[50.088041, 7.652033, 0.2]</p>

    <p class="para_Quelltext">];</p>

    <p class="para_Quelltext">var heat = L.heatLayer(points,</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">minOpacity: 0.95,</p>

    <p class="para_Quelltext">blur: 15,</p>

    <p class="para_Quelltext">maxZoom: 15,</p>

    <p class="para_Quelltext">max: 1.0,</p>

    <p class="para_Quelltext">radius: 25,</p>

    <p class="para_Quelltext">gradient: {0.4: 'blue', 0.65: 'lime', 1: 'red'}</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">function add()</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">heat.addLatLng([50.1, 7.1, 0.2]);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">function newPoint()</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">heat.setLatLngs([[50.5, 7, 0.2]]);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">function reset()</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">heat.setLatLngs(points);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">function setOptions()</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">heat.setOptions({gradient: {0.4: 'black', 0.65: 'gray', 1: 'white'}</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_963.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was passiert genau in diesem Beispiel? Zunächst fügen wir vier Schaltflächen in das HTML-Dokument ein. Eine Schaltfläche führen eine der Methoden add(), newPoint(), reset() oder setOptions() aus, wenn sie angeklickt wird. Der Aufruf von add() führt den Code heat.addLatLng([50.1, 7.1, 0.2]); aus fügt dabei den Punkt [50.1, 7.1, 0.2] zu den Heatmap Daten hinzu. Die Methode newPoint() führt die Programmcodezeile heat.setLatLngs([[50.5, 7, 0.2]]); aus und setzt dabei die Daten des Heatmap Layers neu. Diese enthalten nun den einen Punkt im Array [[50.5, 7, 0.2]]. Die Methode reset() führt den Code heat.setLatLngs(points); aus und setzt damit die Daten des Heatmap Layers wieder mit den Daten der Variablen points. Achtung: Wenn Sie einen Punkt zum Layer hinzugefügt haben, als die Variable points Datenbestand des Layers war, dann sind diese Daten nun auch in der Variablen points enthalten! Die Methode setOptions() ist meiner Meinung nach selbsterklärend. Sie ändert einfach nur CSS Eigenschaften des Layers.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Einen Screenshot der Karte aus diesem Beispiel sehen Sie in der nachfolgenden Abbildung.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/953.png" alt=" Abbildung 37"/>

      <figcaption class="para_Illustration">Abbildung 37</figcaption>
    </figure>

    <p class="para_Text_body">953.png</p>

    <div id="chapter-110" class="para_Heading_4">
      Marker
    </div>

    <p class="para_Text_body">In nächsten Beispiel sehen Sie, wie Sie jedem Punkt in einer Heatmap einen Marker hinzufügen können.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-heat.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.1555 , 7.591838], 10);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var points = [</p>

    <p class="para_Quelltext">[50.1555 , 7.591838 , "&lt;img src='http://lorempixel.com/200/200/'&gt;"],</p>

    <p class="para_Quelltext">..</p>

    <p class="para_Quelltext">[50.088041 , 7.652033 , "&lt;img src='http://lorempixel.com/200/200/'&gt;"]</p>

    <p class="para_Quelltext">];</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">for(var i=0;i&lt;points.length;i++)</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">L.marker(</p>

    <p class="para_Quelltext">[parseFloat(points[i][0]),parseFloat(points[i][1])],</p>

    <p class="para_Quelltext">{opacity:0}).bindPopup(points[i][2],{keepInView:true}).addTo(mymap);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">var heat = L.heatLayer(points,</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">minOpacity: 0.95,</p>

    <p class="para_Quelltext">blur: 15,</p>

    <p class="para_Quelltext">maxZoom: 15,</p>

    <p class="para_Quelltext">max: 1,</p>

    <p class="para_Quelltext">radius: 15,</p>

    <p class="para_Quelltext">gradient: {0.4: 'blue', 0.65: 'lime', 1: 'red'}</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_962.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was ist diesem Beispiel anders? Wir haben der Variablen point einen dritten Wert mitgegeben. Hier die Adresse zu einem Bild. Dies hätte aber auch ein gewöhnlicher Text sein können. Diesen dritten Wert haben wir dann in der Methode bindPopup(points[i][2],{keepInView) dazu genutzt, einen individuellen Marker zu kreieren.</p>

    <p class="para_Text_body">So wie in der nächsten Abbildung könnte die fertige Karte aussehen.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/980.png" alt=" Abbildung 38"/>

      <figcaption class="para_Illustration">Abbildung 38</figcaption>
    </figure>

    <p class="para_Text_body">980.png</p>

    <div id="chapter-111" class="para_Heading_3">
      Heatmaps mit Leaflet – hetmap.js – Intensität
    </div>

    <p class="para_Text_body">Im vorhergehenden Kapitel haben wir eine Heatmap mithilfe des Plugins Leaflet.heat erstellt. Diese Heatmap hat die Dichte von Punkten auf einer Karte visualisierte. Wir haben bisher die Möglichkeit die Intensität zu visualisieren nicht genutzt. Ich hatte Ihnen erklärt, warum ich Ihnen lieber ein anderes Plugin für diesen Zweck vorstellen möchte. Als Nächstes möchte ich nun mit Ihnen eine Heatmap, die die Intensität der Eigenschaft eines Punktes darstellt, mithilfe des Plugins <a class="extern" href="https://github.com/pa7/heatmap.js">heatmap.js</a> erarbeiten. Herunterladen können Sie das Plugin unter der Adresse <a class="extern" href="https://www.patrick-wied.at/static/heatmapjs/plugin-leaflet-layer.html">https://www.patrick-wied.at/static/heatmapjs/plugin-leaflet-layer.html</a> und die Dokumentation finden sie unter https://www.patrick-wied.at/static/heatmapjs/docs.html.</p>

    <p class="para_Text_body">Nachfolgende sehen Sie das erste Beispiel.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="heatmap.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-heatmap.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var myData={</p>

    <p class="para_Quelltext">max: 100,</p>

    <p class="para_Quelltext">data: [</p>

    <p class="para_Quelltext">{lat: 51.0934, lon:8.666819, value: 99},</p>

    <p class="para_Quelltext">..</p>

    <p class="para_Quelltext">{lat: 50.088041, lon:7.652033, value: 23},</p>

    <p class="para_Quelltext">{lat: 50.088041, lon:7.652033, value: 23}]</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">var baseLayer = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png');</p>

    <p class="para_Quelltext">var cfg = {</p>

    <p class="para_Quelltext">"radius": .1,</p>

    <p class="para_Quelltext">"maxOpacity": .5,</p>

    <p class="para_Quelltext">"scaleRadius": true,</p>

    <p class="para_Quelltext">"useLocalExtrema": true,</p>

    <p class="para_Quelltext">latField: 'lat',</p>

    <p class="para_Quelltext">lngField: 'lon',</p>

    <p class="para_Quelltext">valueField: 'value'</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">var heatmapLayer = new HeatmapOverlay(cfg);</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">heatmapLayer.setData(myData);</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext"><span id="__DdeLink__16994_1940707703">var map = new L.Map('mapid', { center: new L.LatLng(50.0586, 7.6568), zoom: 8, layers: [baseLayer, heatmapLayer] });</span></p>

    <p class="para_Quelltext">center: new L.LatLng(50.0586, 7.6568),</p>

    <p class="para_Quelltext">zoom: 8,</p>

    <p class="para_Quelltext">layers: [baseLayer, heatmapLayer]</p>

    <p class="para_Quelltext">});<span id="__DdeLink__16994_1940707703">var map = new L.Map('mapid', { center: new L.LatLng(50.0586, 7.6568), zoom: 8, layers: [baseLayer, heatmapLayer] });</span></p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_961.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was zeigt Ihnen dieses Beispiel genau? Zunächst einmal müssen Sie neben dem Skript leaflet.heat.js auch das Skript heat.js einbinden. Als Nächstes müssen Sie die Daten, die Sie visualisieren möchten, angeben – diese müssen eine Angabe zu dem maximal möglichen Wert enthalten: var myData={ max: 100,data: [ {lat: 51.0934, lon:8.666819, value: 99}…. Danach können Sie den Heatmap Layer mit den Optionen cfg erstellen. Der Eintrag hierfür lautet var heatmapLayer = new HeatmapOverlay(cfg);. Diesem Layer können Sie nun die Daten mit heatmapLayer.setData(myData); hinzufügen. Zum Schluss können diesen Layer nun zum Kartenobjekt hinzufügen: L.Map('mapid', { center: new L.LatLng(50.0586, 7.6568), zoom: 8, layers: [baseLayer, heatmapLayer]});</p>

    <p class="para_Text_body">Wie das aussehen sollte, können Sie sich in der nächsten Abbildung ansehen.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/952.png" alt=" Abbildung 39"/>

      <figcaption class="para_Illustration">Abbildung 39</figcaption>
    </figure>

    <p class="para_Text_body">952.png</p>

    <div id="chapter-112" class="para_Heading_4">
      Dokumentation und Methoden
    </div>

    <p class="para_Text_body">Das nachfolgende Beispiel zeigt Ihnen, wie unterschiedlich Punkte mit unterschiedlicher Intensität aussehen können.</p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="heatmap.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-heatmap.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var myData={</p>

    <p class="para_Quelltext">max: 100,</p>

    <p class="para_Quelltext">data: [</p>

    <p class="para_Quelltext">{lat: 51.0934, lon:8.666819, value: 99},</p>

    <p class="para_Quelltext">...</p>

    <p class="para_Quelltext">{lat: 50.088041, lon:7.652033, value: 23}]</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">var baseLayer = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png');</p>

    <p class="para_Quelltext">var cfg = {</p>

    <p class="para_Quelltext">"radius": .1,</p>

    <p class="para_Quelltext">"maxOpacity": .5,</p>

    <p class="para_Quelltext">"scaleRadius": true,</p>

    <p class="para_Quelltext">"useLocalExtrema": true,</p>

    <p class="para_Quelltext">latField: 'lat',</p>

    <p class="para_Quelltext">lngField: 'lon',</p>

    <p class="para_Quelltext">valueField: 'value',</p>

    <p class="para_Quelltext">gradient: {</p>

    <p class="para_Quelltext">'.4': 'blue',</p>

    <p class="para_Quelltext">'.8': 'lime',</p>

    <p class="para_Quelltext">'.95': 'red'</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">blur: 0.75</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">var heatmapLayer = new HeatmapOverlay(cfg);</p>

    <p class="para_Quelltext">var map = new L.Map('mapid', {</p>

    <p class="para_Quelltext">center: new L.LatLng(50.0586, 7.6568),</p>

    <p class="para_Quelltext">zoom: 8,</p>

    <p class="para_Quelltext">layers: [baseLayer, heatmapLayer]</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">heatmapLayer.setData(myData);</p>

    <p class="para_Quelltext">var test1 = {lat:51,lon:6,value:99};</p>

    <p class="para_Quelltext">var test2 = {lat:50.5,lon:6,value:60};</p>

    <p class="para_Quelltext">var test3 = {lat:50,lon:6,value:40};</p>

    <p class="para_Quelltext">var test4 = {lat:49.5,lon:6,value:20};</p>

    <p class="para_Quelltext">heatmapLayer.addData(test1);</p>

    <p class="para_Quelltext">heatmapLayer.addData(test2);</p>

    <p class="para_Quelltext">heatmapLayer.addData(test3);</p>

    <p class="para_Quelltext">heatmapLayer.addData(test4);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_960.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Im vorhergehen Codebeispiel haben wir 4 Punkte mit unterschiedlicher Intensität – 99, 60, 40 und 20 bei einem maximalen Wert von 100 – zur Karte hinzugefügt. In der nachfolgenden Abbildung sehen Sie die unterschiedliche Darstellung auf der Karte.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/949.png" alt=" Abbildung 40"/>

      <figcaption class="para_Illustration">Abbildung 40</figcaption>
    </figure>

    <p class="para_Text_body">949.png</p>

    <div id="chapter-113" class="para_Heading_3">
      Interaktive Heatmaps
    </div>

    <p class="para_Text_body">Auch auf eine Heatmap können Sie Benutzer interaktiv Daten hinzufügen lassen. Wie das geht sehen Sie im nachfolgenden Beispiel.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-heat.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.1555, 7.591838], 15);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var points = [];</p>

    <p class="para_Quelltext">var heat = L.heatLayer(points,</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">blur: 15,</p>

    <p class="para_Quelltext">maxZoom: 15,</p>

    <p class="para_Quelltext">max: 1.0,</p>

    <p class="para_Quelltext">radius: 25,</p>

    <p class="para_Quelltext">gradient: {0.4: 'blue', 0.65: 'lime', 1: 'red'}</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">function addpoint(e){</p>

    <p class="para_Quelltext">heat.addLatLng(e.latlng);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext"><span id="__DdeLink__17882_1940707703">mymap.on('click', addpoint);</span></p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext"><span id="__DdeLink__11063_41650818">&lt;!--index_959.html--</span>&gt;</p>

    <p class="para_Text_body">959.html</p>

    <p class="para_Text_body">Was haben wir gemacht? Als Erstes haben wir mit der Zeile &lt;script src="leaflet-heat.js"&gt;&lt;/script&gt; das Plugin leaflet.heat eingebunden. Wichtig ist, dass ein Doppelklick keine Zoom-Stufen Änderung auf der Karte auslöst. So stellen wir sicher, dass jemand nicht versehentlich zu schnell klickt und ungewollt die Zoom-Stufe ändert, obwohl er eigentlich zwei Punkte hinzufügen will. Dies haben wir verhindert, in dem wir die Option doubleClickZoom auf false setzten. Zu Beginn sollen noch keine Daten auf der Karte angezeigt werden. Deshalb haben wir zunächst einen leeren Datensatz mit var points = []; erstellt und diesen dann einem L.heatLayer Objekt bei der Instanziierung als Parameter mitgegeben var heat = L.heatLayer(points, {…}. Nun fehlt noch die Methode, in der ein Punkt hinzugefügt wird. Die ist mit function addpoint(e){ heat.addLatLng(e.latlng); }schnell erstellt. Und mymap.on('click', addpoint); bewirkt, dass diese auch ausgeführt wird, wenn jemand auf die Karte klickt.</p>

    <p class="para_Text_body">Das Ergebnis sehen Sie im Browser, wenn Sie die HTML Datei dieses Beispiels öffnen. Zunächst wird die Karte ganz normal angezeigt. Sie sehen keinen Wärmepunkt. Wenn Sie mit der Maus auf einen Punkt auf der Karte klicken, wird an dieser Stelle ein Wärmepunkt hinzugefügt.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/951.png" alt=" Abbildung 41"/>

      <figcaption class="para_Illustration">Abbildung 41</figcaption>
    </figure>

    <p class="para_Text_body">951.png</p>

    <div id="chapter-114" class="para_Heading_3">
      Animierte Heatmaps
    </div>

    <p class="para_Text_body">Das ist fast wie Kino – im nächsten Beispiel verändert sich die Karte automatisch.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-heat.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.1555 , 7.591838], 10);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var points = [];</p>

    <p class="para_Quelltext">var points1 = [[50.1555 , 7.591838 ],...];</p>

    <p class="para_Quelltext">var points2 = [[50.1555 , 7.591838 ],...];</p>

    <p class="para_Quelltext">var points3 = [[50.1555 , 7.591838 ],...];</p>

    <p class="para_Quelltext">var heat = L.heatLayer(points).addTo(mymap);</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">x=1;</p>

    <p class="para_Quelltext">var name='';</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">var interval = setInterval(function(){run()},2000);</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">function run(){</p>

    <p class="para_Quelltext">mymap.removeLayer(heat);</p>

    <p class="para_Quelltext">name="points"+x.toString();</p>

    <p class="para_Quelltext">heat = L.heatLayer(</p>

    <p class="para_Quelltext">window[name],</p>

    <p class="para_Quelltext">{blur:15,maxZoom:10,radius:25,gradient:{0.4: 'blue', 0.65: 'lime', 1: 'red'}})</p>

    <p class="para_Quelltext">.addTo(mymap);</p>

    <p class="para_Quelltext">if (x == 3) {</p>

    <p class="para_Quelltext">x=1;</p>

    <p class="para_Quelltext">} else {</p>

    <p class="para_Quelltext">x++;</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_958.html&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was passiert im Beispiel genau? Als Erstes integrieren wir wieder das notwendige Skript. Danach erstellen wir die vier Arrays und nennen diese points, points1, points2 und points3. Jeder Array enthält unterschiedliche Daten. Mit dem ersten leeren Array erstellen wir als Nächstes die Schicht mit den Daten für die Heatmap, also das Objekt des Typs Heatlayer. Die Hilfsvariable x in Verbindung mit der Methode setIntervall() ermöglicht es uns dann, die Heatmap Ebenen fortlaufend mit anderen Daten anzeigen.</p>

    <p class="para_Quotations">In diesem Beispiel haben ich zwei JavaScript Elemente verwendet, die vielleicht erklärungsbedürftig sind. Als Erstes habe ich den Variablennamen mit window[name] zusammengesetzt. Was bedeutet dies genau? Da es sich bei Javascript um Objekte, wird jede Variable in einem globalen Objekt gespeichert. Wenn Sie also die Variable points1 im globalen Bereich initialisieren – also nicht in einem Funktionskontext –, schreiben Sie diese Variablen implizit in ein globales Objekt. In einem Browser ist dies das Objekt <a class="extern" href="https://developer.mozilla.org/de/docs/Web/API/Window">window</a>. Der Wert dieser Variablen kann mit der Punkt oder Klammer Notation abgerufen werden. Also entweder mit var name = window.points1; oder mit var name = window['points1'];</p>

    <p class="para_Quotations">Außerdem haben wir die Methode <a class="extern" href="https://developer.mozilla.org/de/docs/Web/API/WindowTimers/setInterval">setInterval()</a> eingesetzt. Mit dieser Methode können Sie eine <span id="__DdeLink__8526_697365185">Funktion wiederholt aufrufen. Hierbei können Sie ein Intervall zwischen den einzelnen Aufrufen definieren.</span>wiederholt aufrufen. Hierbei können Sie ein Intervall zwischen den einzelnen Aufrufen definieren.</p>

    <p class="para_Text_body">So wie im nachfolgenden Bild sieht die Karte nur alle 6 Sekunden aus. In der Zwischenzeit wechselt die Ansicht zweimal.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/950.png" alt=" Abbildung 42"/>

      <figcaption class="para_Illustration">Abbildung 42</figcaption>
    </figure>

    <p class="para_Text_body">950.png</p>

    <div id="chapter-115" class="para_Heading_2">
      Choroplethenkarte
    </div>

    <p class="para_Text_body">Im vorherigen Kapitel haben wir eine Heatmap zum visualisieren von Daten verwendet. Wir haben zunächst mithilfe des Skripts Leaflet.heat Bereiche, in denen Punkte dichter vorkommen, farblich hervorgehoben. Dann haben wir zusätzlich das Skript heat.js geladen und Bereiche, in denen die Punkte eine hohe Intensität haben, farblich besonders markiert. Eine <a class="extern" href="https://de.wikipedia.org/wiki/Choroplethenkarte">Choroplethenkarte</a> macht erst einmal nichts anderes. Sie visualisiert die Dichte oder die Intensität bestimmter Objekte.</p>

    <div id="chapter-116" class="para_Heading_3">
      Was genau ist eine Choroplethenkarte?
    </div>

    <p class="para_Text_body">Im vorhergehenden Kapitel hatte ich Ihnen erklärt, das eine Heatmap ein Raster über die Karte legt. Je nachdem wie die Punkte in diesem Raster liegen, werden Farben sichtbar. Eine Choroplethenkarte verwendet kein separates Raster. Sie kennzeichnet relativ zu einem Polygon. Ein Polygon kann zum Beispiel ein Land sein. In Kapitel Die Karte mit Daten bestücken hatte ich die Besonderheit eines Polygons beschrieben. Dieses Vieleck hat eine Grenzlinie die einen Innenbereich und einen Außenbereich voneinander abgrenzt. Eine populäre Choroplethenkarte, die Sie sicherlich schon einmal gesehen haben, ist die Darstellung der Bevölkerungsdichte eines Gebietes auf der Erde. Ich habe hier ein Beispiel erstellt, welches genau dies tut. Ich zeige, wie Sie eine Karte, die die Bevölkerungsverteilung in Rheinland-Pfalz grafisch darstellt, erstellen können.</p>

    <div id="chapter-117" class="para_Heading_3">
      Choroplethenkarten in Leaflet
    </div>

    <p class="para_Text_body"><span id="__DdeLink__7715_1248725271">Das Schöne ist, dass wir mit Leaflet keine zusätzlichen Plugins benötigen. Leaflet ist wie dafür gemacht, GeoJSON Daten als Choroplethenkarte anzuzeigen.</span> Beginnen tun wir ganz vorne mit dem Klären der Frage: Wo bekommen Sie die Daten her?</p>

    <div id="chapter-118" class="para_Heading_4">
      Open Data
    </div>

    <p class="para_Text_body">Wenn Sie nicht selbst über Daten verfügen, können sie auf jede Menge Open Data zugreifen.</p>

    <p class="para_Quotations"><span id="__DdeLink__8538_697365185">Open Data, also offene Daten, sind Daten die von jedem ohne jegliche Einschränkungen verwendet und weitergegeben werden dürfen. </span>, also offene Daten, sind Daten die von jedem ohne jegliche Einschränkungen verwendet und weitergegeben werden dürfen. Warum gibt es Open Data? Viele Menschen vertreten die Meinung, dass frei nutzbare Daten zu mehr Transparenz und Zusammenarbeit führen. Die Bereitstellung offener Daten durch öffentliche Einrichtungen wird als eine Voraussetzung für <a class="extern" href="https://de.wikipedia.org/wiki/Open_Government">Open Government</a>, also der Öffnung von Regierung und Verwaltung gegenüber der Bevölkerung und der Wirtschaft, angesehen. Die Befürworter von Open-Data teilen somit viele Argumente mit den Befürwortern von <a class="extern" href="https://de.wikipedia.org/wiki/Open_Source">Open-Source</a>.</p>

    <p class="para_Text_body"><span id="__DdeLink__8128_1933455827">GeoJSON Utilities ist </span><a class="extern" href="http://opendatalab.de/projects/geojson-utilities/">GeoJSON Utilities</a> ist ein Projekt, welches den Export von Gemeindeflächen, Landkreisflächen und Bundeslandflächen in Deutschland im GeoJSON Format ermöglicht. Jede exportierte Fläche enthält zusätzliche Eigenschaften wie die Einwohnerzahl und Fläche in Quadratmeter. Ich habe diese Daten für Rheinland-Pfalz exportiert. Im nächsten Beispiel zeige ich Ihnen, wie Sie aus dieser GeoJSON-Datei schnell selbst Chorophletenkarten erstellt können.</p>

    <p class="para_Quotations"><a class="extern" href="http://opendatalab.de/projects/geojson-utilities/">GeoJSON Utilities</a> ist übrigens auch eine mit Leaflet erstellte Anwendung.</p>

    <p class="para_Text_body">Die GeoJSON-Datei, die ich heruntergeladen haben, ist relativ groß. Deshalb habe ich die Daten in einer separaten Datei abgelegt. Ich schlage Ihnen vor, dies auch zu tun. So bleibt Ihre HTML-Datei übersichtlich und Sie können sich voll und ganz auf das Erstellen der Karte konzentrieren. Wenn Sie die Daten in einer JavaSript Datei ablegen, können Sie diese gleichzeitig als Variabel deklarieren. Wie das geht, zeigt ihnen das nachfolgende Codebeispiel. Zunächst sehen Sie die Datei, die die GeoJSON Daten enthält. Dieser Datei habe ich den Namen gemeinden.js gegeben.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">var ct =</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"type":"FeatureCollection",</p>

    <p class="para_Quelltext">"crs":{</p>

    <p class="para_Quelltext">"type":"name",</p>

    <p class="para_Quelltext">"properties":{"name":"urn:ogc:def:crs:OGC:1.3:CRS84"}},</p>

    <p class="para_Quelltext">"source":"© GeoBasis-DE / BKG 2013 (Daten verändert)",</p>

    <p class="para_Quelltext">"features":[</p>

    <p class="para_Quelltext">{"type":"Feature",</p>

    <p class="para_Quelltext">"properties":</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">"ADE":6,</p>

    <p class="para_Quelltext">"GF":4,</p>

    <p class="para_Quelltext">"BSG":1,</p>

    <p class="para_Quelltext">"RS":"073345001001",</p>

    <p class="para_Quelltext">"AGS":"07334001","SDV_RS":"073345001001",</p>

    <p class="para_Quelltext">"GEN":"Bellheim",</p>

    <p class="para_Quelltext">"BEZ":"Gemeinde","IBZ":64,"BEM":"gemeinschaftsangehörig","NBD":"ja",</p>

    <p class="para_Quelltext">"SN_L":"07","SN_R":"3","SN_K":"34","SN_V1":"50","SN_V2":"01","SN_G":"001",</p>

    <p class="para_Quelltext">"FK_S3":"K","NUTS":"DEB3E","RS_0":"073345001001","AGS_0":"07334001",</p>

    <p class="para_Quelltext">"WSK":"2009/01/01","DEBKG_ID":"DEBKGDL20000E5ZS",</p>

    <p class="para_Quelltext">"destatis":{"RS":"073345001001","area":20.44,"area_date":"31.12.2014","population":8519,"population_m":4198,"population_w":4321,"population_density":417,"zip":"76756","center_lon":"8,284042","center_lat":"49,190542","travel_key":"J16","travel_desc":"Pfalz","density_key":"02","density_desc":"mittlere Besiedlungsdichte"},</p>

    <p class="para_Quelltext">"wikipedia":{"cid":"http://www.wikidata.org/entity/Q552382","name":"Bellheim","AGS":"07334001","_official_website":"http://www.bellheim.de/","_local_dialing_code":"07272","_postal_code":"76756"}},</p>

    <p class="para_Quelltext">"geometry":{"type":"Polygon","coordinates":[[[8.276302148832034,49.21145214735215],[8.295112386392997,49.21205183793759],</p>

    <p class="para_Quelltext">…</p>

    <p class="para_Quelltext">[8.259740044810764,49.21103338616947],[8.276302148832034,49.21145214735215]]]}},</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">{"type":"Feature",</p>

    <p class="para_Quelltext">"properties":{"ADE":6,"GF":4,"BSG":1,"RS":"073405003205","AGS":"07340205","SDV_RS":"073405003205","GEN":"Bottenbach","BEZ":"Gemeinde","IBZ":64</p>

    <p class="para_Quelltext">...</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quotations">In den Properties der einzelnen GeoJSON Features sind unter anderem der Regionalschlüssel (RS), der geographische Name (GEN), die amtliche Bezeichnung der Verwaltungseinheit (BEZ) und die Destatis-Daten – insbesondere Fläche in Quadratmetern und Einwohnerzahlen – enthalten</p>

    <p class="para_Text_body">Das Beispiel zeigt nur einen Ausschnitt der Datei gemeinden.js. Beachten Sie, dass es sich nicht um reines GeoJSON handelt. Ganz genau handelt es sich um JavaScript. Dieser JavaScript Code deklariert eine Variable, nämlich die Variable ct. Einbinden können Sie den JavaScript-Ausschnitt genau wie jedes andere Skript in Ihre HTML-Datei mit der Zeile</p>

    <p class="para_Text_body">&lt;script src="gemeinden.js"&gt;&lt;/script&gt;</p>

    <p class="para_Text_body">Wenn die Datei richtig eingebunden ist, können Sie auf die Daten in der Datei ab nun in der Variablen ct zugreifen.</p>

    <div id="chapter-119" class="para_Heading_4">
      Farben
    </div>

    <p class="para_Text_body">Der nächste Schritt zum Fertigstellen der Choroplethenkarte ist die Farbauswahl. Beim Erstellen der Heatmaps im vorhergehenden Kapitel haben wir nur Farben übergeben und das jeweilige Plugin hat diese entsprechend zugewiesen. Beim Erstellen der Choroplethenkarte nutzen wir kein Plugin. Deshalb müssen wir uns selbst um diese Aufgabe kümmern. Deshalb definieren wir eine Funktion, die je nach Wert eine bestimmte Farbe errechnet und zurück gibt. Idealerweise kennen Sie den höchsten Wert und den niedrigsten Wert in der möglichen Datenmenge. Nun können Sie, je nach Verteilung der Werte bestimmten Wertbereichen eine Farbe zuordnen.</p>

    <p class="para_Text_body">Der nachfolgende Programmcodeausschnitt nimmt einen Parameter entgegen und berechnet anhand des Wertes dieses Parameters eine Farbe. Die Formel in der Funktion ist so definiert, dass höhere Werte dunklere Farben und niedrigere Werte hellere Farben als Ergebnis ausgeben.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">function color(x) {</p>

    <p class="para_Quelltext">return x &gt; 1000 ? '#990000' :</p>

    <p class="para_Quelltext">x &gt; 750 ? '#d7301f' :</p>

    <p class="para_Quelltext">x &gt; 500 ? '#ef6548' :</p>

    <p class="para_Quelltext">x &gt; 250 ? '#fc8d59' :</p>

    <p class="para_Quelltext">x &gt; 200 ? '#fdbb84' :</p>

    <p class="para_Quelltext">x &gt; 100 ? '#fdd49e' :</p>

    <p class="para_Quelltext">x &gt; 0 ? '#fee8c8' :'#fff7ec';</p>

    <p class="para_Quelltext">}</p>

    <div id="chapter-120" class="para_Heading_4">
      Stile
    </div>

    <p class="para_Text_body">Als Nächstes benötigen wir eine Funktion, die das Zuweisen des passenden CSS Stylesheets zu den Daten übernimmt. Nur so können wir jedes Feature individuell ansehen und ihm den passenden Stil zuweisen. Im nachfolgenden Programmcodeausschnitt sehen Sie eine Funktion, die als Parameter ein Feature erwartet. Je nach Eigenschaft im Feature gibt die Funktion die passenden Optionen zurück. Sie erkennen sicherlich sofort, dass die wesentliche Option die mit dem Namen fillColor ist. Hier ist genau die Stelle, an der wir die eben erstellte Funktion color() aufrufen und dieser als Parameter den Wert feature.properties.destatis.population, also die Bevölkerungsanzahl, mitgeben.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">function myStyle(feature) {</p>

    <p class="para_Quelltext">return {</p>

    <p class="para_Quelltext">fillColor: color(<span id="__DdeLink__8300_1933455827">feature.properties.destatis.population</span>),</p>

    <p class="para_Quelltext">weight: 1,</p>

    <p class="para_Quelltext">opacity: 1,</p>

    <p class="para_Quelltext">color: 'white',</p>

    <p class="para_Quelltext">fillOpacity: 0.85</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Text_body"><br/><br/></p>

    <div id="chapter-121" class="para_Heading_4">
      Das vollständige Beispiel
    </div>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="gemeinden.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([49.9555 , 7.591838], 8);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">function color(x) {</p>

    <p class="para_Quelltext">return x &gt; 1000 ? '#990000' :</p>

    <p class="para_Quelltext">x &gt; 750 ? '#d7301f' :</p>

    <p class="para_Quelltext">x &gt; 500 ? '#ef6548' :</p>

    <p class="para_Quelltext">x &gt; 250 ? '#fc8d59' :</p>

    <p class="para_Quelltext">x &gt; 200 ? '#fdbb84' :</p>

    <p class="para_Quelltext">x &gt; 100 ? '#fdd49e' :</p>

    <p class="para_Quelltext">x &gt; 0 ? '#fee8c8' :'#fff7ec';</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">function myStyle(feature) {</p>

    <p class="para_Quelltext">return {</p>

    <p class="para_Quelltext">fillColor: color(feature.properties.destatis.population),</p>

    <p class="para_Quelltext">weight: 1,</p>

    <p class="para_Quelltext">opacity: 1,</p>

    <p class="para_Quelltext">color: 'white',</p>

    <p class="para_Quelltext">fillOpacity: 0.85</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">var geoJsonLayer = L.geoJson(ct, {style: myStyle}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_957.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">In Ihrem Browser sollte die Karte nun so aussehen, wie in der nächsten Abbildung dargestellt ist.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/947.png" alt=" Abbildung 43"/>

      <figcaption class="para_Illustration">Abbildung 43</figcaption>
    </figure>

    <p class="para_Text_body">947.png</p>

    <p class="para_Text_body">In diesem Beispiel haben wir einen festen Wert ganz unabhängig von anderen Werten verwendet. Wir haben die Bevölkerungszahl unabhängig von der Flächengröße der Gemeinde als Wert für die Farbe verwendet. In dieser Karte können wir zwar ablesen, wo die Gemeinden mit hoher Bevölkerungszahl sich befinden und wo die Gemeinden mit niedriger Bevölkerungsanzahl sind. Wie dicht die Besiedelung ist, sagt diese Karte aber noch nicht aus. Hierzu müssten wir die Bevölkerungszahl noch relativ zur Fläche der Gemeinde setzten. Dies tun wir nun im nächsten Beispiel.</p>

    <div id="chapter-122" class="para_Heading_3">
      Normalisierte Choroplethenkarten
    </div>

    <p class="para_Text_body">Es kommt sicherlich sehr oft vor, dass Sie mit einer Choroplethenkarten nicht nur einen absoluten Wert darstellen möchten. Oft möchten Sie die Daten zu anderen Daten ins Verhältnis stellen. Zum Beispiel könnten Sie den Anteil von Menschen die älter als 60 Jahre sind darstellen wollen. Da Geodaten einen Bezug zu einer Fläche haben, wird es meist so sein, dass Sie die Daten in Relation zu dieser Fläche visualisieren möchten – diese also normalisieren möchten.</p>

    <p class="para_Text_body">In unser GeoJSON Datei ist die Fläche der Gemeinde in der Eigenschaft area gespeichert. Wir können es uns also einfach machen und Zahl dir für die Fläche einer Gemeinde gespeichert ist, zugreifen. Um die Choroplethenkarte, die wir im vorhergehenden Kapitel erstellt haben, zu normalisieren ist somit nur ein Schritt – nämlich das Teilen der Bevölkerungsanzahl durch die Fläche des betreffenden Bereichs – erforderlich. Sehen wir uns aber das ganze Beispiel noch einmal zusammenhängend an.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="gemeinden.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;button onclick="total()"&gt;Population&lt;/button&gt;</p>

    <p class="para_Quelltext">&lt;button onclick="density()"&gt;Population/Fläche&lt;/button&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([49.9555 , 7.591838], 8);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">function color(x) {</p>

    <p class="para_Quelltext">return x &gt; 1000 ? '#990000' :</p>

    <p class="para_Quelltext">x &gt; 750 ? '#d7301f' :</p>

    <p class="para_Quelltext">x &gt; 500 ? '#ef6548' :</p>

    <p class="para_Quelltext">x &gt; 250 ? '#fc8d59' :</p>

    <p class="para_Quelltext">x &gt; 200 ? '#fdbb84' :</p>

    <p class="para_Quelltext">x &gt; 100 ? '#fdd49e' :</p>

    <p class="para_Quelltext">x &gt; 0 ? '#fee8c8' :'#fff7ec';</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">function densityColor(x) {</p>

    <p class="para_Quelltext">return x &gt; 500 ? '#990000' :</p>

    <p class="para_Quelltext">x &gt; 400 ? '#d7301f' :</p>

    <p class="para_Quelltext">x &gt; 300 ? '#ef6548' :</p>

    <p class="para_Quelltext">x &gt; 200 ? '#fc8d59' :</p>

    <p class="para_Quelltext">x &gt; 100 ? '#fdbb84' :</p>

    <p class="para_Quelltext">x &gt; 50 ? '#fdd49e' :</p>

    <p class="para_Quelltext">x &gt; 0 ? '#fee8c8' :'#fff7ec';</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">function myStyle(feature) {</p>

    <p class="para_Quelltext">return {</p>

    <p class="para_Quelltext">fillColor: color(feature.properties.destatis.population),</p>

    <p class="para_Quelltext">weight: 1,</p>

    <p class="para_Quelltext">opacity: 1,</p>

    <p class="para_Quelltext">color: 'white',</p>

    <p class="para_Quelltext">fillOpacity: 0.85</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">function myDensityStyle(feature) {</p>

    <p class="para_Quelltext">return {</p>

    <p class="para_Quelltext">fillColor: densityColor(feature.properties.destatis.population/feature.properties.destatis.area),</p>

    <p class="para_Quelltext">weight: 1,</p>

    <p class="para_Quelltext">opacity: 1,</p>

    <p class="para_Quelltext">color: 'white',</p>

    <p class="para_Quelltext">fillOpacity: 0.85</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">function total(){</p>

    <p class="para_Quelltext">var geoJsonLayer = L.geoJson(ct, {style: myStyle}).addTo(mymap);</p>

    <p class="para_Quelltext">removeLayer(densitylayer);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">function density(){</p>

    <p class="para_Quelltext">var densitylayer=L.geoJson(ct, {style: myDensityStyle}).addTo(mymap);</p>

    <p class="para_Quelltext">removeLayer(geoJsonLayer);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_956.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Das vorhergehende Codebeispiel baut dem davor erstellten Codebeispiel auf. Neben der style Methode fügen wie eine weitere Methode ein. Die Methode densityStyle gibt, wie der Name schon sagt, die Farbe für die Relative angabe zurück. Damit wir die beiden Choroplethenkarte Ebenen vergleichen können, habe ich eine Schaltfläche in das HTML Dokument integriert. Je nachdem welche Schaltfläche angeklickt wird, wird die passende Formel ausgeführt. Einmal die, die absolute Werte anzeigt, ein anderes mal die, die die relativen Werte ausgibt.</p>

    <p class="para_Text_body">Nun werden Sie feststellen, dass viele flächenmäßig große Bereiche in ländlichen Gegenden, nicht mehr dunkel eingefärbt sind. Im ersten Beispiel, in dem wir mit den absoluten Zahlen gearbeitet haben, waren diese Bereiche teilweise dunkel. Die Bevölkerungszahl ist aber in Relation zur Fläche doch nicht so hoch.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/948.png" alt=" Abbildung 44"/>

      <figcaption class="para_Illustration">Abbildung 44</figcaption>
    </figure>

    <p class="para_Text_body">948.png</p>

    <div id="chapter-123" class="para_Heading_2">
      In diesem Kapitel haben wir …
    </div>

    <p class="para_Text_body">In diesem Kapitel haben Sie alles das, was Sie in den ersten Teilen kennen gelernt haben, zum visualisieren eingesetzt. Sie haben <span id="__DdeLink__8488_697365185">Plugins kennen gelernt, die Sie beim Erstellen von Heatmaps unterstützen</span>. Sie können nun eine Heatmap erstellen, mit der interagiert werden kann und auch eine die Daten animiert anzeigt. Sie kennen <span id="__DdeLink__8492_697365185">die Besonderheiten von Choroplethenkarten und wissen, wann absolute und wann relative Werte</span>wissen, wann absolute und wann relative Werte sinnvoll sind und wie Sie die Anzeige von absoluten und relativen Werten selbst umsetzten können.</p>

    <p class="para_Text_body">Im nächsten Kapitel werden wir noch einmal den Schwerpunkt auf die individuelle Gestaltung setzten. Hier geht es um benutzerdefinierte Marker.</p>

    <div id="chapter-124" class="para_Heading_1">
      Custom Markers
    </div>

    <p class="para_Text_body">Sie wissen nun wie Sie die unterschiedlichsten Geodaten auf Ihrer Karte anzeigen können und auch wie Sie mit den Geodaten ein Thema visualisieren können.</p>

    <div id="chapter-125" class="para_Heading_2">
      In diesem Kapitel werden wir …
    </div>

    <p class="para_Text_body">In diesem Kapitel werden wir nun über die reine Anzeige hinaus noch einen Schritt weiter gehen. Nun geht es darum, der Karte eine individuelle Note zu geben. Wir sehen uns an, wie Sie Marker beliebig gestalten können. Außerdem sehen wir uns Plugins an, die Ihnen diese Arbeit erleichtert.</p>

    <div id="chapter-126" class="para_Heading_2">
      Ein individueller Marker auf Ihrer Karte
    </div>

    <p class="para_Text_body">Wenn Leaflet einen Marker auf einer Karte anzeigt, werden gleich zwei Bilddateien angezeigt. Zunächst wird das eigentliche Bild an die passende Stelle auf die Karte gelegt. Danach wird ein Schatten zu diesem Bild hinzugefügt. Mit einem passenden Schatten fallend die Marker eher ins Auge. Der Schatten verleiht einem Marker eine Tiefe. So hebt dieser sich besser von der Karte ab.</p>

    <p class="para_Text_body">Wenn Sie Leaflet auf Ihren Rechner kopiert haben, sehen Sie unter den kopierten Daten – sofort in der ersten Ebene – einen Unterordner, der images heißt. Dieser Ordner enthält die Imagedateien, die angezeigt werden, wenn kein individuelles Image angegeben ist. Ich habe die Bilder hier nachfolgend abgedruckt. Wenn Sie dieses Buch bisher durchgearbeitet haben, kommen Ihnen die Bilder sicher bekannt vor.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild53.png" alt=" Abbildung 45"/>

      <figcaption class="para_Illustration">Abbildung 45</figcaption>
    </figure>

    <p class="para_Text_body">978.png</p>

    <p class="para_Text_body">Oft ist es so, dass das Bekannte vertraut ist und man sich deshalb damit sicher und wohl fühlt. Manchmal möchte man aber aus der Reihen tanzen. Wenn Sie auf Ihrer Karte außergewöhnliche Stellen mit einem Marker markieren möchten, dann soll dieser besondere Marker sicher aus der Reihe tanzen, oder? Wenn Sie an dieser Stelle keine blaue Einheitsgrafik anzeigen möchte, dann können Sie auch Ihre eigene Grafik anzeigen. Haben Sie schon eine schöne Grafik für Ihren Marker und den passenden Schatten dazu? Wie Sie ein eigenes Image mit einem Grafikprogramm erstellen, gehört nicht zum Thema dieses Buches. Hier möchte ich Ihnen nur ein paar Punkte aufzählen, die Sie beachten sollten. Falls Sie keine Grafiken besitzen und auch nicht selbst Hand anlegen möchten, dann könne Sie entweder die Übungen wie ich mit den Beispielbildern im Leaflet Tutorial durcharbeiten – oder Sie blättern direkt weiter zum nächsten Kapitel. Dieses Kapitel bietet Ihnen einen Kompromiss. Sie benötigen keine eigenen Grafiken, können einem Marker aber trotzdem ein anderes Aussehen verleihen.</p>

    <p class="para_Quotations">Sie möchten gerne selbst die Grafiken erstellen wissen aber noch nicht genau wie und womit? Dann sehen Sie sich doch einmal <a class="extern" href="https://www.gimp.org/">GIMP</a> an. GIMP (GNU Image Manipulation Program) ist eine gute kostenlose Alternative zu <a class="extern" href="http://www.adobe.com/de/products/photoshop.html">Photoshop von Adobe</a> und kommt mit zahlreichen professionellen Bearbeitungsfunktionen.</p>

    <p class="para_Text_body">Wenn Sie zwei Bilder haben – also ein Bild, das Ihren Marker selbst darstellt und eines, das den Schatten zeigt – dann können wir diese als Marker in Ihre Karte einbinden. Ich habe hier zum Ausprobieren die Bild-Dateien aus dem Leaflet Tutorial <a class="extern" href="http://leafletjs.com/examples/custom-icons/">Markers with Custom Icons</a> verwenden.</p>

    <figure class="image_container left-align" style="width:264px;">
      <img src="../Images/945.png" alt=" Abbildung 46"/>

      <figcaption class="para_Illustration">Abbildung 46</figcaption>
    </figure>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">945.png</p>

    <p class="para_Text_body">Im nachfolgenden Beispiel habe ich den Text, der für die Anzeige des benutzerdefinierten Markers verantwortlich ist, fett formatiert.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 10);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var greenIcon = L.icon({</p>

    <p class="para_Quelltext">iconUrl: 'http://leafletjs.com/examples/custom-icons/leaf-green.png',</p>

    <p class="para_Quelltext">shadowUrl: 'http://leafletjs.com/examples/custom-icons/leaf-shadow.png',</p>

    <p class="para_Quelltext">iconSize: [38, 95],</p>

    <p class="para_Quelltext">shadowSize: [50, 64],</p>

    <p class="para_Quelltext">iconAnchor: [22, 94],</p>

    <p class="para_Quelltext">shadowAnchor: [4, 62],</p>

    <p class="para_Quelltext">popupAnchor: [-3, -76]</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext"><span id="__DdeLink__9636_298854931">L.marker([50.27264, 7.26469], {icon: greenIcon}).addTo(mymap).bindPopup("Ich bin ein Marker mit einem individuellen Image.");</span>len Image.");</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_955.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Sehen wir uns diese Codeteile einmal genau an. Zunächst einmal sticht die Instanziierung des Bildes hervor.</p>

    <p class="para_Text_body"><br/>var greenIcon = L.icon({<br/>iconUrl: '<a class="extern" href="http://leafletjs.com/examples/custom-icons/leaf-green.png">http://leafletjs.com/examples/custom-icons/leaf-green.png</a>',<br/>shadowUrl: '<a class="extern" href="http://leafletjs.com/examples/custom-icons/leaf-shadow.png">http://leafletjs.com/examples/custom-icons/leaf-shadow.png</a>',<br/>iconSize: [38, 95],<br/>shadowSize: [50, 64],<br/>iconAnchor: [22, 94],<br/>shadowAnchor: [4, 62],<br/>popupAnchor: [-3, -76]<br/>});<br/></p>

    <p class="para_Text_body">Die Bedeutung der einzelnen Optionen habe ich in der nachfolgenden Abbildung veranschaulicht. Die Schwierigkeit liegt darin, die Position des Icons mit der Stelle auf der Erde, die markiert werden soll, zu harmonisieren. Das Bild ist in der Regel größer als der Punkt, der mit ihm beschrieben werden soll. So können Sie mit der Option iconSize: [38, 95] die Größe des Bildes mitgeben. Mit der Option shadowSize: [50, 64] können Sie die Größe des Schattens beeinflussen. Wenn Sie die Werte nicht setzten, wird die Originalgröße verwendet. Die Option iconAnchor: [22, 94] gibt Ihnen nun die Möglichkeit, die Stelle an der das Bild in die Karte eingefügt werden soll, zu definieren. Ohne ein Setzen diese Option, würde die linke obere Ecke des Bildes an der Stelle, die markiert werden soll, beginnen. In der Regel ist es aber so, dass man das Bild mittig oder vielleicht sogar über dieser Stelle einfügen möchte. IconAnchor: [22, 94] fügt das Bild 22 Pixel weiter links und 94 Pixel oberhalb der zu markierenden Stelle ein. Wenn Sie sich die nachfolgenden Abbildung ansehen, wird dies klar. Der rote Punkt stellt in der Abbildung die zu markierende Stelle dar. Für die Option shadowAnchor: [4, 62] gilt das gleiche wie für iconAnchor. Die Belegung der Wert in der Option popupAnchor: [-3, -76] ist meiner Meinung nach etwas verwirrend. Hier müssen Sie ein Minuszeichen voran stellen, wenn Sie das Fenster nach links oben, relativ zur zu markierenden Position, verschoben öffnen möchten.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/928.png" alt=" Abbildung 47"/>

      <figcaption class="para_Illustration">Abbildung 47</figcaption>
    </figure>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Im Kapitel Die Karte mit Daten bestücken genau im Unterkapitel genau im Unterkapitel Punkte und Marker haben wir schon Marker mit Optionen angelegt. Im nächsten Codeschnipsel sehen Sie nun, dass Sie auch das Bild zum Marker – also das Icon – als Option angeben können. Im Programmcode geben Sie dazu einfach den Namen des eben erstellen L.Icon Objektes an.</p>

    <p class="para_Text_body"><br/>L.marker([50.27264, 7.26469], {icon: greenIcon}).addTo(mymap).bindPopup("Ich bin ein Marker mit einem individuellen Image");<br/></p>

    <p class="para_Text_body">Wenn Sie das vorhergehenden Programmcode angezeigte HTML Dokument öffnen, sehen Sie eine Karte auf der das grüne Icon als Marker an der festgelegten Koordinate – passend positioniert – erscheint.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild54.png" alt=" Abbildung 48"/>

      <figcaption class="para_Illustration">Abbildung 48</figcaption>
    </figure>

    <p class="para_Text_body">977.png</p>

    <div id="chapter-127" class="para_Heading_3">
      Eigenschaften eines individuellen Marker
    </div>

    <p class="para_Text_body">Einen eigenes Marker Bild erstellen Sie in Leaflet mithilfe der Kasse <a class="extern" href="http://leafletjs.com/reference-1.1.0.html#icon">L.icon</a>. Das haben Sie eben praktisch gesehen. Diese Klasse bietet Ihnen zehn Optionen.</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">iconUrl:<br/>Die iconUrl müssen Sie auf alle Fälle angeben. Die IconUrl muss die Adresse zur Bilddatei enthalten – absolut oder relativ zu Ihrem Skript-Pfad.</p></li>

      <li><p class="para_Text_body">iconRetinaUrl:<br/>Die iconRetinaUrl bietet Ihnen optional die Möglichkeit die Adresse einer für Retina Bildschirme optimierten Version des Bildes – absolut oder relativ zum Skript-Pfad – anzugeben.</p></li>

      <li><p class="para_Text_body">iconSize:<br/>Die iconSize beeinflusst die Größe in der das Bild angezeigt wirde.</p></li>

      <li><p class="para_Text_body">IconAnchor:<br/>Die Pixel Koordinaten an der das Bild eingefügt werden soll – relativ zu oberen linken Ecke.</p></li>

      <li><p class="para_Text_body">PopupAnchor:<br/>Die Pixel Koordinaten des Punktes, von dem , relativ zum Symbol Anker.</p></li>

      <li><p class="para_Text_body">ShadowUrl:<br/>Diese Option enthält die Adresse zur Imagedatei, die den Schatten darstellen soll. Wenn nichts angegeben ist, wir kein Schattenbild erstellt.</p></li>

      <li><p class="para_Text_body">ShadowRetinaUrl:<br/>Mit dieser Option können Sie ein Bild angeben, dass speziell für Retina Displays optimiert wurde.</p></li>

      <li><p class="para_Text_body">shadowSize:<br/>Die Höhe und Breite des Bildes, dass den Schatten darstellen soll in Pixeln.</p></li>

      <li><p class="para_Text_body">shadowAnchor:<br/>Die Pixel Koordinaten an der das Schattenbild eingefügt werden soll, können Sie mit ShadowAnchor übergeben. Ansonsten gilt für diese Option das Gleiche, was ich bei der Option iconAnchor geschrieben habe.</p></li>

      <li><p class="para_Text_body">className:<br/>Mit der Option className können Sie den Namen einer CSS-Klasse, die beiden Bildern, also dem Schattenbild und dem eigentlichen Marker Bild hinzugefügt wird, definieren.</p></li>
    </ul>

    <p class="para_Quotations">Exkurs:<br/>Die neuen, hochauflösenden Displays haben eine höhere Pixeldichte als gewöhnliche Monitore. Auf der gleichen Fläche werden etwa viermal so viele Pixel dargestellt. Der Vorteil dieser Technologie liegt darin, dass die Pixel nun so klein sind, dass das menschliche Auge sie nicht mehr auflösen kann. Das Ergebnis sind sehr scharfe Grafiken und Texte. Damit das Bild nun auf einem HiDPI (High Dots Per Inch) Bildschirm, also einem Retina Display, scharf dargestellt wird, muss es mit mindestens 2-facher Breite und Höhe zur Verfügung gestellt werden. Eine Pixelgrafik die bei gewöhnlicher Auflösung das ganze Display ausfüllt, würde eigentlich auf einem Retina Display der gleichen Größe nur ein Viertel des Displays einnehmen. Ein Pixel der Grafik entspricht ja auch auf dem Retina-Display einem Pixel, nur das viermal so viele und dafür kleinere Pixel abgebildet werden. Damit die Pixelgrafiken nicht plötzlich alle zu klein dargestellt werden, rechnen die Geräte die Grafiken selbstständig um. Dadurch geht allerdings Qualität verloren. Pixelgrafiken sehen auf dem Retina-Display daher unscharf aus. Um dieses Problem zu umgehen, prüft Leaflet die Auflösung des Anzeigegerätes. Anschließend werden die Marker Bilder – sofern vorhanden – in hoher Auflösung angezeigt.</p>

    <div id="chapter-128" class="para_Heading_3">
      Die Klasse L.Icon erweitern
    </div>

    <p class="para_Text_body">So, nun haben Sie einen benutzerdefinierten Marker erstellt und möchten weitere Marker kreiere. Schön, dass Leaflet objektorientiertes Arbeiten unterstützt. So können Sie sich das Erstellen von neuen Marker Objekten sehr einfach machen. Erweitern Sie einfach die Klasse L.Icon und geben alle gemeinsamen Eigenschaften einmal an. Nur die besonderen Eigenschaften des Markers müssen Sie separat angeben. Das nachfolgende Codebeispiel zeigt Ihnen, wie Sie drei unterschiedliche Marker, die aber gemeinsamen Eigenschaften haben, mithilfe von einer Eltern-Klasse erstellen können. So können die drei Marker von dem Elternteil die gemeinsamen Eigenschaften erben.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 9);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var LeafIcon = L.Icon.extend({</p>

    <p class="para_Quelltext">options: {</p>

    <p class="para_Quelltext">shadowUrl: 'leaf-shadow.png',</p>

    <p class="para_Quelltext">iconSize: [38, 95],</p>

    <p class="para_Quelltext">shadowSize: [50, 64],</p>

    <p class="para_Quelltext">iconAnchor: [22, 94],</p>

    <p class="para_Quelltext">shadowAnchor: [4, 62],</p>

    <p class="para_Quelltext">popupAnchor: [-3, -76]</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">var greenIcon = new LeafIcon({iconUrl: 'http://leafletjs.com/examples/custom-icons/leaf-green.png'});</p>

    <p class="para_Quelltext">var redIcon = new LeafIcon({iconUrl: 'http://leafletjs.com/examples/custom-icons/leaf-red.png'});</p>

    <p class="para_Quelltext">var orangeIcon = new LeafIcon({iconUrl: 'http://leafletjs.com/examples/custom-icons/leaf-orange.png'});</p>

    <p class="para_Quelltext">L.marker([50.27264, 7.26469], {icon: greenIcon}).addTo(mymap).bindPopup("Ich bin ein grüner Marker.");</p>

    <p class="para_Quelltext">L.marker([50.27264, 6.26469], {icon: redIcon}).addTo(mymap).bindPopup("Ich bin ein roter Marker.");</p>

    <p class="para_Quelltext">L.marker([50.27264, 8.26469], {icon: orangeIcon}).addTo(mymap).bindPopup("Ich bin ein oranger Marker.");</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_954.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Dieser Programmcodeabschnitt hat Ähnlichkeit mit dem im vorherigen Beispiel. Wenn Sie genau hinsehen, finden Sie aber Unterschiede. Wir erstellen im ersten Schritt kein neues Icon Objekt, sondern erweitern die Klasse L:Icon. Mit der Klasse LeafIcon. Wir packen die Optionen in ein Objekt und legen nur die gemeinsamen Optionen fest. Die URL des Bildes ist die Option, die von Marker zu Marker unterschiedlich ist. Deshalb geben wir diese beim Erweitern der Klasse in den Optionen noch nicht an.</p>

    <p class="para_Text_body"><br/>var LeafIcon = L.Icon.extend({<br/>options: {<br/>shadowUrl: 'leaf-shadow.png',<br/>iconSize: [38, 95],<br/>shadowSize: [50, 64],<br/>iconAnchor: [22, 94],<br/>shadowAnchor: [4, 62],<br/>popupAnchor: [-3, -76]<br/>}<br/>});</p>

    <p class="para_Text_body"><br/>Im zweiten Schritt erstellen wir drei Instanzen des LeafIcon, also des erweiterten L.Icon</p>

    <p class="para_Text_body"><br/>var greenIcon = new LeafIcon({iconUrl: '<a class="extern" href="http://leafletjs.com/examples/custom-icons/leaf-green.png">http://leafletjs.com/examples/custom-icons/leaf-green.png</a>'});<br/>var redIcon = new LeafIcon({iconUrl: '<a class="extern" href="http://leafletjs.com/examples/custom-icons/leaf-red.png">http://leafletjs.com/examples/custom-icons/leaf-red.png</a>'});<br/>var orangeIcon = new LeafIcon({iconUrl: '<a class="extern" href="http://leafletjs.com/examples/custom-icons/leaf-orange.png">http://leafletjs.com/examples/custom-icons/leaf-orange.png</a>'});<br/></p>

    <p class="para_Text_body">Und zu guter Letzt fügen wir die Marker mit dem zugehörigen Icon an die passende Stelle auf der Karte zum Kartenobjekt hinzu.</p>

    <p class="para_Text_body"><br/>L.marker([50.27264, 7.26469], {icon: greenIcon}).addTo(mymap).bindPopup("Ich bin ein grüner Marker.");<br/>L.marker([50.27264, 6.26469], {icon: redIcon}).addTo(mymap).bindPopup("Ich bin ein roter Marker.");<br/>L.marker([50.27264, 8.26469], {icon: orangeIcon}).addTo(mymap).bindPopup("Ich bin ein oranger Marker.");<br/></p>

    <p class="para_Quotations">Exkurs:<br/>Sie haben vielleicht bemerkt, dass wir das Schlüsselwort new für die Erstellung von LeafIcon Instanzen verwendet haben. Warum haben wir vorher alle Leaflet-Klassen ohne new erstellt? Die Antwort ist einfach: Die echten Leaflet Klassen sind mit einem Großbuchstaben – beispielsweise L.Icon – benannt und diese müssen mit new erstellt werden. Es gibt aber Shortcuts mit Kleinbuchstaben – L.icon – die aus Bequemlichkeitsgründen von den Leaflet-Programmierern für Sie erstellt wurden:<br/><br/><span id="__DdeLink__9799_298854931">L.icon</span> = function icon(options) {<br/>return new L.Icon(options);<br/>}; <br/><br/>Die Funktion L.icon können Sie sich auf Github in der Datei <a class="extern" href="https://github.com/Leaflet/Leaflet/blob/master/src/layer/marker/Icon.js#L145">icon.js</a> ansehen.<br/><br/>Leaflet setzt hier das Entwurfsmuster <a class="extern" href="https://de.wikipedia.org/wiki/Fabrikmethode">Fabrikmethode</a> (englisch factory method) ein. Das Muster beschreibt, wie ein Objekt durch Aufruf einer Methode anstatt durch direkten Aufruf eines Konstruktors erzeugt wird.</p>

    <p class="para_Text_body">Im nachfolgenden Bild sehen Sie das Ergebnis. Jeder Marker wird nun mit einem individuellen Icon erstellt. Die meisten Optionen sind gleich – allerdings hat jeder Marker seine eigene Farbe.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild55.png" alt=" Abbildung 49"/>

      <figcaption class="para_Illustration">Abbildung 49</figcaption>
    </figure>

    <p class="para_Text_body">976.png</p>

    <div id="chapter-129" class="para_Heading_2">
      Ein Marker Plugin
    </div>

    <p class="para_Text_body">Sie wissen nun, wie Sie einen Marker mit einem standardisierten Aussehen einfügen und können einen Marker mit einem eigenen Image belegen. Leider haben Sie aber kein eigenes Image und haben auch nicht viel Erfahrung mit einem Grafikprogramm. Sie können kein professionell aussehendes individuelles Image hervor zaubern oder haben einfach nicht die Zeit dazu. Trotzdem möchten Sie Ihrer Karte ein besonderes Aussehen verleihen. In diesem Fall bietet Ihnen dieses Kapitel eine Lösung. Ich stelle Ihnen zwei Plugins vor, die Sie bei der Erstellung von individuellen Marker Objekten unterstützen.</p>

    <div id="chapter-130" class="para_Heading_3">
      BeautifyIcon
    </div>

    <p class="para_Text_body"><a class="extern" href="https://github.com/marslan390/BeautifyMarker">Leaflet.BeautifyIcon</a>, ist ein einfaches Plugin, das bunte Marker ganz ohne eigene Grafik zu Leaflet hinzufügt. Trotzdem behalten Sie die volle Kontrolle über den Marker Stil. Konkret heißt das: Sie können über unbegrenzte Farben und viele Eigenschaften verfügen. Das Plugin Leaflet.BeautifyIcon bietet auch die Möglichkeit, Schriftart und Glyphen, also die grafische Darstellung von Schriftzeichen, anzupassen.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body"><br/><br/></p>

    <figure class="image_container left-align" style="width:601px;">
      <img src="../Images/974.png" alt=" Abbildung 50"/>

      <figcaption class="para_Illustration">Abbildung 50</figcaption>
    </figure>

    <p class="para_Text_body">974.png</p>

    <p class="para_Text_body">Damit Sie sich dieses besser vorstellen können, habe ich ein Beispiel erstellt.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css"&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="leaflet-beautify-marker-icon.css"&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-beautify-marker-icon.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 8);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">L.marker([50.27264, 7.26469], {</p>

    <p class="para_Quelltext">icon: L.BeautifyIcon.icon(</p>

    <p class="para_Quelltext">{iconSize: [50, 50]}</p>

    <p class="para_Quelltext">),</p>

    <p class="para_Quelltext">draggable: true</p>

    <p class="para_Quelltext">}).addTo(mymap).bindPopup("Ich bin ein beautify Marker");</p>

    <p class="para_Quelltext">options = {</p>

    <p class="para_Quelltext">icon: 'spinner',</p>

    <p class="para_Quelltext">spin: 'true',</p>

    <p class="para_Quelltext">borderColor: '#8A90B4',</p>

    <p class="para_Quelltext">textColor: 'white',</p>

    <p class="para_Quelltext">backgroundColor: '#8A90B4'</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">L.marker([50.27264, 6.26469], {</p>

    <p class="para_Quelltext">icon: L.BeautifyIcon.icon(options),</p>

    <p class="para_Quelltext">draggable: true</p>

    <p class="para_Quelltext">}).addTo(mymap).bindPopup("Ich bin ein beautify Marker");</p>

    <p class="para_Quelltext">options = {</p>

    <p class="para_Quelltext">icon: 'plane',</p>

    <p class="para_Quelltext">iconShape: 'marker',</p>

    <p class="para_Quelltext">borderColor: '#8D208B',</p>

    <p class="para_Quelltext">textColor: '#8D208B',</p>

    <p class="para_Quelltext">backgroundColor: 'transparent'</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">L.marker([50.27264, 8.26469], {</p>

    <p class="para_Quelltext">icon: L.BeautifyIcon.icon(options),</p>

    <p class="para_Quelltext">draggable: true</p>

    <p class="para_Quelltext">}).addTo(mymap).bindPopup("Ich bin ein beautify Marker");</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_953.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was müssen Sie tun, wenn Sie das Plugin Leaflet.BeautifyIcon verwenden möchten? Zunächst einmal müssen Sie die notwendigen Skripte und Stylesheet Dateien einbinden. Das ist zum einen das Skript und die CSS-Datei zum Plugin selbst. Zum anderen können Sie über Leaflet.BeautifyIcon Drittdienste nutzen. Sie können Font Awesome CSS und Bootstrap CSS einbinden. Ich habe im Beispiel die CSS-Dateien von Font Awesome und von Boostrap eingebunden, um Ihnen dies zu demonstrieren. Für dieses Beispiel wäre nur die CSS-Datei von Font Awesome CSS notwendig gewesen.</p>

    <p class="para_Text_body">Mehr müssen Sie nicht tun. Sie können sofort einen Marker mit der Option icon: L.BeautifyIcon.icon(options) kreieren.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">L.marker([50.27264, 8.26469], {</p>

    <p class="para_Text_body">icon: L.BeautifyIcon.icon(options),</p>

    <p class="para_Text_body">draggable: true</p>

    <p class="para_Text_body">}).addTo(mymap).bindPopup("Ich bin ein beautify Marker");</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Sehen Sie sich die Optionen des Plugin Leaflet.BeautifyIcon an. Es macht Spaß diese zu erkunden. Wie die Optionen wirken, die ich verwendet haben, können Sie sich im nächsten Bild teilweise ansehen. Das sich eines der Icons dreht, erkennen Sie nur, wenn Sie die Datei selbst im Browser öffne.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/975.png" alt=" Abbildung 51"/>

      <figcaption class="para_Illustration">Abbildung 51</figcaption>
    </figure>

    <p class="para_Text_body">975.png</p>

    <p class="para_Quotations">Ich hatte Ihnen ja schon geschrieben, dass es jede Menge Plugins für Leaflet gibt und dies gilt für den Bereich Marker besonders. Die meisten sind auf der Website von Leaflet aufgelistet. Diese Liste finden Sie unter der Adresse <a class="extern" href="http://leafletjs.com/plugins.html#markers--renderers">http://leafletjs.com/plugins.html#markers—renderers</a>.</p>

    <div id="chapter-131" class="para_Heading_2">
      Cluster
    </div>

    <p class="para_Text_body">Je nachdem welche Informationen Sie mit Ihrer Karte weitergeben möchten, kann es vorkommen, dass Sie sehr viele Marker benötigen. Wenn Sie mit vielen Marker Objekten arbeiten, sollten Sie beachten, dass diese das Laden der Karte verlangsamen. Außerdem kann es vorkommen, dass Marker nahe nebeneinander liegen und sich beim Zoomen überschneiden. Dies ist nicht benutzerfreundlich. Schön wäre es, wenn bei einer vergrößerten Ansicht alle Marker zu sehen sind – diese aber beim Hineinzoomen in die Karte zu Clustern zusammengefasst werden. So hat der Benutzer alle Informationen passend zur Kartenanzeige.</p>

    <p class="para_Text_body">In diesem Kapitel erfahren Sie, wie Sie das Plugin <a class="extern" href="https://github.com/Leaflet/Leaflet.markercluster">Leaflet.markercluster</a> zum Clustern von Marker Objekten verwenden und so eine große Anzahl von Marker Objekten auf einer Karte benutzerfreundlich und übersichtlich darstellen können. Sehen Sie sich das nachfolgende Beispiel an, um zu verstehen, wie das Clustern von Marker Objekten funktioniert.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="MarkerCluster.css"/&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="MarkerCluster.Default.css"/&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet.markercluster-src.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="points.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.219264, 7.19469], 13);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var markers = L.markerClusterGroup(</p>

    <p class="para_Quelltext">//{showCoverageOnHover : false}</p>

    <p class="para_Quelltext">);</p>

    <p class="para_Quelltext">for (var i = 0; i &lt; points.length; i++) {</p>

    <p class="para_Quelltext">var a = points[i];</p>

    <p class="para_Quelltext">var title = a[2];</p>

    <p class="para_Quelltext">var marker = L.marker(new L.LatLng(a[0], a[1]), { title: title });</p>

    <p class="para_Quelltext">marker.bindPopup(title);</p>

    <p class="para_Quelltext">markers.addLayer(marker);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">mymap.addLayer(markers);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_952.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">todo Points anzeigen.</p>

    <p class="para_Text_body">Das haben wir gemacht</p>

    <p class="para_Text_body">So wie in der nachfolgenden Abbildung zu sehen ist könnte Ihre Karte aussehen.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/973.png" alt=" Abbildung 52"/>

      <figcaption class="para_Illustration">Abbildung 52</figcaption>
    </figure>

    <p class="para_Text_body">973.png</p>

    <div id="chapter-132" class="para_Heading_3">
      Optionen, Methoden und Ereignisse
    </div>

    <p class="para_Text_body">Todo</p>

    <div id="chapter-133" class="para_Heading_4">
      Optionen
    </div>

    <p class="para_Text_body">Die folgenden Optionen sind standardmäßig aktiviert.</p>

    <div id="chapter-134" class="para_Heading_5">
      Standardmäßig aktiviert (boolesche Optionen)
    </div>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">ShowCoverageOnHover:<br/>Wenn Sie die Maus über einen Cluster bewegen, blendet sich ein Polygon ein, dass die Grenzen des Bereichs in dem die Marker sich befinden, anzeigt.</p></li>

      <li><p class="para_Text_body">ZoomToBoundsOnClick:<br/>Wenn du auf einen Cluster klickst, zoomen wir auf seine Grenzen.</p></li>

      <li><p class="para_Text_body">SpiderfyOnMaxZoom:<br/>Wenn du auf einen Cluster an der unteren Zoomstufe klickst, spiderfy es so, dass du alle seine Marker sehen kannst. (Hinweis: Die Spiderfy tritt bei der aktuellen Zoom-Ebene auf, wenn alle Elemente innerhalb des Clusters noch bei der maximalen Zoomstufe gruppiert sind oder mit dem Zoom, der durch die Option disableClusteringAtZoom angegeben wird).</p></li>

      <li><p class="para_Text_body">RemoveOutsideVisibleBounds: Cluster und Marker, die zu weit vom Viewport entfernt sind, werden für die Performance aus der Karte entfernt.</p></li>

      <li><p class="para_Text_body">Animieren: Glatte Split / Merge Cluster Kinder beim Zoomen und Spinnenfliegen. Wenn L.DomUtil.TRANSITION falsch ist, hat diese Option keine Wirkung (keine Animation ist möglich).</p></li>
    </ul>

    <p class="para_Text_body">Zusätulich können Sie noch die nachfolgenden Optionen verwenden.</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">AnimateAddingMarkers:<br/>Wenn auf true gesetzt (und animierte Option ist auch wahr), dann Hinzufügen einzelner Marker zur MarkerClusterGroup, nachdem sie der Karte hinzugefügt wurde, wird die Markierung hinzugefügt und sie in den Cluster animieren. Defaults auf false, da dies eine bessere Leistung bei der Markteinführung von Markierungen ergibt. AddLayers unterstützt dies nicht, nur addLayer mit einzelnen Markern.</p></li>

      <li><p class="para_Text_body">DisableClusteringAtZoom:<br/>Wenn gesetzt, bei dieser Zoom-Ebene und unten, werden die Markierungen nicht gruppiert. Dies ist standardmäßig deaktiviert. Siehe Beispiel. Hinweis: Sie können daran interessiert sein, die Option spiderfyOnMaxZoom bei der Verwendung von disableClusteringAtZoom zu deaktivieren.</p></li>

      <li><p class="para_Text_body">MaxClusterRadius: Der maximale Radius, den ein Cluster von der zentralen Markierung (in Pixeln) abdecken wird. Default 80. Abnehmen wird mehr machen, kleinere Cluster. Sie können auch eine Funktion verwenden, die den aktuellen Kartenzoom annimmt und den maximalen Clusterradius in Pixel zurück gibt.</p></li>

      <li><p class="para_Text_body">PolygonOptions: Optionen, die beim Erstellen des L.Polygons (Punkte, Optionen) übergeben werden sollen, um die Grenzen eines Clusters anzuzeigen. Defaults leer, die Leaflet verwenden die Standard-Pfad-Optionen.</p></li>

      <li><p class="para_Text_body">SingleMarkerMode: Wenn auf true gesetzt, überschreibt das Symbol für alle hinzugefügten Marker, um sie als 1-Größen-Cluster erscheinen zu lassen. Hinweis: Die Marker werden nicht durch Clusterobjekte ersetzt, sondern nur ihr Icon wird ersetzt. Daher reagieren sie immer noch auf normale Ereignisse und die Option disableClusteringAtZoom stellt ihr vorheriges Icon nicht wieder her (siehe # 391).</p></li>

      <li><p class="para_Text_body">SpiderLegPolylineOptions: Ermöglicht es Ihnen, PolylineOptions zu spezifizieren, um Spinnenbeine zu stylen. Standardmäßig sind sie {weight: 1.5, color: '# 222', opacity: 0.5}.</p></li>

      <li><p class="para_Text_body">SpiderfyDistanceMultiplier: Erhöht von 1, um die Entfernung von der Mitte zu vergrößern, die spiderfied Marker platziert werden. Verwenden Sie, wenn Sie große Markersymbole verwenden (Standard: 1).</p></li>

      <li><p class="para_Text_body">IconCreateFunction: Funktion zum Erstellen des Cluster-Symbols. Siehe die Standardimplementierung oder das benutzerdefinierte Beispiel.</p></li>

      <li><p class="para_Text_body">ClusterPane: Kartenbereich, in dem die Cluster-Symbole hinzugefügt werden. Voreinstellung auf L.Markers Standard (aktuell 'markerPane'). Siehe das Fenster Beispiel.</p></li>
    </ul>

    <p class="para_Text_body">Auch die Verarbeitung der Marker im Layer (todo wie Layer schrieben) können Sie beeinflussen. An Chunked AddLayers Optionen stehen Ihnen die nachfolgenden zur Verfügung.</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">ChunkedLoading: Boolean, um die addLayers Verarbeitung in kleinen Intervallen zu teilen, so dass die Seite nicht einfriert.</p></li>

      <li><p class="para_Text_body">ChunkInterval: Zeitintervall (in ms), während dessen addLayers vor dem Pausieren arbeitet, um den Rest des Seitenprozesses zu lassen. Insbesondere verhindert dies, dass die Seite beim Einfügen vieler Markierungen einfriert. Standardmäßig auf 200ms.</p></li>

      <li><p class="para_Text_body">ChunkDelay: Zeitverzögerung (in ms) zwischen aufeinander folgenden Perioden der Verarbeitung für addLayers. Standard auf 50ms.</p></li>

      <li><p class="para_Text_body">ChunkProgress: Callback-Funktion, die am Ende jedes ChunkInterval aufgerufen wird. Diese wird typischerweise verwendet, um einen Fortschrittsindikator anzuzeigen.</p></li>
    </ul>

    <div id="chapter-135" class="para_Heading_4">
      Ereignissen
    </div>

    <p class="para_Text_body">Leaflet-Ereignisse wie click() und mouseover() können Sie nur mit einem Marker im Cluster verwenden. Um Ereignisse auf ein Cluster anzuwenden, fügen Sie das Wort cluster vor den Namen des Ereignisses. Beispielsweise clusterclick oder clustermouseover. (todo noch testen)</p>

    <p class="para_Quelltext">markers.on('clusterclick', function (a) {</p>

    <p class="para_Quelltext">console.log('cluster ' + a.layer.getAllChildMarkers().length);</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Text_body">Zusätzlich können Sie noch folgende Ereignisse mit einem Cluster ausführen.</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">Animation: Brände, wenn die Marker-Clustering / Unclustering-Animation abgeschlossen ist</p></li>

      <li><p class="para_Text_body">Spiderfied: Brände, wenn überlappende Marker spiderified werden (Enthält Cluster- und Markerattribute)</p></li>

      <li><p class="para_Text_body">Unspiderfied: Brände, wenn überlappende Markierungen nicht gespielt werden (Enthält Cluster- und Markerattribute)#</p></li>
    </ul>

    <p class="para_Text_body">todo</p>

    <div id="chapter-136" class="para_Heading_4">
      Methoden
    </div>

    <p class="para_Text_body">Hinzufügen und Entfernen von Markern können sie mit den Methoden addLayer() removeLayer() und clearLayers() werden unterstützt und sie sollten für die meisten Anwendungen arbeiten. (todo)</p>

    <p class="para_Text_body">Das sichtbare Elternteil einer Markierung erhalten</p>

    <p class="para_Text_body">Sie wenn Sie einen Marker in deiner MarkerClusterGroup hast und du das sichtbare Elternteil davon sehen möchtest (entweder selbst oder ein Cluster, in dem es sich befindet, ist derzeit auf der Karte sichtbar). Dies wird null zurückgeben, wenn der Marker und seine übergeordneten Cluster derzeit nicht sichtbar sind (sie sind nicht in der Nähe der sichtbaren Sicht)</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">var visibleOne = markerClusterGroup.getVisibleParent(myMarker);</p>

    <p class="para_Quelltext">console.log(visibleOne.getLatLng());</p>

    <p class="para_Text_body"><br/><br/></p>

    <div id="chapter-137" class="para_Heading_2">
      Marker animieren
    </div>

    <div id="chapter-138" class="para_Heading_3">
      Hüpfende Marker
    </div>

    <p class="para_Text_body"><a class="extern" href="https://github.com/maximeh/leaflet.bouncemarker">https://github.com/maximeh/leaflet.bouncemarker</a></p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="bouncemarker.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 12);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">L.marker([50.27264, 7.26469],</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">bounceOnAdd: true,</p>

    <p class="para_Quelltext">bounceOnAddOptions: {duration: 5000, height: 100},</p>

    <p class="para_Quelltext">bounceOnAddCallback: function() {alert("Gelandet");}</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_951.html--&gt;</p>

    <p class="para_Text_body">951.html</p>

    <p class="para_Text_body">Als Ergebnis sehen Sie einen Marker, der in die Karte spring. Nach dem der Marker gelandet ist, öffnet sich ein Pop-up-Fenster mit der Meldung: Gelandet!.</p>

    <div id="chapter-139" class="para_Heading_3">
      Animierte Marker
    </div>

    <div id="chapter-140" class="para_Heading_4">
      Ein Marker bewegt sich
    </div>

    <p class="para_Text_body"><a class="extern" href="https://github.com/openplans/Leaflet.AnimatedMarker">https://github.com/openplans/Leaflet.AnimatedMarker</a></p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="AnimatedMarker.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 9);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var line = L.polyline(</p>

    <p class="para_Quelltext">[[50.68510, 7.94136],[50.68576, 6.94149],[51.68649, 6.94165]]),</p>

    <p class="para_Quelltext">animatedMarker = L.animatedMarker(line.getLatLngs(), {</p>

    <p class="para_Quelltext">distance: 2000,</p>

    <p class="para_Quelltext">interval: 1000,</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">mymap.addLayer(animatedMarker);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_950.html--&gt;</p>

    <p class="para_Text_body">950.html</p>

    <div id="chapter-141" class="para_Heading_4">
      Einen Marker in Bewegung setzen und wieder stoppen
    </div>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="AnimatedMarker.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;button onclick="start()"&gt;Start&lt;/button&gt;</p>

    <p class="para_Quelltext">&lt;button onclick="stop()"&gt;Stop&lt;/button&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 9);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var line = L.polyline(</p>

    <p class="para_Quelltext">[[50.68510, 7.94136],[50.68510, 7.84136],[50.68510, 7.74136],[50.68510, 7.64136],</p>

    <p class="para_Quelltext">[50.68510, 7.5136],[50.68510, 7.44136],[50.68510, 7.34136],[50.68510, 7.24136]]),</p>

    <p class="para_Quelltext">animatedMarker = L.animatedMarker(line.getLatLngs(), {</p>

    <p class="para_Quelltext">autoStart: false,</p>

    <p class="para_Quelltext">distance: 200,</p>

    <p class="para_Quelltext">interval: 100</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">mymap.addLayer(animatedMarker);</p>

    <p class="para_Quelltext">function start(){animatedMarker.start();}</p>

    <p class="para_Quelltext">function stop(){animatedMarker.stop();}</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_949.html--&gt;</p>

    <p class="para_Text_body">todo mit stop start 949.html (<a class="extern" href="https://github.com/openplans/Leaflet.AnimatedMarker/issues/50">https://github.com/openplans/Leaflet.AnimatedMarker/issues/50</a>)</p>

    <p class="para_Text_body"><br/><br/></p>

    <div id="chapter-142" class="para_Heading_4">
      Plugins kombinieren
    </div>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="AnimatedMarker.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="bouncemarker.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;button onclick="start()"&gt;Start&lt;/button&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">b = new L.Marker([51.68649, 6.94165], {bounceOnAdd: true});</p>

    <p class="para_Quelltext">var line = L.polyline(</p>

    <p class="para_Quelltext">[[50.68510, 7.94136],[50.68576, 6.94149],[51.68649, 6.94165]]),</p>

    <p class="para_Quelltext">animatedMarker = L.animatedMarker(line.getLatLngs(), {</p>

    <p class="para_Quelltext">autoStart: false,</p>

    <p class="para_Quelltext">distance: 2000,</p>

    <p class="para_Quelltext">interval: 10,</p>

    <p class="para_Quelltext">onEnd: function() {</p>

    <p class="para_Quelltext">b.addTo(mymap);</p>

    <p class="para_Quelltext">b.bounce({duration: 100, height: 50});</p>

    <p class="para_Quelltext">mymap.removeLayer(animatedMarker);</p>

    <p class="para_Quelltext">setTimeout('mymap.removeLayer(b)', 900);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">mymap.addLayer(animatedMarker);</p>

    <p class="para_Quelltext">function start(){animatedMarker.start();}</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_948.html--&gt;</p>

    <p class="para_Text_body">todo 948.html bounce out Schlußfunktion</p>

    <div id="chapter-143" class="para_Heading_2">
      Leaflet Data Visualization Framework (DVF)
    </div>

    <p class="para_Text_body"><span id="__DdeLink__9158_913644400">Das primäre Ziel des Framework ist es, die Datenvisualisierung und die thematische Kartierung mit Leaflet zu vereinfachen – so dass es einfacher ist, Rohdaten in überzeugende Karten zu verwandeln.</span>Framework ist es, die Datenvisualisierung und die thematische Kartierung mit Leaflet zu vereinfachen – so dass es einfacher ist, Rohdaten in überzeugende Karten zu verwandeln.</p>

    <p class="para_Text_body">Todo <a class="extern" href="https://github.com/humangeo/leaflet-dvf">https://github.com/humangeo/leaflet-dvf</a> und https://github.com/humangeo/leaflet-dvf/wiki/1.0-Compatibility</p>

    <div id="chapter-144" class="para_Heading_3">
      Das Plugin Data Visualization Framework
    </div>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="dvf.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-dvf.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-dvf.markers.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var marker = new L.MapMarker([50.27264, 7.26469],</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">radius: 30,</p>

    <p class="para_Quelltext">fillOpacity:0.5,</p>

    <p class="para_Quelltext">fillColor:'orange',</p>

    <p class="para_Quelltext">color:'purple',</p>

    <p class="para_Quelltext">innerRadius:7,</p>

    <p class="para_Quelltext">numberOfSides:4,</p>

    <p class="para_Quelltext">rotation:10</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">mymap.addLayer(marker);</p>

    <p class="para_Quelltext">var polygonmarker = new L.RegularPolygonMarker([50.27264, 6.26469],</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">numberOfSides: 3,</p>

    <p class="para_Quelltext">rotation: 10,</p>

    <p class="para_Quelltext">radius: 10,</p>

    <p class="para_Quelltext">fillColor:'green',</p>

    <p class="para_Quelltext">fillOpacity:1,</p>

    <p class="para_Quelltext">opacity:1,</p>

    <p class="para_Quelltext">weight:1,</p>

    <p class="para_Quelltext">radius:30</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">mymap.addLayer(polygonmarker);</p>

    <p class="para_Quelltext">var star = new L.StarMarker([50.27264, 8.26469],</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">numberOfPoints:8,</p>

    <p class="para_Quelltext">opacity:1,</p>

    <p class="para_Quelltext">weight:2,</p>

    <p class="para_Quelltext">fillOpacity:0,</p>

    <p class="para_Quelltext">radius:30});</p>

    <p class="para_Quelltext">mymap.addLayer(star);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_947.html--&gt;</p>

    <p class="para_Text_body">947.html</p>

    <p class="para_Text_body">todo <a class="extern" href="https://github.com/humangeo/leaflet-dvf/wiki/6.-Markers">https://github.com/humangeo/leaflet-dvf/wiki/6.-Markers</a></p>

    <p class="para_Text_body"><br/><br/></p>

    <div id="chapter-145" class="para_Heading_3">
      Diagrammen als Marker
    </div>

    <p class="para_Text_body"><a class="extern" href="https://github.com/humangeo/leaflet-dvf/wiki/6.-Markers">https://github.com/humangeo/leaflet-dvf/wiki/6.-Markers</a> welche Marker es gibt mit bild.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="dvf.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-dvf.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-dvf.markers.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var options = {</p>

    <p class="para_Quelltext">data: {</p>

    <p class="para_Quelltext">'data1': 20,</p>

    <p class="para_Quelltext">'data2': 50,</p>

    <p class="para_Quelltext">'data3': 10,</p>

    <p class="para_Quelltext">'data4': 20</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">chartOptions: {</p>

    <p class="para_Quelltext">'data1': {</p>

    <p class="para_Quelltext">fillColor: 'blue',</p>

    <p class="para_Quelltext">minValue: 0,</p>

    <p class="para_Quelltext">maxValue: 50,</p>

    <p class="para_Quelltext">maxHeight: 30,</p>

    <p class="para_Quelltext">displayText: function (value) {</p>

    <p class="para_Quelltext">//return value.toFixed(2);</p>

    <p class="para_Quelltext">return 'Mein Text';</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">'data2': {</p>

    <p class="para_Quelltext">fillColor: 'red',</p>

    <p class="para_Quelltext">minValue: 0,</p>

    <p class="para_Quelltext">maxValue: 50,</p>

    <p class="para_Quelltext">maxHeight: 30,</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">'data3': {</p>

    <p class="para_Quelltext">fillColor: 'green',</p>

    <p class="para_Quelltext">minValue: 0,</p>

    <p class="para_Quelltext">maxValue: 50,</p>

    <p class="para_Quelltext">maxHeight: 30,</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">'data4': {</p>

    <p class="para_Quelltext">fillColor: 'yellow',</p>

    <p class="para_Quelltext">minValue: 0,</p>

    <p class="para_Quelltext">maxValue: 50,</p>

    <p class="para_Quelltext">maxHeight: 30,</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">weight: 1,</p>

    <p class="para_Quelltext">color: '#000000',</p>

    <p class="para_Quelltext">radius:30,</p>

    <p class="para_Quelltext">fillOpacity:1</p>

    <p class="para_Quelltext">};</p>

    <p class="para_Quelltext">var bar = new L.BarChartMarker([50.27264, 7.26469], options);</p>

    <p class="para_Quelltext">mymap.addLayer(bar);</p>

    <p class="para_Quelltext">var radial = new L.RadialBarChartMarker([50.27264, 8.26469], options);</p>

    <p class="para_Quelltext">mymap.addLayer(radial);</p>

    <p class="para_Quelltext">var pie= new L.PieChartMarker([50.27264, 6.26469], options);</p>

    <p class="para_Quelltext">mymap.addLayer(pie);</p>

    <p class="para_Quelltext">var cox = new L.CoxcombChartMarker([50.97264, 7.26469], options);</p>

    <p class="para_Quelltext">mymap.addLayer(cox);</p>

    <p class="para_Quelltext">var stack = new L.StackedRegularPolygonMarker([50.97264, 8.26469], options);</p>

    <p class="para_Quelltext">mymap.addLayer(stack);</p>

    <p class="para_Quelltext">var radialmeter= new L.RadialMeterMarker([50.97264, 6.26469], options);</p>

    <p class="para_Quelltext">mymap.addLayer(radialmeter);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_946.html--&gt;</p>

    <p class="para_Text_body">946.html</p>

    <p class="para_Text_body"><br/><br/></p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/972.png" alt="Bild68"/>
    </figure>

    <p class="para_Text_body">972.png</p>

    <p class="para_Text_body">todo Schluss</p>

    <p class="para_Text_body">Sie haben Ihre digitale Karte bereits im Griff. Sie können diese gestalten und Daten auf ihr visualisieren. Nun kann es sein, dass Sie selbst keine großen Datenbestände zum Anzeigen haben. Vielleicht bietet das ESRI Inc. (Environmental Systems Research Institute) Daten, die zum Thema Ihrer Website passen? Im nächsten Kapitel erfahren Sie, wie Sie Daten dieses Institutes verwenden können.</p>

    <div id="chapter-146" class="para_Heading_2">
      In diesem Kapitel haben wir …
    </div>

    <p class="para_Text_body">In diesem Kapitel haben wir der Leaflet Karte eine individuelle Note gegeben. Wir haben uns angesehen, wie Sie Marker beliebig gestalten können. Dabei haben wir einen Ausflug in die objektorientierte Programmierung gemacht. Insbesondere bei der Erstellung von vielen Marker Objekten kann man sich durch eine mögliche Vererbung viel Arbeit und viele Codezeilen sparen. Außerdem haben wir uns verschiedene Plugins angesehen – man muss ja nicht immer das Rad neu erfinden.</p>

    <div id="chapter-147" class="para_Heading_1">
      ESRI
    </div>

    <p class="para_Text_body">Wenn Sie intensiver mit digitalen Landkarten arbeiten, möchten Sie sicherlich auch einmal Daten eines Geoinformationssystems auf Ihrer Karte anzeigen.</p>

    <p class="para_Quotations">Ein <a class="extern" href="https://de.wikipedia.org/wiki/Geoinformationssystem">Geoinformationssystem</a> ist ein Informationssystem zur Erfassung, Bearbeitung, Organisation, Analyse und Präsentation von Daten, die einen Bezug zu einer Stelle auf unserer Erde haben. Zu einem Geoinformationssystem gehören dabei die notwendige Hardware, die notwendige Software, die Daten und die Anwendungen selbst.</p>

    <p class="para_Text_body">Hierbei werden Sie früher oder später über den Begriff <a class="extern" href="https://de.wikipedia.org/wiki/Shapefile">Shapefile</a> oder Shape Datei stolpern. Aber auch wenn Sie nie auf den Begriff Shape Datei stoßen werden Sie vielleicht einmal einen Webservice nutzen wollen, der Endpunkt eines ARCServers ist. Außerdem werden Sie sicher auch das ESRI Inc., also das <span id="__DdeLink__21705_1847993398">Environmental Systems Research Institute</span>, kennenlernen. <span id="__DdeLink__21529_1847993398">Dieses Institut ist ein US-amerikanischer Softwarehersteller. ESRI hat sich auf Geoinformationssysteme (GIS) spezialisiert. Das Unternehmen hat unter anderem die Anwendung ArcGIS erstellt und das Dateiformat Shapefiles eingeführt.</span><a class="extern" href="https://de.wikipedia.org/wiki/ArcGIS">ArcGIS</a> erstellt und das Dateiformat Shapefiles eingeführt.</p>

    <p class="para_Quotations">Die wesentlichen Produkte des ESRI sind Geoinformationssysteme. Die Namen der verschiedenen Geoinformationssysteme des ESRI enthalten in der Regel den Namensteil ArcGIS. Es gibt ArcGIS Anwendungen für Server und Clients.</p>

    <p class="para_Text_body">Bitte lassen Sie sich durch die vielen neuen Begriffe nicht verunsichern. Natürlich gibt es ein Leaflet Plugin, dass Ihnen beim Integrieren dieser Services zur Hand geht. Außerdem sehen wir uns alles Schritt für Schritt und nacheinander an.</p>

    <div id="chapter-148" class="para_Heading_2">
      In diesem Kapitel werden wir …
    </div>

    <p class="para_Text_body">In diesem Teil werden wir uns als Erstes die Karten, die <a class="extern" href="https://de.wikipedia.org/wiki/ESRI">ESRI</a> anbietet, ansehen. Danach schauen wir, was sich hinter dem Begriff Shapefile versteckt. Außerdem werden wir ESRI Webservices kennen lernen. Unter anderem einen L.esri.DynamicMapLayer, Geocoding und einen L.esri.FeatureLayer – hier konkret einen Query Layer. Mit letztgenanntem können Sie Daten, die Sie nicht benötigen, einfach aus der gegebenen Datenmenge herausfiltern.</p>

    <div id="chapter-149" class="para_Heading_2">
      L.esri.BasemapLayer erweitert L.TileLayer
    </div>

    <p class="para_Text_body">Mit der Klasse L.esri.BasemapLayer können Sie Karten, die Esri anbietet auf Ihrer Website als Leaflet Karte anzeigen.</p>

    <p class="para_Quotations">Die <a class="extern" href="https://github.com/esri/esri-leaflet#terms">Nutzungsbedingungen</a> für ESRI Dienste gelten für Leaflet Anwendungen. Diese können Sie auf der Website <a class="extern" href="https://github.com/esri/esri-leaflet#terms">https://github.com/esri/esri-leaflet#terms</a> nachlesen.</p>

    <div id="chapter-150" class="para_Heading_3">
      Basemaps und optionale Layer von ESRI
    </div>

    <p class="para_Text_body">Sie möchten Basemaps von ESRI verwenden. Wir haben im Kapitel Schöne Kartenlayer schon Karten von anderen Kartenanbietern eingebunden. Dieses Kapitel erweitert die Erklärungen im Kapitel Schöne Kartenlayer um ein weiteres Beispiel – nämlich die Karten des ESRI Instituts.</p>

    <div id="chapter-151" class="para_Heading_4">
      Basemaps
    </div>

    <p class="para_Text_body">Basemaps von ESRI bieten eine weltweite Abdeckung bei einer Vielzahl von Zoomstufen. Dabei können die folgenden Themenbereiche wählen.</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">Streets</p></li>

      <li><p class="para_Text_body">Topographic</p></li>

      <li><p class="para_Text_body">NationalGeographic</p></li>

      <li><p class="para_Text_body">Oceans</p></li>

      <li><p class="para_Text_body">Gray</p></li>

      <li><p class="para_Text_body">DarkGray</p></li>

      <li><p class="para_Text_body">Imagery</p></li>

      <li><p class="para_Text_body">ShadedRelief</p></li>

      <li><p class="para_Text_body">Terrain</p></li>

      <li><p class="para_Text_body">USATopo (Diese Karte wird nur für die USA angeboten)</p></li>
    </ul>

    <p class="para_Text_body">Wenn Ihnen eine der Basiskarten grundsätzlich gut gefällt, diese Ihnen aber zu wenig Informationen bietet, können Sie weitere optionale Ebenen über diese Basisebene einblenden. ESRI bietet speziell für jede Basisebene eine optionale Ebene mit weiteren Informationen.</p>

    <div id="chapter-152" class="para_Heading_4">
      Optionale Label Layer
    </div>

    <p class="para_Text_body">Label Layer sind optionale Ebenen, die zusätzliche Textbeschriftungen zu den Basiskarten hinzufügen. ESRI biete Ihnen sieben verschiedene optionale Schichten. Jede Ebene ist speziell für eine Basiskarte kreiert worden. Wenn Sie möchten, können Sie diese aber auch quer Beet kombinieren. Konkret bietet ESRI die Layer</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">OceansLabels:</p></li>

      <li><p class="para_Text_body">GrayLabels:</p></li>

      <li><p class="para_Text_body">DarkGrayLabels:</p></li>

      <li><p class="para_Text_body">ImageryLabels:</p></li>

      <li><p class="para_Text_body">ImageryTransportation:</p></li>

      <li><p class="para_Text_body">ShadedReliefLabels</p></li>

      <li><p class="para_Text_body">TerrainLabels</p></li>
    </ul>

    <p class="para_Text_body">Alle möglichen Basiskarten mit optionalen Ebenen können Sie auch in der Dokumentation des Leaflet Plugins nachlesen. Genau finden Sie diese Informationen unter der Adresse <a class="extern" href="https://esri.github.io/esri-leaflet/api-reference/layers/basemap-layer.html">https://esri.github.io/esri-leaflet/api-reference/layers/basemap-layer.html</a></p>

    <p class="para_Quotations">Hinweis:<br/>Wenn Sie möchten, können Sie die Anzeigen von Basemaps bei höheren Auflösungen auf Retina-Geräten mit der Option<span id="__DdeLink__45481_2030733088"> detectRetina </span>detectRetina optimal einstellen. Im nachfolgenden Programmcodeausschnitt wird die Basemap auf einem Retina Display in Retina-Auflösungen ausgegeben. Was ein Retina Display ist, habe ich Ihnen im Kapitel Custom Markers schon in einem Hinweis erklärt. Die Option detectRetina ist eine <a class="extern" href="http://leafletjs.com/reference-1.2.0.html#tilelayer-detectretina">Leaflet Funktion</a><br/><br/>…<br/>L.esri.basemapLayer('DarkGray', {<br/><span id="__DdeLink__16193_492679440">detectRetina: true</span><br/>}).addTo(map);<br/>…<br/><br/>Wenn Sie die Option detectRetina mit true belegt haben und ein Website-Besucher Ihre Karte auf einem Geräte mit einem Retina-Display öffnet, wird Leaflet anstelle der Bilddateien zu aktuellen Zoom-Stufe die vierfache Anzahl der Bildkacheln der nächsthöheren Zoom-Stufe anfordern und anzeigen. Wie die Bilddateien für eine Zoom-Stufe berechnet werden können Sie im Kapitel Wie weiß Leaflet welche Kacheln angezeigt werden sollen? nachlesen.</p>

    <div id="chapter-153" class="para_Heading_3">
      Ein einfaches Beispiel
    </div>

    <p class="para_Text_body">Das nachfolgende Beispiel zeigt Ihnen, wie Sie eine ESRI Basiskarte in Leaflet anzeigen können.</p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="esri-leaflet-debug.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">var gray = L.esri.basemapLayer('Gray').addTo(mymap);</p>

    <p class="para_Quelltext">var graylabels = L.esri.basemapLayer('GrayLabels').addTo(mymap);</p>

    <p class="para_Quelltext">gray.setOpacity(0.5);</p>

    <p class="para_Quelltext">gray.on('load', alertme);</p>

    <p class="para_Quelltext">function alertme(){</p>

    <p class="para_Quelltext">alert("Fertig!");</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_945.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Das haben wir gemacht? Wichtig ist, dass wir das Skript zum ESRI Leaflet Plugin einbinden. Ich habe dies mit der Zeile &lt;script src="esri-leaflet-debug.js"&gt;&lt;/script&gt; getan. Im Echtsysteme ist können Sie die komprimierte Version verwenden, also &lt;script src="esri-leaflet.js"&gt;&lt;/script&gt;. Die aktuellste Version dieses Skripts können Sie von der Adresse <a class="extern" href="http://esri.github.io/esri-leaflet/download/">http://esri.github.io/esri-leaflet/download/</a> kopieren. Nach dem Einbinden des Plugins haben wir mit der Zeile var gray = L.esri.basemapLayer('Gray').addTo(mymap); das L.esri.basemapLayer Objekt erstellt und es auch sofort zur Karte hinzugefügt. Zusätzlich haben wir die Karte mit gray.setOpacity(0.5); transparent dargestellt und dem Ereignis on('load') die Funktion alertme() zugeordnet. Immer dann, wenn die Karte fertig geladen ist, soll die Funktion alertme() ausgeführt werden. Genau bedeutet das, dass immer, wenn die Karte fertig geladen ist, ein Hinweisfenster erscheint. Verschieben Sie die Karte einmal. Dabei werden Sie sehen, dass das Ereignis on('load') auch immer dann, wenn die Karte neu geladen wird, eintritt.</p>

    <p class="para_Text_body">Die beiden nachfolgenden Abbildungen zeigen Ihnen die Basiskarte mit dem Namen Gray – einmal mit und einmal ohne optionale Ebene.</p>

    <div style="align: justify;">
      <table style="margin-top: 0px; margin-bottom: 0px; width: 100%;">
        <tbody>
          <tr>
            <td style="padding: 3px; border-top-width: 1px; border-top-style: solid; border-top-color: rgb(0, 0, 0); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(0, 0, 0); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/943.png" alt=" Abbildung 53 Die Basiskarte Gray mit optionaler Ebene"/>

                <figcaption class="para_Illustration">Abbildung 53 Die Basiskarte Gray mit optionaler Ebene</figcaption>
              </figure>

              <p class="para_Table_Contents">943.png</p>
            </td>

            <td style="padding: 3px; border: 1px solid rgb(0, 0, 0); text-align: left; vertical-align: top;">
              <figure class="image_container left-align" style="width:314px;">
                <img src="../Images/944.png" alt=" Abbildung 54 Die Basiskarte Gray ohne optionale Ebene"/>

                <figcaption class="para_Illustration">Abbildung 54 Die Basiskarte Gray ohne optionale Ebene</figcaption>
              </figure>

              <p class="para_Table_Contents">944.png</p>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <p class="para_Text_body"><br/><br/></p>

    <div id="chapter-154" class="para_Heading_3">
      Switch Basemaps
    </div>

    <p class="para_Text_body">Im nächsten Beispiel habe ich eine Auswahllist eingefügt. So können Sie zwischen den verschiedenen ESRI Karten schnell hin und her wechseln und sich so einen Überblick über das Kartenangebot verschaffen.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="esri-leaflet-debug.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;select</p>

    <p class="para_Quelltext">style ="position: absolute;top: 10px;right:10px;z-index: 400;"</p>

    <p class="para_Quelltext">id="basemaps"</p>

    <p class="para_Quelltext">onChange="changeBasemap(basemaps)"</p>

    <p class="para_Quelltext">&gt;</p>

    <p class="para_Quelltext">&lt;option value="Topographic"&gt;Topographic&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="Streets"&gt;Streets&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="NationalGeographic"&gt;National Geographic&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="Oceans"&gt;Oceans&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="Gray"&gt;Gray&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="DarkGray"&gt;Dark Gray&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="Imagery"&gt;Imagery&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="ShadedRelief"&gt;Shaded Relief&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="Terrain"&gt;Terrain&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="USATopo"&gt;USATopo &lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;/select&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 7);</p>

    <p class="para_Quelltext">var layer = L.esri.basemapLayer('Gray').addTo(mymap);</p>

    <p class="para_Quelltext">function changeBasemap(basemaps){</p>

    <p class="para_Quelltext">var basemap = basemaps.value;</p>

    <p class="para_Quelltext">if (layer) {</p>

    <p class="para_Quelltext">mymap.removeLayer(layer);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">layer = L.esri.basemapLayer(basemap);</p>

    <p class="para_Quelltext">mymap.addLayer(layer);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_944.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was haben wir genau gemacht? Hier gibt es nichts weltbewegend Neues. Eine Auswahlliste haben wir schon oft im Buch verwendet, deshalb ist diese im Programmcodebeispiel auch nicht fett hervorgehoben. Wenn ein Website-Besucher den aktiven Listeneintrag der Auswahlliste ändert, wird die aktuelle Kartenebene mit mymap.removeLayer(layer) entfernt. Danach wird eine neue Ebene mit der gewünschten Option erstellt – layer = L.esri.basemapLayer(basemap) – und diese wird dann zum Kartenobjekt hinzugefügt mymap.addLayer(layer).</p>

    <p class="para_Text_body">Im Ergebnis können Sie sich mithilfe der Auswahlliste alle ESRI Karten ansehen. Oder Sie können es einem Website-Besucher ermöglichen die Karte, die dieser am besten findet, zu aktiven.</p>

    <p class="para_Text_body"><br/><br/></p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/942.png" alt=" Abbildung 55 Dieses Bild zeigt die ESRI Basiskarte Imagery"/>

      <figcaption class="para_Illustration">Abbildung 55 Dieses Bild zeigt die ESRI Basiskarte Imagery</figcaption>
    </figure>

    <p class="para_Text_body">942.png</p>

    <div id="chapter-155" class="para_Heading_2">
      Shapefiles
    </div>

    <p class="para_Text_body"><span id="__DdeLink__21527_1847993398">Das Dateiformat Shapefile wurde von der Firma ESRI für die Software ArcView entwickelt. Shape Dateien sind speziell für die Verarbeitung von Geodaten entwickelt worden.</span>wurde von der Firma ESRI für die Software ArcView entwickelt. Shape Dateien sind speziell für die Verarbeitung von Geodaten entwickelt worden.</p>

    <div id="chapter-156" class="para_Heading_3">
      Was genau verbirgt sich hinter dem Begriff Shapefile
    </div>

    <p class="para_Text_body"><span id="__DdeLink__21709_1847993398">Ein Shapefile ist keine einzelne Datei. In der Regel handelt es sich um mehrere Dateien, die zu einem Zip-Archiv zusammengefasst sind. In diesem Archiv müssen mindestens die drei nachfolgend genannten Dateitypen vorhanden sein: Eine Datei mit der Endung .shp dient zur Speicherung der Geometriedaten. Eine Datei mit der Endung .dbf enthält Attribute oder Eigenschaften. Eine Datei mit der Endung .shx dient als eine Art Index. Mithilfe dieser Datei sind die Geometriedaten in der Datei .shp mit den Eigenschaften in der .dbf-Datei verknüpft.</span>In der Regel handelt es sich um mehrere Dateien, die zu einem Zip-Archiv zusammengefasst sind. In diesem Archiv müssen mindestens die drei nachfolgend genannten Dateitypen vorhanden sein:</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">Eine Datei mit der Endung .shp dient zur Speicherung der Geometriedaten.</p></li>

      <li><p class="para_Text_body">Eine Datei mit der Endung .dbf enthält Attribute oder Eigenschaften.</p></li>

      <li><p class="para_Text_body">Eine Datei mit der Endung .shx dient als eine Art Index. Mithilfe dieser Datei sind die Geometriedaten in der Datei .shp mit den Eigenschaften in der .dbf-Datei verknüpft.<span id="__DdeLink__21709_1847993398">Ein Shapefile ist keine einzelne Datei. In der Regel handelt es sich um mehrere Dateien, die zu einem Zip-Archiv zusammengefasst sind. In diesem Archiv müssen mindestens die drei nachfolgend genannten Dateitypen vorhanden sein: Eine Datei mit der Endung .shp dient zur Speicherung der Geometriedaten. Eine Datei mit der Endung .dbf enthält Attribute oder Eigenschaften. Eine Datei mit der Endung .shx dient als eine Art Index. Mithilfe dieser Datei sind die Geometriedaten in der Datei .shp mit den Eigenschaften in der .dbf-Datei verknüpft.</span></p></li>
    </ul>

    <p class="para_Text_body">Weitere Informationen zu Shapefiles und wie Sie diese selbst erstellen können, finden Sie auf der Website <a class="extern" href="http://desktop.arcgis.com/de/arcmap/10.3/">http://desktop.arcgis.com/de/arcmap/10.3/</a><a class="extern" href="http://desktop.arcgis.com/de/arcmap/10.3/manage-data/shapefiles/creating-a-new-shapefile.htm">manage-data/shapefiles/creating-a-new-shapefile.htm</a>.</p>

    <div id="chapter-157" class="para_Heading_3">
      Wie kommen Sie an ein Shapefiles
    </div>

    <p class="para_Text_body">Natürlich können Sie selbst ein Shapefile erstellen. Das ist aber gar nicht einfach und außerdem nicht Thema dieses Buches. Einfach ist es aber, an Shapefiles von anderen zu kommen. Insbesondere Daten, die von öffentlichem Interesse sind, werden oft zum Download als Shapefile angeboten. Suchen einfach einmal in einer Suchmaschine nach Websites die den Text Open Data enthalten.</p>

    <p class="para_Text_body">Bei einer Suche nach Open Data in einer Suchmaschine im Internet habe ich unter anderem das Schienennetz der Deutschen Bahn als Shapefile gefunden. <span id="__DdeLink__21701_1847993398">http://data.deutschebahn.com/dataset/geo-strecke</span>. Höchstwahrscheinlich interessieren Sie sich für Daten in der Nähe Ihres Wohnortes. Dann geben Sie zum Suchbegriff Open Data einfach den Namen einer Stadt in der Nähe Ihres Wohnortes ein. Eine Suche nach Open Data in der Nähe von Koblenz hat mich zu einer Website des Landesvermessungsamtes Koblenz geführt. Die Website <span id="__DdeLink__21531_1847993398">https://lvermgeo.rlp.de/ fileadmin/lvermgeo/pdf/open-data/Download_von_Verwaltungsgrenzen.pdf</span><a class="extern" href="https://lvermgeo.rlp.de/fileadmin/"> fileadmin/</a><a class="extern" href="https://lvermgeo.rlp.de/fileadmin/lvermgeo/pdf/open-data/Download_von_Verwaltungsgrenzen.pdf">lvermgeo/pdf/open-data/Download_von_Verwaltungsgrenzen.pdf</a> informiert über das des Landesvermessungsamtes Angebot an offenen Daten. Einige dieser Daten, zum Beispiel die Flurgrenzen, stehen als Shapefile zur Verfügung.</p>

    <p class="para_Text_body">Wenn Sie per Internetsuche keine passenden Daten finden, können Sie auf der Website von Openstreetmap, insbesondere auf der Unterseite <a class="extern" href="http://wiki.openstreetmap.org/wiki/Shapefiles">http://wiki.openstreetmap.org/wiki/Shapefiles</a> nach weiteren Anbietern suchen. Neben weiteren Informationen zum Shapefile Format gibt es hier auch eine Liste mit Anbietern.</p>

    <p class="para_Quotations">Wenn Sie mit Geodaten arbeiten und auf einen Fehler stoßen, muss dies nicht unbedingt an Ihnen liegen. Insbesondere dann nicht, wenn Sie Daten von anderen in Ihre Arbeit einbinden. Da das Shapefile Format kompliziert ist, ist es gut, dass es im Internet Websites gibt, auf denen man eine Shapefile Datei testen kann. Eine dieser Websites ist <a class="extern" href="http://leaflet/">http://leaflet</a><a class="extern" href="http://leaflet.calvinmetcalf.com/">.&amp;lt;br/&amp;gt;calvinmetcalf.com</a><a class="extern" href="http://leaflet.calvinmetcalf.com/#6/51.358/11.964">/#6/51.358/11.964</a>.</p>

    <figure class="image_container left-align" style="width:567px;">
      <img src="../Images/969.png" alt=" Abbildung 56"/>

      <figcaption class="para_Illustration">Abbildung 56</figcaption>
    </figure>

    <p class="para_Quotations">969.png</p>

    <div id="chapter-158" class="para_Heading_3">
      Wie binden Sie Shapefiles in Ihre Leaflet Karte ein?
    </div>

    <div id="chapter-159" class="para_Heading_4">
      Deutsche Verwaltungsgrenzen als Shapefile in der Leaflet Karte
    </div>

    <p class="para_Text_body">Die Shape Datei, die ich im nächsten Beispiel verwende, habe ich von der Website <span id="__DdeLink__21703_1847993398">https://www.arcgis.com/home/item.html?id=ae25571c60d94ce5b7fcbf74e27c00e0</span> kopiert. Die Firma ESRI bietet auf dieser Website mit ArcGIS ein Geoinformationssystem, dass die Verwendung, Erstellung und Freigabe von Geodaten einfach macht. Ich habe mir den oben verlinkten Datensatz mit den Verwaltungsgrenzen von Deutschland kopiert. Die Datei landet unter dem Namen vg2500_geo84.zip bei mir auf dem Computer.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/970.png" alt=" Abbildung 57"/>

      <figcaption class="para_Illustration">Abbildung 57</figcaption>
    </figure>

    <p class="para_Text_body">970.png</p>

    <p class="para_Text_body">Wie ich die Shape Datei mit Leaflet in eine Karte integriere, zeigt Ihnen das nachfolgende Beispiel. Natürlich gibt es dafür auch wieder ein Leaflet Plugin. Die Website zum Plugin Leaflet.Shapefile finden Sie auf Github unter der Adresse <a class="extern" href="https://github.com/calvinmetcalf/leaflet.shapefile">https://github.com/calvinmetcalf/leaflet.shapefile</a>. Die Datei zum Plugin heißt leaflet.shpfile.js. Der gleiche Entwickler bietet auch ein Skript zum Analysieren der Shape Datei unter der Adresse <a class="extern" href="https://github.com/calvinmetcalf/shapefile-js">https://github.com/calvinmetcalf/shapefile-js</a> an. Diese Datei heißt shp.js. Diese beiden Dateien müssen Sie in Ihre HTML-Datei einbinden.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="shp.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="<span id="__DdeLink__19544_1847993398">leaflet.shpfile.js</span>"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 6);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var shpfile = new L.Shapefile('vg2500_geo84.zip');</p>

    <p class="para_Quelltext">shpfile.addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_943.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Die vier fett formatierten Zeilen zeigen schon alles Notwendige. Und was haben wir genau gemacht? Im Kopfbereich unser Beispiel HTML-Datei haben wir zwei Skripte eingebunden. Einmal das Skript leaflet.shpfile.js zum Leaflet Plugin und dann das Skript shp.js zum Analysieren der Shape Datei. Danach haben wir mit der Zeile var shpfile = new L.Shapefile('vg2500_geo84.zip') eine Ebene mit den Daten in der Shape Datei erstellt. Zum Schluss haben wir diese Ebene zum Kartenobjekt hinzugefügt: shpfile.addTo(mymap).</p>

    <p class="para_Text_body">Als Ergebnis sehen Sie nun alle Verwaltungsgrenzen, also die reinen Geometrien. Eigenschaften die in der Shape Datei enthalten sind, werden in diesem Beispiel noch nicht angezeigt. Das Anzeigen von Eigenschaften und das Zuordnen anderer Stile habe ich für das nächste Beispiel aufgehoben.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/967.png" alt=" Abbildung 58"/>

      <figcaption class="para_Illustration">Abbildung 58</figcaption>
    </figure>

    <p class="para_Text_body">967.png</p>

    <div id="chapter-160" class="para_Heading_4">
      Deutsche Verwaltungsgrenzen mit Optionen
    </div>

    <p class="para_Text_body">Im nächsten Beispiel sehen Sie, wie Sie das Aussehen der Formen in der Shape Datei beeinflussen könne.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="<span id="__DdeLink__19541_1847993398">shp.js</span>"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet.shpfile.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 6);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var shpfile = new L.Shapefile('vg2500_geo84.zip',</p>

    <p class="para_Quelltext">{style:function(feature){return {color:"black",fillColor:"red",fillOpacity:.75}}}</p>

    <p class="para_Quelltext">);</p>

    <p class="para_Quelltext">shpfile.addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_942.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Das vorhergehende Beispiel manipuliert die Option style. Die Belegung der Option style mit color:"black",fillColor:"red",fillOpacity:.75 färbt die Grenzen der Shape Datei schwarz und füllt die Formen mit der Farbe Rot – bei einer Transparenz von 75 Prozent.</p>

    <p class="para_Text_body">Das rot gefärbte Deutschland können Sie sich in der nächsten Abbildung ansehen.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/968.png" alt=" Abbildung 59"/>

      <figcaption class="para_Illustration">Abbildung 59</figcaption>
    </figure>

    <p class="para_Text_body">968.png</p>

    <div id="chapter-161" class="para_Heading_4">
      Ein Pop-up-Fenster
    </div>

    <p class="para_Text_body">Schön wäre es, wenn man für jede Verwaltungseinheit den Namen in einem Fenster angezeigt bekommen würde – und zwar genau dann, wenn man die Fläche anklickt. Im nächsten Beispiel sehen Sie, wie Sie dies umsetzen können.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="shp.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet.shpfile.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 5);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var shpfile = new L.Shapefile(</p>

    <p class="para_Quelltext">'vg2500_geo84.zip',</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">onEachFeature:function(feature, layer)</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">layer.bindPopup(feature.properties.GEN);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">shpfile.addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;-- index_941.html --&gt;</p>

    <p class="para_Text_body">In diesem Beispiel haben wir die onEachFeature Option verwendet. Wir haben dieser Option eine anonyme Funktion zugeordnet in der wir mit jedem Feature in der Shape Datei mithilfe von layer.bindPopup(feature.properties.GEN) ein Fenster zugewiesen haben. Im Fenster erscheint der Text, der bei dem Feature im Attribut GEN als Eigenschaft eingetragen ist. Wenn Sie sich nun fragen, woher Sie wissen können, dass es als Eigenschaft ein Attribut GEN gibt, dann warten Sie bis zum nächsten Beispiel. Dort werde ich Ihnen eine Möglichkeit alle Optionen auszulesen vorstellen.</p>

    <p class="para_Text_body">Probieren Sie dieses Beispiel selbst aus. Öffnen Sie die Karte und klicken Sie einen Landkreis an. Wie in der nachfolgenden Abbildung zu sehen ist, sollte sich auch auf Ihrer Karte ein Fenster öffnen.</p>

    <p class="para_Quotations">Auf diese Art und Weise können Sie auch das Aussehen einer Form, abhängig vom Wert eines Attributes gestalten.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/966.png" alt=" Abbildung 60"/>

      <figcaption class="para_Illustration">Abbildung 60</figcaption>
    </figure>

    <p class="para_Text_body">966.png</p>

    <div id="chapter-162" class="para_Heading_4">
      Ein Pop-up-Fenster mit allen Informationen des Features
    </div>

    <p class="para_Text_body">Sie wissen nicht, welche Eigenschaften in der Shape Datei genau für die Geometrien enthalten sind – Sie möchten sich aber gerne einen Überblick über diese Eigenschaften verschaffen. Das nächste Beispiel zeigt Ihnen, wie Sie die Informationen nur mit JavaScript in Erfahrung bringen können.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="shp.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet.shpfile.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 5);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var shpfile = new L.Shapefile(</p>

    <p class="para_Quelltext">'vg2500_geo84.zip',</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">onEachFeature:function(feature, layer)</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">var holder=[];</p>

    <p class="para_Quelltext">for (var key in feature.properties){</p>

    <p class="para_Quelltext">holder.push(key+": "+feature.properties[key]+"&lt;br&gt;");</p>

    <p class="para_Quelltext">popupContent=holder.join("");</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">layer.bindPopup(popupContent);</p>

    <p class="para_Quelltext">}});</p>

    <p class="para_Quelltext">shpfile.addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_940.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Für die Beantwortung dieser Fragestellung nutzen wir auch wieder die Option onEachFeature. In dieser Option erstellen wir eine Variable, genau ein Array, mit dem Namen holder. Als nächstes durchlaufen wir in einer Schleife alle Schlüssel die in den Eigenschaften der Shape Datei, also in feature.properties enthalten sind. Wir fügen mit <a class="extern" href="https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/push">push()</a> jeden Eintrag in den Array holder ein und separieren diesen von dem nächsten Eintrag mit <a class="extern" href="https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/join">join()</a>. Den Text mit allen <span id="__DdeLink__21189_1847993398">Schlüssel-Wert-Paare</span>n fügen wir am Schluss als Text zum Layer hinzu.</p>

    <p class="para_Text_body">Als Ergebnis sehen Sie alle möglichen Schlüssel-Wert-Paare in einem Fenster über Ihrer Karte, sobald Sie eine Fläche anklicken.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/Bild79.png" alt=" Abbildung 61"/>

      <figcaption class="para_Illustration">Abbildung 61</figcaption>
    </figure>

    <p class="para_Text_body">965.png</p>

    <div id="chapter-163" class="para_Heading_2">
      ESRI Services
    </div>

    <p class="para_Text_body">Sie wissen nun wie Sie eine ESRI Basiskarte laden, wie Sie mit dem Plugin ESRI-Leaflet grundsätzlich umgehen und wie Sie Dateien im Format Shapefile nutzen können.</p>

    <p class="para_Text_body">ESRI bietet aber noch eine ganze Menge mehr. Sie können ArcGIS Server-Web-Services nutzen. Das ESRI Plugin unterstützt Sie auch bei der Verbindung mit einem Web Service, der sich auf einer ArcGIS Server-Website befindet und für Client-Anwendungen zur Verfügung gestellt wird. Mit einem ArcGIS Web Service kann entweder eine weitere <a class="extern" href="http://esri.github.io/esri-leaflet/api-reference/#layers">Ebene</a> für eine Karte zur Verfügung gestellt oder eine bestimmte <a class="extern" href="http://esri.github.io/esri-leaflet/api-reference/#tasks">Aufgabe</a> bearbeitet werden.</p>

    <p class="para_Text_body">Eine Ebene kann dabei neben dem L.esri.BasemapLayer, den Sie ja schon kennen gelernt haben, ein L.esri.DynamicMapLayer, ein L.esri.ImageMapLayer, ein L.esri.RasterLayer, ein L.esri.TiledMapLayer, ein L.esri.FeatureLayer, ein L.esri.Cluster.FeatureLayer oder ein L.esri.Heat.FeatureLayer sein. Eine Aufgabe könnte das Einschränken der Anzeige auf bestimmte Objekte mit L.esri.Query sein oder das Zuordnen von Adressen zu Koordinaten mit L.esri.Geocoding.*.</p>

    <p class="para_Text_body">Im nächsten Kapitel beginnen wir damit, das wir eine Ebene, nämlich einen L.esri.DynamicMapLayer, mithilfe eines Web Services nutzen. Wenn Sie dieses Beispiel durchgearbeitet haben, können Sie alle anderen Layer ebenfalls verwenden. Die Vorgehensweise ist bei jedem einheitlich. Der einzige Unterschied besteht im Angebot der möglichen Methoden und Optionen. Da aber die Dokumentation zum Plugin in diesem Bereich sehr gut ist, dürfte dies keine Schwierigkeit darstellen. Die Dokumentation zu den Layern finden Sie unter der Adresse <a class="extern" href="http://esri.github.io/esri-leaflet/api-reference/#layers">http://esri.github.io/esri-leaflet/api-reference/#layers</a>.</p>

    <div id="chapter-164" class="para_Heading_3">
      L.esri.DynamicMapLayer
    </div>

    <p class="para_Text_body"><span id="__DdeLink__17453_1757274562">Für das nachfolgende Beispiel habe ich Daten des Geoportals Köln genutzt.</span><a class="extern" href="http://www.stadt-koeln.de/politik-und-verwaltung/geoportal/">Geoportals Köln</a> genutzt. Dieses Portal bieten den Zugriff auf offene Daten, Dienste und Anwendungen verschiedener Herkunft. Das Geoportal Köln zentralisieren nach eigenen Angaben Informationen aus den Bereichen Umwelt, Verkehr, Vermessung und Planung. Jeder hat die Möglichkeit die Geodaten des Geoportal Köln zu nutzen, anzusehen und zu analysieren. Informationen zum Geoportal Köln finden Sie auf der Website der Stadt Köln, genau unter der Adresse <a class="extern" href="http://www.stadt-koeln.de/politik-und-verwaltung/geoportal/">http://www.stadt-koeln.de/politik-und-verwaltung/geoportal/</a>. Die Dokumentation zur Schnittstelle des Web Services finden Sie unter der Adresse <span id="__DdeLink__17450_1757274562">https://geoportal.stadt-koeln.de/arcgis/</span>. Wenn Sie dann auf den Eintrag Behindertenparkplätze klicken sehen Sie die Angaben die speziell unser nachfolgendes Beispiel betreffen.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="esri-leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.97264, 7.00469], 12);</p>

    <p class="para_Quelltext">//L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">L.esri.basemapLayer('Gray').addTo(mymap);</p>

    <p class="para_Quelltext">var url = "https://geoportal.stadt-koeln.de/arcgis/rest/services/Behindertenparkplaetze/MapServer";</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">var dMap = L.esri.dynamicMapLayer({</p>

    <p class="para_Quelltext">url: url,</p>

    <p class="para_Quelltext">opacity : 0.25,</p>

    <p class="para_Quelltext">useCors: false</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">dMap.bindPopup(</p>

    <p class="para_Quelltext">function(err, featureCollection, response){</p>

    <p class="para_Quelltext">return featureCollection.features[0].properties.Bezeichnung +</p>

    <p class="para_Quelltext">'&lt;br&gt;Anzahl: ' +</p>

    <p class="para_Quelltext">featureCollection.features[0].properties.Anzahl;</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_939.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Als Erstes haben wir das Skript zum Esri Leaflet Plugin eingebunden. Als Nächstes haben wir die URL, unter welcher der betreffende Service angeboten wird, in die Variabel url gespeichert. Danach haben wir mit dem Code</p>

    <p class="para_Text_body">var dMap = L.esri.dynamicMapLayer({</p>

    <p class="para_Text_body">url: url,</p>

    <p class="para_Text_body">opacity : 0.25,</p>

    <p class="para_Text_body">useCors: false</p>

    <p class="para_Text_body">}).addTo(mymap);</p>

    <p class="para_Text_body">ein L.esri.dynamicMapLayer-Objekt erstellt und diesem gleichzeitig Optionen übergeben. Unter anderem die URL. Zuletzt haben wir dann mit dem Code</p>

    <p class="para_Text_body">dMap.bindPopup(</p>

    <p class="para_Text_body">function(err, featureCollection, response){</p>

    <p class="para_Text_body">return featureCollection.features[0].properties.Bezeichnung +</p>

    <p class="para_Text_body">'&lt;br&gt;Anzahl: ' +</p>

    <p class="para_Text_body">featureCollection.features[0].properties.Anzahl;</p>

    <p class="para_Text_body">});</p>

    <p class="para_Text_body">jedem Feature ein hinzugefügt und in dieses die Eigenschaften Bezeichnung und Anzahl als Text eingetragen. Welche Eigenschaften Ihnen ein Web Service zur Verfügung stellt, finden Sie in der Dokumentation zum Service. Die Adresse zur Dokumentation des hier verwendeten Services hatte ich Ihnen weiter oben schon genannt.</p>

    <p class="para_Text_body">Die nachfolgende Abbildung zeigt Ihnen alle – im Web Service Behindertenparkplätze des Geoportals Köln eingetragenen – Parkplätze.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/938.png" alt=" Abbildung 62"/>

      <figcaption class="para_Illustration">Abbildung 62</figcaption>
    </figure>

    <p class="para_Text_body">938.png</p>

    <div id="chapter-165" class="para_Heading_3">
      Geocoding
    </div>

    <p class="para_Text_body">Was ist <a class="extern" href="https://de.wikipedia.org/wiki/Georeferenzierung">Geocoding</a>? Geocoding bezeichnet die Umwandlung von Adressen wie Kirchstraße 13, 56571 Muster in geografische Koordinaten wie 50.423021 Breite und 7.083739 Länge. Nur so können Sie nämlich einen Marker auf einer Karte platzieren oder die Karte an einer bestimmten Adresse zentriert öffnen.</p>

    <p class="para_Quotations">Hinweis:<br/><a class="extern" href="https://nominatim.openstreetmap.org/">Nominatim</a> ist eine Anwendung, mithilfe der OpenStreetMap Daten anhand von Texten durchsucht werden können. Diese Texte sind in der Regel eine Adresse oder ein Teil einer Adresse. Falls der Suchtext mit Eigenschaften, die mit einem Objekt, dass in der OpenStreetMap Datenbank gespeichert ist, übereinstimmt, wird die Koordinate zu diesem übereinstimmenden Objekt auf eine Suchanfrage hin zurück gegeben. Sie finden die Anwendung Nominatim unter der Adresse <a class="extern" href="https://nominatim.openstreetmap.org/">https://nominatim.openstreetmap.org/</a> im Internet. <br/>Da Nominatim auf OpenStreetMap Daten beruht, können Sie sich nicht darauf verlassen, dass alle Adressen eingetragen sind. OSM ist keine kommerzielle Firma, sondern ein Projekt das auf der Mitarbeit von Freiwilligen beruht. Dafür können Sie aber selbst Einfluss auf den Datenbestand nehmen. Bei OpenStreetMap kann jeder <a class="extern" href="http://wiki.openstreetmap.org/wiki/DE:Getting_Involved">mitmachen</a> und korrekte Daten zu dem aktuellen Datenband hinzufügen.<br/>Ein Pluign, dass Nominatim als Service nutze, ist das Plugin <a class="extern" href="https://github.com/perliedman/leaflet-control-geocoder">Leaflet Control Geocoder.</a></p>

    <p class="para_Text_body">Ich zeige Ihnen hier anhand des <a class="extern" href="https://github.com/Esri/esri-leaflet-geocoder">ESRI Leaflet Geocoder Plugins</a> folgendes:</p>

    <ul class="list_Text_body">
      <li><p class="para_Text_body">Ich zeige Ihnen, wie Sie eine Adresse in eine Koordinate umwandeln können.</p></li>

      <li><p class="para_Text_body">Ich zeige Ihnen, wie Sie eine Koordinate in eine Adresse umwandeln können.</p></li>

      <li><p class="para_Text_body">Ich zeige Ihnen, wie Sie eine Karte so öffnen können, dass eine bestimmte Adresse zentriert angezeigt wird.</p></li>
    </ul>

    <div id="chapter-166" class="para_Heading_4">
      Nach Eingabe einer Adresse den passenden Ort auf der Karte finden
    </div>

    <p class="para_Text_body">Sie zeigen eine Karte auf Ihrer Website an und möchten es anderen ermöglichen, zu einer bestimmten Adresse auf der Karte zu navigieren, nachdem Sie diese Adresse in einem Textfeld eingetragen haben. Dann integrieren Sie doch einfach, wie im nächsten Beispiel gezeigt, ein ESRI Leaflet Geocoder Control in Ihre Karte.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="esri-leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="esri-leaflet-geocoder.css"&gt;</p>

    <p class="para_Quelltext">&lt;script src="esri-leaflet-geocoder.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.97264, 7.00469], 12);</p>

    <p class="para_Quelltext">L.esri.basemapLayer('Gray').addTo(mymap);</p>

    <p class="para_Quelltext"><span id="__DdeLink__16820_777390906">var searchControl = L.esri.Geocoding.geosearch().addTo(mymap); var results = L.layerGroup().addTo(mymap); searchControl.on("results", function(data) { results.clearLayers(); for (var i = data.results.length - 1; i &gt;= 0; i--) { results.addLayer(L.marker(data.results[i].latlng)); } });</span></p>

    <p class="para_Quelltext"><br/><br/></p>

    <p class="para_Quelltext">var results = L.layerGroup().addTo(mymap);</p>

    <p class="para_Quelltext">searchControl.on("results", function(data) {</p>

    <p class="para_Quelltext">results.clearLayers();</p>

    <p class="para_Quelltext">for (var i = data.results.length - 1; i &gt;= 0; i--) {</p>

    <p class="para_Quelltext">results.addLayer(L.marker(data.results[i].latlng));</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">});<span id="__DdeLink__16820_777390906">var searchControl = L.esri.Geocoding.geosearch().addTo(mymap); var results = L.layerGroup().addTo(mymap); searchControl.on("results", function(data) { results.clearLayers(); for (var i = data.results.length - 1; i &gt;= 0; i--) { results.addLayer(L.marker(data.results[i].latlng)); } });</span></p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_938.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Zur Darstellung des Textfeldes für die Eingabe der Adresse ist es notwendig zwei weitere Skripte einzubinden. Neben dem Skript esri-leaflet.js sollten Sie auch noch die Dateien esri-leaflet-geocoder.css und esri-leaflet-geocoder.js in Ihr HTML-Dokument einbinden. Die notwendigen Dateien hierfür finden Sie unter der Adresse <a class="extern" href="https://github.com/Esri/esri-leaflet-geocoder/">https://github.com/Esri/esri-leaflet-geocoder/</a>. Als Nächstes wird dann mit var searchControl = L.esri.Geocoding.geosearch().addTo(mymap); das Eingabefeld für die zu suchende Adresse erstellt und zur Karte hinzugefügt. Dieses Eingabefeld nennt Leaflet auch Control. Wir brauchen eine Ebene, die die Suchergebnisse richtig verarbeitet. Diese erstellen wir mit der Zeile var results = L.layerGroup().addTo(mymap);. Zum Schluss können wir dann das Ereignis on("results") des Objektes searchControl mit einer Funktion belegen.</p>

    <p class="para_Text_body">searchControl.on("results", function(data) {</p>

    <p class="para_Text_body">results.clearLayers();</p>

    <p class="para_Text_body">for (var i = data.results.length - 1; i &gt;= 0; i--) {</p>

    <p class="para_Text_body">results.addLayer(L.marker(data.results[i].latlng));</p>

    <p class="para_Text_body">}</p>

    <p class="para_Text_body">});</p>

    <p class="para_Text_body">Wenn es neue Suchergebnisse gibt, dann werden alle alten Suchergebnisse von der Ebene entfernt und die neuen Suchergebnisse als Marker auf der Ebene platziert.</p>

    <p class="para_Quotations">Achtung:<br/>Ihre Adresse wird nicht auf der Karte gefunden? Das ESRI Leaflet Geocoder Control findet mithilfe der Methode <a class="extern" href="http://esri.github.io/esri-leaflet/api-reference/controls/geosearch.html">geosearch()</a> standardmäßig nur Adressen, die aktuell auch sichtbar auf der Karte sind. Erst wenn Ihre Adresse auch bei einer Zoom-Stufe von 0 nicht gefunden wird, stimmt etwas nicht. Falls Sie lieber sofort die ganz Welt durchsuchen möchten, dann sollten Sie die Option useMapBounds des Objektes das Ihnen die Funktion L.esri.Geocoding.geosearch() liefert, mit false belegen.</p>

    <p class="para_Text_body">Die erste Ansicht der Karte nach dem Hinzufügen des ESRI Leaflet Geocoder Control Plugins ist nicht spektakulär. Sie sehen in der linken oberen Ecke eine kleine Lupe. Wenn Sie diese anklicken, öffnet sich ein Textfeld. In dieses Textfeld können Sie nun die Adresse eingebe, die Sie suchen möchten. Standardmäßig werden Ihnen alternative Eingaben vorgeschlagen. Sie können das Verhalten des Plugins mit vielen Optionen beeinflussen. Sehen sich die Dokumentation unter Adresse <a class="extern" href="http://esri.github.io/esri-leaflet/api-reference/controls/geosearch.html">http://esri.github.io/esri-leaflet/api-reference/controls/geosearch.html</a> an. Vielleicht ist ja sogar eine Option dabei, auf die Sie selbst nicht gekommen wären.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/937.png" alt=" Abbildung 63"/>

      <figcaption class="para_Illustration">Abbildung 63</figcaption>
    </figure>

    <p class="para_Text_body">937.png</p>

    <div id="chapter-167" class="para_Heading_4">
      Mithilfe eines Parameters in der URL den passenden Ort finden
    </div>

    <p class="para_Text_body">Manchmal kommt es vor, dass Sie eine Karte schon sofort an einer bestimmten Adresse zentriert öffnen möchten. Wie Sie so etwas umsetzten können, zeigt Ihnen das nächste Beispiel.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="esri-leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="esri-leaflet-geocoder.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var x = location.search;</p>

    <p class="para_Quelltext">var y = x.split("=");</p>

    <p class="para_Quelltext">var temp=y[1];</p>

    <p class="para_Quelltext">var address = <span id="__DdeLink__17908_777390906">decodeURIComponent</span>(temp);</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.97264, 7.00469], 3);</p>

    <p class="para_Quelltext">L.esri.basemapLayer('Gray').addTo(mymap);</p>

    <p class="para_Quelltext"><span id="__DdeLink__17544_777390906">L.esri.Geocoding.geocode().text(address).run(function(err, result, response){ L.marker(result.results[0].latlng).addTo(mymap); mymap.setView(result.results[0].latlng, 13);</span></p>

    <p class="para_Quelltext">L.marker(result.results[0].latlng).addTo(mymap);</p>

    <p class="para_Quelltext">mymap.setView(result.results[0].latlng, 13);<span id="__DdeLink__17544_777390906">L.esri.Geocoding.geocode().text(address).run(function(err, result, response){ L.marker(result.results[0].latlng).addTo(mymap); mymap.setView(result.results[0].latlng, 13);</span></p>

    <p class="para_Quelltext"><span id="__DdeLink__17726_777390906">});</span></p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_937.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was haben wir genau gemacht? Angenommen, wir haben in der Adresszeile des Browsers den Text ?test=56751 Gering angefügt. Diesen Text haben wir als Erstes in der Variablen x gespeichert. Hierzu haben wir die Eigenschaft <a class="extern" href="https://wiki.selfhtml.org/wiki/JavaScript/Location/search">location.search</a> zu Hilfe genommen. Diese Eigenschaft speichert eine Zeichenkette, die durch ein Fragezeichen getrennt, zur aktuellen URL gehört. Die Variable x enthält also nun den Text test=56751 Gering. Diesen Text haben wir dann mithilfe von x.split("=") an der Position des Gleichheitszeichens getrennt und die beiden Teile als Array in der Variablen y gespeichert. Den Adressteil können wir nun über y[1] abrufen. Wir müssen die Adresse vor der Eingabe in eine Suchfunktion aber noch dekodieren. In der URL wurde diese nämlich kodiert abgelegt. var address = <a class="extern" href="https://wiki.selfhtml.org/wiki/JavaScript/decodeURIComponent">decodeURIComponent</a>(temp) macht aus 56751%20Gering wieder 56751 Gering und speichert den dekodierten Text in der Variablen address ab. Und diesen Text können wir nun als Suchtext in die Methode text() des Geocode Objektes eingeben und auf dem Ergebnis die Methode run() ausführen.</p>

    <p class="para_Text_body">L.esri.Geocoding.geocode().text(address).run(function(err, result, response){</p>

    <p class="para_Text_body">L.marker(result.results[0].latlng).addTo(mymap);</p>

    <p class="para_Text_body">mymap.setView(result.results[0].latlng,13);</p>

    <p class="para_Text_body">});</p>

    <p class="para_Text_body">Die Rückruffunktion, die daraufhin ausgeführt wird, erstellt einen Marker für das erste Ergebnis und zentriert diesen Marker, bei einer Zoom-Stufe von 13, in der Karte. Eine <a class="extern" href="https://de.wikipedia.org/wiki/Rückruffunktion">Rückruffunktion</a> ist eine Funktion, die einer anderen Funktion als Parameter übergeben und von dieser erst später unter definierten Bedingungen mit definierten Argumenten aufgerufen wird. Eine solche Funktion kennen Sie sicher auch unter dem englischen Namen callback function.</p>

    <p class="para_Quotations">Wollen Sie die Suchanfrage genauer formulieren? Dann ersetzen Sie den Text <br/>L.esri.Geocoding.geocode().text('Amselweg 7, Koblenz, Rheinland Pfalz, 65065').run(function(err, results, response){<br/>...<br/>});<br/>mit<br/>L.esri.Geocoding.geocode().address('Amselweg 7').city('Koblenz').region('Rheinland Pfalz').postal(65065).run(function(err, results, response){<br/>...<br/>});</p>

    <p class="para_Quotations">Welche Funktionen Sie genau verwenden können, ist in der Dokumentation beschrieben: <a class="extern" href="https://esri.github.io/esri-leaflet/api-reference/tasks/geocode.html">https://esri.github.io/esri-leaflet/api-reference/tasks/geocode.html</a>.</p>

    <p class="para_Text_body">Voilà! Wenn sie an die URL, unter der Sie Ihre Leaflet Karte abegelegt haben, den Text ?test=56751 Gering anhängen, wird Ihnen die in der nachfolgenden Abbildung dargestellte Karte angezeigt.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/936.png" alt=" Abbildung 64"/>

      <figcaption class="para_Illustration">Abbildung 64</figcaption>
    </figure>

    <p class="para_Text_body">936.png</p>

    <div id="chapter-168" class="para_Heading_4">
      Nach Klick auf die Karte die passende Adresse ausgeben
    </div>

    <p class="para_Text_body">Umgekehrtes Geocoding ist die Bezeichnung für die Umwandlung geografischer Koordinaten in, für Menschen gut lesbare, Adressen.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="esri-leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="esri-leaflet-geocoder.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.97264, 7.00469], 12);</p>

    <p class="para_Quelltext">L.esri.basemapLayer('Gray').addTo(mymap);</p>

    <p class="para_Quelltext"><span id="__DdeLink__18994_777390906">mymap.on('click', function(e){</span></p>

    <p class="para_Quelltext">var r = L.marker();</p>

    <p class="para_Quelltext">L.esri.Geocoding.reverseGeocode()</p>

    <p class="para_Quelltext">.latlng(e.latlng)</p>

    <p class="para_Quelltext">.run(function(error, result, response){</p>

    <p class="para_Quelltext">r = L.marker(result.latlng).addTo(mymap).bindPopup(result.address.Match_addr).openPopup();</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_936.html--&gt;</p>

    <p class="para_Text_body">936.html</p>

    <p class="para_Text_body">Das haben wir gemacht<span class="Source_Text">? </span><span class="Source_Text">Wir mit dem Programmcode der in der Funktion </span><span class="Source_Text">mymap.on('click', function(e){}</span><span class="Source_Text"> ausgeführt wird veranlasst, dass immer dann, wenn jemand auf die Karte klickt, eine umgekehrte Geocoding Suche gestartet wird. Gleichzeitig wird ein Marker an der Position, die angeklickt wurde, erstellt. Das Ergebnis der Suche – also die gefundene Adresse – wird schlussendlich als Text in einem zum Marker angezeigt.</span></p>

    <p class="para_Text_body">Wie diese Karte genau aussieht, können Sie sich in der nächsten Abbildung ansehen.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/935.png" alt=" Abbildung 65"/>

      <figcaption class="para_Illustration">Abbildung 65</figcaption>
    </figure>

    <p class="para_Text_body">935.png</p>

    <p class="para_Text_body">Die Dokumentation zum ESRI Reverse Geocoding finden Sie unter der Internetadresse <a class="extern" href="http://esri.github.io/esri-leaflet/api-reference/tasks/reverse-geocode.html">http://esri.github.io/esri-leaflet/api-reference/tasks/reverse-geocode.html</a></p>

    <div id="chapter-169" class="para_Heading_3">
      Feature Services
    </div>

    <p class="para_Text_body">Wir haben im vorletzten Kapitel mit dem L.esri.dynamicMapLayer Daten über einen Webservice geladen. Dabei haben alle zur Verfügung stehenden Daten auf der Karte angezeigt. Das kann sehr unübersichtlich werden. Meist bietet ein Webservice große Datenmengen an. Sie möchten sicherlich nur, die für Sie und Ihre Anwender, relevanten Daten auf Ihrer Karte anzeigen. Eine Lösung für diese Aufgabe erarbeiten wir in diesem Kapitel.</p>

    <p class="para_Text_body">In diesem Beispiel werden wir die Klasse <a class="extern" href="https://esri.github.io/esri-leaflet/api-reference/layers/feature-layer.html">L.esri.featureLayer</a> instanziieren. Vorher haben wir mit der Klasse <a class="extern" href="https://esri.github.io/esri-leaflet/api-reference/layers/dynamic-map-layer.html">L.esri.dynamicMapLayer</a> gearbeitet. Vielleicht fragen Sie sich nun, wie die beiden Klassen sich genau unterscheiden. ESRI erklärt dies wie folgt: Mit einem <a class="extern" href="http://resources.arcgis.com/de/help/main/10.2/index.html#//0154000002w8000000">Feature-Service</a> können Sie Funktionen über das Internet bereitstellen. Mit dem <a class="extern" href="http://resources.arcgis.com/de/help/main/10.2/index.html#//0154000002m7000000">Karten-Service</a> können Sie Karten im Web bereitstellen. Meiner Meinung nach ist ein Feature Service ein spezieller Karten-Service – denn ein Feature Service setzt eine Karte voraus.</p>

    <p class="para_Quotations">Interessieren Sie sich für die technologische Entwicklung bei ESRI? Die wichtigsten Informationen zur ArcGIS Plattform und ergänzenden Technologien können Sie auf dem Blog GIS IQ – <a class="extern" href="https://gis-iq.esri.de/">https://gis-iq.esri.de/</a> – mitverfolgen.</p>

    <div id="chapter-170" class="para_Heading_4">
      Attribute
    </div>

    <p class="para_Text_body">So, nun kommen wir zum praktischen Beispiel. Wir konfigurieren eine Abfrage zum Filtern von Daten. Konkret verwenden wir Sicherheitseinrichtungen, deren Daten über die Adresse <a class="extern" href="http://www.arcgis.com/home/item.html?id=59711f4ee839438299c90164115f129b">http://www.arcgis.com/home/item.html?id=59711f4ee839438299c90164115f129b</a> bereit gestellt werden.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="esri-leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;select id="sicherheitseinrichtungenID"&gt;</p>

    <p class="para_Quelltext">&lt;option value=""&gt;Reset&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="Untertyp='pt_Notrufsaeule'"&gt;Notrufsaeule&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="Untertyp='pt_Feuerwache'"&gt;Feuerwache&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="Untertyp='pt_Rettungspunkt'"&gt;Rettungspunkt&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="Untertyp='pt_Polizeistation'"&gt;Polizeistation&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="Untertyp='pt_Sirene'"&gt;Sirene&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;option value="Untertyp='pt_Rettungswache'"&gt;Rettungswache&lt;/option&gt;</p>

    <p class="para_Quelltext">&lt;/select&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 12);</p>

    <p class="para_Quelltext">L.esri.basemapLayer('Gray').addTo(mymap);</p>

    <p class="para_Quelltext">var url = 'http://services.arcgis.com/OLiydejKCZTGhvWg/arcgis/rest/services/OSM_DE_Sicherheitseinrichtungen/FeatureServer/0 ';</p>

    <p class="para_Quelltext">var sicherheitseinrichtungen = document.getElementById('sicherheitseinrichtungenID');</p>

    <p class="para_Quelltext"><span id="__DdeLink__21180_777390906">var sicherheitseinrichtungenLayer = L.esri.featureLayer({ url: url }).addTo(mymap);</span></p>

    <p class="para_Quelltext">url: url</p>

    <p class="para_Quelltext">}).addTo(mymap);<span id="__DdeLink__21180_777390906">var sicherheitseinrichtungenLayer = L.esri.featureLayer({ url: url }).addTo(mymap);</span></p>

    <p class="para_Quelltext">var popupTemplate = "&lt;h3&gt;Details:&lt;/h3&gt;\n\</p>

    <p class="para_Quelltext">Land: {Land}&lt;br&gt;\n\</p>

    <p class="para_Quelltext">Kreis: {Kreis}&lt;br&gt;\n\</p>

    <p class="para_Quelltext">Gemeinde: {Gemeinde}&lt;br&gt;\n\</p>

    <p class="para_Quelltext">Stadt: {Stadt} &lt;br&gt;\n\</p>

    <p class="para_Quelltext">Typ: {Typ}, {Untertyp}";</p>

    <p class="para_Quelltext">sicherheitseinrichtungenLayer.bindPopup(function (layer){</p>

    <p class="para_Quelltext">return L.Util.template(popupTemplate, layer.feature.properties)</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">sicherheitseinrichtungen.addEventListener('change', function(){</p>

    <p class="para_Quelltext">sicherheitseinrichtungenLayer.setWhere(sicherheitseinrichtungen.value);</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_935.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was macht der Programmcode in diesem Beispiel konkret. Zunächst wird mit dem Befehl var sicherheitseinrichtungenLayer = L.esri.featureLayer({ url: url }).addTo(mymap); ein L.esri.featureLayer Objekt erstellt und dieses zur Karte hinzugefügt. Der nächste Schritt, der hier erwähnenswert ist, ist das Filtern der Daten. Dies erreichen wir mit der Zeile sicherheitseinrichtungenLayer.setWhere(sicherheitseinrichtungen.value);.</p>

    <p class="para_Text_body">Das Ergebnis sehen Sie in der nächsten Abbildung. Wenn Sie in der Auswahlliste den Eintrag Feuerwachen auswählen, werden nur die Feuerwachen auf der Karte als Marker angezeigt.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/933.png" alt=" Abbildung 66"/>

      <figcaption class="para_Illustration">Abbildung 66</figcaption>
    </figure>

    <p class="para_Text_body">933.png</p>

    <p class="para_Quotations">Möchten Sie selbst einen Feature-Service nutzen? Das Thema Sicherheitseinrichtungen passt aber nicht zum Thema Ihrer Website. Das Team von Esri Deutschland hat verschiedene Datensätze aus OpenStreetMap als Feature-Services veröffentlicht: <a class="extern" href="http://www.arcgis.com/home/group.html?id=0ef29288545f43e29d9a90581f8f5b20#overview">http://www.arcgis.com/home/group.html?id=0ef29288545f43e29d9a90581f8f5b20#overview</a>. Vielleicht ist dort ein Thema dabei, dass Sie gerne auf Ihrer Website mit einer Leaflet-Karte visualisieren möchten.</p>

    <div id="chapter-171" class="para_Heading_4">
      Abstand visualisieren
    </div>

    <p class="para_Text_body">Ein weiteres Merkmal, das auf Landkarten oft wichtig ist, ist die Entfernung zu einem Punkt. Oft möchte man gerne wissen, welche Objekte sich innerhalb eines bestimmten Abstands zu einer bestimmten Koordinate befinden. Diese Fragestellung beantwortet das nächste Beispiel.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html lang="de"&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;meta charset="utf-8"/&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="esri-leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid', {doubleClickZoom:false}).setView([50.27264, 7.26469], 12);</p>

    <p class="para_Quelltext">L.esri.basemapLayer('Gray').addTo(mymap);</p>

    <p class="para_Quelltext">var url = 'http://services.arcgis.com/OLiydejKCZTGhvWg/arcgis/rest/services/OSM_DE_Sicherheitseinrichtungen/FeatureServer/0 ';</p>

    <p class="para_Quelltext">var sicherheitseinrichtungen = document.getElementById('sicherheitseinrichtungenID');</p>

    <p class="para_Quelltext">var sicherheitseinrichtungenLayer = L.esri.featureLayer({</p>

    <p class="para_Quelltext">url: url,</p>

    <p class="para_Quelltext">pointToLayer: function (geojson, latlng) {</p>

    <p class="para_Quelltext">return L.circleMarker(latlng);</p>

    <p class="para_Quelltext">},</p>

    <p class="para_Quelltext">style:{</p>

    <p class="para_Quelltext">color: '#5B7CBA',</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">var popupTemplate = "&lt;h3&gt;Details:&lt;/h3&gt;\n\</p>

    <p class="para_Quelltext">Land: {Land}&lt;br&gt;\n\</p>

    <p class="para_Quelltext">Kreis: {Kreis}&lt;br&gt;\n\</p>

    <p class="para_Quelltext">Gemeinde: {Gemeinde}&lt;br&gt;\n\</p>

    <p class="para_Quelltext">Stadt: {Stadt} &lt;br&gt;\n\</p>

    <p class="para_Quelltext">Typ: {Typ}, {Untertyp}";</p>

    <p class="para_Quelltext">sicherheitseinrichtungenLayer.bindPopup(function (layer){</p>

    <p class="para_Quelltext">return L.Util.template(popupTemplate, layer.feature.properties)</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">var nearbyIds = [];</p>

    <p class="para_Quelltext">mymap.on('click', function(e){</p>

    <p class="para_Quelltext">sicherheitseinrichtungenLayer.query()<span id="__DdeLink__21733_777390906">.nearby(e.latlng, 5000)</span>nearby<span id="__DdeLink__21735_777390906">nearby</span>.ids(function(error, ids){</p>

    <p class="para_Quelltext">for (var j = 0; j &lt; nearbyIds.length; j++) {</p>

    <p class="para_Quelltext">sicherheitseinrichtungenLayer.resetStyle(nearbyIds[j]);</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">nearbyIds = ids;</p>

    <p class="para_Quelltext">for (var i = 0; i &lt; ids.length; i++) {</p>

    <p class="para_Quelltext">sicherheitseinrichtungenLayer.setFeatureStyle(ids[i], {</p>

    <p class="para_Quelltext">color: '#BA454E',</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">}</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">});</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext"><span id="__DdeLink__41519_777390906">&lt;!--index_934.html--</span>&gt;</p>

    <p class="para_Text_body">934.html</p>

    <p class="para_Text_body">Das haben wir gemacht? Zunächst werden im Beispiel, wie im vorhergehenden Beispiel, Sicherheitseinrichtungen mithilfe des Objektes L.esri.featureLayer zur Karte hinzugefügt. Zur Abwechslung habe ich hier einen kreisförmigen Marker verwendet. Danach rufen wir die Funktion nearby() des Objektes <a class="extern" href="https://esri.github.io/esri-leaflet/api-reference/tasks/query.html">L.esri.Query</a> () für jedem Marker aus. Alle die Marker, die sich in einem Abstand von 5000 Metern befinden, werden im Anschluss rot gefärbt.</p>

    <p class="para_Text_body">Das Ergebnis sehen Sie im nächsten Bild. Sobald Sie einen Punkt auf der Karte anklicken, werden alle Marker im Abstand von 5000 Metern um die angeklickte Stelle rot hervorgehoben.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/934.png" alt=" Abbildung 67"/>

      <figcaption class="para_Illustration">Abbildung 67</figcaption>
    </figure>

    <p class="para_Text_body">934.png</p>

    <div id="chapter-172" class="para_Heading_2">
      In diesem Kapitel haben wir …
    </div>

    <p class="para_Text_body">In diesem Teil haben wir uns als Erstes die Karten, die <a class="extern" href="https://de.wikipedia.org/wiki/ESRI">ESRI</a> anbietet, angesehen. Danach haben wir mit einem Shapefile gearbeitet und ESRI Webservices genutzt. Sie wissen nun was ein L.esri.DynamicMapLayer Geocoding und ein L.esri.FeatureLayer ist. Mit letztgenanntem können Sie unter anderem Daten, die Sie nicht benötigen, einfach aus der gegebenen Datenmenge herausfiltern.</p>

    <p class="para_Text_body"><br/><br/></p>

    <div id="chapter-173" class="para_Heading_1">
      Routing
    </div>

    <p class="para_Text_body">Last, but not least möchte ich Ihnen ein Routing Plugin vorstellen, nämlich die <a class="extern" href="https://github.com/perliedman/leaflet-routing-machine">Leaflet Routing Machine</a> von <a class="extern" href="http://www.liedman.net/leaflet-routing-machine/">Per Liedmann</a>.</p>

    <p class="para_Quotations">Falls Sie lieber die Version des Environmental Systems Research Institute ESRI einsetzen möchten, finden Sie alle Informationen hierfür unter der Adresse <a class="extern" href="https://github.com/jgravois/lrm-esri">https://github.com/jgravois/lrm-esri</a>.</p>

    <div id="chapter-174" class="para_Heading_2">
      In diesem Kapitel werden wir …
    </div>

    <p class="para_Text_body"><span id="__DdeLink__24191_777390906">Als Erstes sehen wir uns kurz an, was sich hinter dem Begriff Routing versteckt. Danach werden wir das Plugin Leaflet Routing Machine in unsere Leaflet Karte integrieren. Dieses Plugin stellt zwei Textfelder zur Eingabe von Adressen zur Verfügung und berechnet auf Anforderung eine Route zwischen diesen beiden Adressen. Im weiteren Verlauf nutzen wir Optionen, um die Routen Berechnung flexibler und benutzerfreundlicher zu machen.</span>Adressen zur Verfügung und berechnet auf Anforderung eine Route zwischen diesen beiden Adressen. Im weiteren Verlauf nutzen wir Optionen, um die Routen Berechnung flexibler und benutzerfreundlicher zu machen.</p>

    <div id="chapter-175" class="para_Heading_2">
      Allgemeines zum Thema Routing…
    </div>

    <p class="para_Text_body">Fangen wir von vorne an. Es ist nämlich meiner Meinung nach auch spannend, einmal etwas über den Tellerrand zu blicken. Reicht es Ihnen, wenn sie zwei Adressen eingeben könnten und einen Weg zwischen diesen beiden Adressen als Ergebnis ausgegeben bekommen? Oder, möchten Sie etwas genauer wissen, was sich hinter dem Begriff Routing genau verbirgt? Wenn ersteres auf Sie zutrifft, dann lesen Sie am besten im nächsten Kapitel weiter. Ansonsten ist meine kurze Zusammenfassung hier im Kapitel vielleicht interessant für Sie.</p>

    <p class="para_Text_body">Das Planen einer Route, beziehungsweise das Berechnen einer Route kann von einer Software oder einem Dienst effizient durchgeführt werden. Dazu müssen die Daten der Karte, auf der die Berechnung ausgeführt werden soll, bestimmte Informationen enthalten. Die Daten von OpenStreetMap beinhalten Informationen, um Routen für verschiedene Profile berechnen zu können. Eine Route kann zum Beispiel für die Nutzung eines Autos oder eines Fahrrads unterschiedlich berechnet werden. Auch Optionen wie zu Fuß oder mit dem Pferd sind mit OpenStreetMap Daten möglich.</p>

    <p class="para_Text_body">Damit die Software zur Routen-Berechnung fehlerfrei funktioniert müssen diese Daten qualitativ gut sein. Das bedeutet, dass Linien – also zum Beispiel Straßen – die verbunden sein sollen, auch wirklich verbunden sind. Umgekehrt dürfen Straßen, die sich auf verschieden Ebenen mithilfe von Brücken kreuzen, nicht verbunden sein. Das bedeutet auch, dass Poller oder Absperrpfosten, an denen kein Auto vorbeikommt, auch als solche eingezeichnet sind. Ganz wichtig ist es, dass Abbiegeverbote an Kreuzungen auf der Karte klar gekennzeichnet sind. Wie OpenStreetMap das macht, können Sie unter anderem auf der Website <a class="extern" href="http://wiki.openstreetmap.org/wiki/OSM_tags_for_routing">http://wiki.openstreetmap.org/wiki/OSM_tags_for_routing</a> nachlesen.</p>

    <p class="para_Text_body">Um bei der Routen-Berechnung die schnellste Route bestimmen zu können, sind Geschwindigkeitsangaben notwendig. OpenStreetMap speichert für jede Straße den Standardhöchstwert für deutsche Straßen. Dieser Standardwerte kann jedoch für bestimmte Straßen anders sein. In diesem Fall ist es notwendig, dass beim Erstellung des Straßen-Objektes die zulässige Höchstgeschwindigkeit mit einem speziellen Tag hinzufügt wird. Nebenbei haben auch andere Faktoren, wie Kurven, Steigungen oder Straßenbelag einen Einfluss auf die Geschwindigkeit – und dieser ist je nach Profil noch einmal unterschiedlich. Eine Steigung verringert die Geschwindigkeit eines Fahrrades mehr, als die eines Autos. Dafür wird der Fußgänger in Kurven nicht so viel an Geschwindigkeit verlieren wie ein Fahrrad.</p>

    <p class="para_Text_body">Aber auch dann, wenn die Kartendaten sehr gut und fehlerfrei sind, ist es nicht trivial die ideale Software zur Routen-Berechnung zu erstellen. Hinzu kommen nämlich noch die Besonderheiten des Personenkreises, für den die Route erstellt werden soll. Welche Wege sollen berücksichtigt werden, wenn ein Radfahrer nicht gerne durch die Stadt fährt, aber gerne im Wald unterwegs ist. Wie wählen wir die beste Strecke für einen Radfahrer der überwiegend in der Nacht trainiert? Oft kommt es sicher auch vor, dass eine Radtour geplant wird, bei der so viele Sehenswürdigkeiten wie möglich unmittelbar am Weg liegen sollten. Sie sehen: Die Berechnung einer optimalen Route ist etwas sehr Individuelles!</p>

    <p class="para_Text_body">Sehen wir uns also an, inwieweit das Plugin Leaflet Routing Machine diese individuellen Anforderungen erfüllt.</p>

    <div id="chapter-176" class="para_Heading_2">
      Leaflet Routing Maching
    </div>

    <p class="para_Text_body">Nachfolgende finden Sie das erste Beispiel für diesen Themenbereich.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext"><span id="__DdeLink__42483_777390906">&lt;script src="leaflet-routing-machine.js"&gt;&lt;/script&gt; &lt;link rel="stylesheet" href="leaflet-routing-machine.css"/</span></p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="leaflet-routing-machine.css"/<span id="__DdeLink__42483_777390906">&lt;script src="leaflet-routing-machine.js"&gt;&lt;/script&gt; &lt;link rel="stylesheet" href="leaflet-routing-machine.css"/</span></p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 13);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var control = L.Routing.control({</p>

    <p class="para_Quelltext">waypoints: [</p>

    <p class="para_Quelltext">L.latLng(50.273543, 7.262993),</p>

    <p class="para_Quelltext">L.latLng(50.281168, 7.276211)</p>

    <p class="para_Quelltext">],</p>

    <p class="para_Quelltext">router: L.Routing.mapbox('pk.ihrkey')</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext"><span id="__DdeLink__41711_777390906">&lt;!--index_932.html--</span>2.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Was haben wir genau gemacht? Zunächst einmal haben wir die, für die Verwendung der <a class="extern" href="http://www.liedman.net/leaflet-routing-machine/">Leaflet Routing Machine</a> erforderlichen Dateien, eingebunden. Verantwortlich hierfür sind die Zeilen</p>

    <p class="para_Text_body">&lt;script src="leaflet-routing-machine.js"&gt;&lt;/script&gt;</p>

    <p class="para_Text_body">&lt;link rel="stylesheet" href="leaflet-routing-machine.css"/&gt;.</p>

    <p class="para_Text_body">Die aktuellen Dateien zum Plugin finden Sie unter der Adresse <a class="extern" href="https://github.com/perliedman/leaflet-routing-machine/releases">https://github.com/perliedman/leaflet-routing-machine/releases</a>. Als Nächstes haben wir mit dem Textblock</p>

    <p class="para_Text_body">var control = L.Routing.control({</p>

    <p class="para_Text_body">waypoints: [</p>

    <p class="para_Text_body">L.latLng(50.273543, 7.262993),</p>

    <p class="para_Text_body">L.latLng(50.281168, 7.276211)</p>

    <p class="para_Text_body">],</p>

    <p class="para_Text_body">router: L.Routing.mapbox('pk.ihrkey')</p>

    <p class="para_Text_body">}).addTo(mymap);</p>

    <p class="para_Text_body">ein L.Routing.control erstellt und dieses zur Karte hinzugefügt. Die Koordinaten, zwischen denen eine Route berechnet werden soll, haben wir mit der Option waypoints an das Control übergeben. Außerdem haben wir einen Router, also eine Software, die die Route berechnen soll, mit dem Eintrag router: L.Routing.mapbox('pk.ihrkey') festgelegt. Für die Nutzung des Mapbox Routers benötigen Sie ein Zugriffstoken. Dieses können Sie unter der Adresse <a class="extern" href="https://www.mapbox.com/api-documentation/#access-tokens">https://www.mapbox.com/api-documentation/#access-tokens</a> anfordern. In dieser Dokumentation finden Sie auch weitere Informationen zum Router und zu den Lizenzbedingungen.</p>

    <p class="para_Quotations">Wenn Sie die Option router nicht belegen, wird standardmäßig die Open Source Routing Machine – <a class="extern" href="http://project-osrm.org/">http://project-osrm.org/</a> – genutzt. Für diesen freien Router benötigen Sie kein Zugriffstoken. Leider ist dieser aber nicht so zuverlässig wie Mapbox.</p>

    <p class="para_Text_body">Die nächste Abbildung zeigt Ihnen unseren bisherigen Stand. Die Route wird berechnet und im rechten oberen Teil angezeigt. Leider werden Sie aber über eine Straße, auf der viele Autos fahren, geführt, dabei möchten Sie gerne wandern. Außerdem sind die Texte in englischer Sprache. Das geht sicher besser!</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/927.png" alt=" Abbildung 68"/>

      <figcaption class="para_Illustration">Abbildung 68</figcaption>
    </figure>

    <p class="para_Text_body"><br/><br/></p>

    <div id="chapter-177" class="para_Heading_2">
      Options
    </div>

    <p class="para_Text_body">Das nächste Beispiel zeigt Ihnen, wie Sie die Sprache und das Routing Profil verändern können.</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-routing-machine.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="leaflet-routing-machine.css" /&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 13);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var control = L.Routing.control({</p>

    <p class="para_Quelltext">waypoints: [</p>

    <p class="para_Quelltext">L.latLng(50.273543, 7.262993),</p>

    <p class="para_Quelltext">L.latLng(50.281168, 7.276211)</p>

    <p class="para_Quelltext">],</p>

    <p class="para_Quelltext">router: L.Routing.mapbox('pk.ihrkey'),</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">profile: 'mapbox/walking',</p>

    <p class="para_Quelltext">language: 'de'</p>

    <p class="para_Quelltext">}),</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_931.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Der Mapbox Router bietet Ihnen unter anderem die Optionen profil und language. Die Namen sagen es schon aus. Als <a class="extern" href="https://www.mapbox.com/api-documentation/#retrieve-directions">Profil</a> können Sie einstellen, ob Sie wandern oder lieber mit dem Auto fahren möchten und die Option <a class="extern" href="https://www.mapbox.com/api-documentation/#instructions-languages">language</a> bietet Ihnen eine Menge unterschiedlicher Sprachen. Möchten Sie noch etwas anderes ändern? Die Dokumentation zum Router von Mapbox finden Sie unter der Adresse <a class="extern" href="https://www.mapbox.com/api-documentation/#introduction">https://www.mapbox.com/api-documentation/#introduction</a>.</p>

    <p class="para_Quotations">Wenn Sie lieber eine andere Software zur Berechnung der Route nutzen möchten, können Sie dies tun. Die Leaflet Routing Machine bietet Ihnen viele Möglichkeiten. Weitere Informationen, Demos und Tutorials zur Leaflet Routing Machine finden Sie auf der Website: <a class="extern" href="http://www.liedman.net/leaflet-routing-machine/">http://www.liedman.net/leaflet-routing-machine/</a>.</p>

    <p class="para_Text_body">Im nächsten Bild sehen Sie, dass das Routing nun eher zu einem Wanderer passt und die Texte sind auch in deutscher Sprache. Das ist schon einmal gut. Aber es geht ja meist noch besser. Wahrscheinlich möchten Sie, dass die Adressen, zwischen denen geroutet wird, variabel auf der Karte verändern werden können. Das wollte ich als Nächstes und deshalb habe ich dies im nächsten Beispiel umgesetzt.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/926.png" alt=" Abbildung 69"/>

      <figcaption class="para_Illustration">Abbildung 69</figcaption>
    </figure>

    <br/>

    <div id="chapter-178" class="para_Heading_2">
      Geocoding
    </div>

    <p class="para_Text_body">Bisher wurde die Route ausschließlich anhand von Koordinaten berechnet. Menschen nutzen aber lieber Texte in Form von Adressen. Das Geocoding Adressen in Koordinaten verwandelt – beziehungsweise Koordinaten in Adressen verwandelt – haben Sie im Kapitel Geocoding schon lesen können. Hier im Beispiel kombinieren wir nun Routing und Geocoding. Sehen Sie selbst:</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Quelltext">&lt;!DOCTYPE HTML&gt;</p>

    <p class="para_Quelltext">&lt;html&gt;</p>

    <p class="para_Quelltext">&lt;head&gt;</p>

    <p class="para_Quelltext">&lt;title&gt;Eine OpenStreetMap Karte mit Leaflet&lt;/title&gt;</p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="../leaflet/leaflet.css" /&gt;</p>

    <p class="para_Quelltext">&lt;script src="../leaflet/leaflet.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;script src="leaflet-routing-machine.js"&gt;&lt;/script&gt;</p>

    <p class="para_Quelltext"><span id="__DdeLink__42096_777390906">&lt;script src="Control.Geocoder.js"&gt;&lt;/script&gt; &lt;link rel="stylesheet" href="Control.Geocoder.css" /</span></p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="Control.Geocoder.css" /<span id="__DdeLink__42096_777390906">&lt;script src="Control.Geocoder.js"&gt;&lt;/script&gt; &lt;link rel="stylesheet" href="Control.Geocoder.css" /</span></p>

    <p class="para_Quelltext">&lt;link rel="stylesheet" href="leaflet-routing-machine.css" /&gt;</p>

    <p class="para_Quelltext">&lt;/head&gt;</p>

    <p class="para_Quelltext">&lt;body&gt;</p>

    <p class="para_Quelltext">&lt;div style="height: 700px;" id="mapid"&gt;&lt;/div&gt;</p>

    <p class="para_Quelltext">&lt;script&gt;</p>

    <p class="para_Quelltext">var mymap = L.map('mapid').setView([50.27264, 7.26469], 13);</p>

    <p class="para_Quelltext">L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mymap);</p>

    <p class="para_Quelltext">var control = L.Routing.control({</p>

    <p class="para_Quelltext">waypoints: [</p>

    <p class="para_Quelltext">L.latLng(50.273543, 7.262993),</p>

    <p class="para_Quelltext">L.latLng(50.281168, 7.276211)</p>

    <p class="para_Quelltext">],</p>

    <p class="para_Quelltext">router: L.Routing.mapbox('pk.ihrkey'),</p>

    <p class="para_Quelltext">{</p>

    <p class="para_Quelltext">language: 'de'</p>

    <p class="para_Quelltext">}),</p>

    <p class="para_Quelltext">geocoder: L.Control.Geocoder.nominatim({})</p>

    <p class="para_Quelltext">}).addTo(mymap);</p>

    <p class="para_Quelltext">&lt;/script&gt;</p>

    <p class="para_Quelltext">&lt;/body&gt;</p>

    <p class="para_Quelltext">&lt;/html&gt;</p>

    <p class="para_Quelltext">&lt;!--index_930.html--&gt;</p>

    <p class="para_Text_body"><br/><br/></p>

    <p class="para_Text_body">Dieses Beispiel haben wir mit dem Plugin <a class="extern" href="https://github.com/perliedman/leaflet-control-geocoder">Geocoder Control</a> erweitert. Konkret haben wir mithilfe der Zeilen</p>

    <p class="para_Text_body">&lt;script src="Control.Geocoder.js"&gt;&lt;/script&gt;</p>

    <p class="para_Text_body">&lt;link rel="stylesheet" href="Control.Geocoder.css"/&gt;</p>

    <p class="para_Text_body">die Skript-Datei und die CSS-Datei des <a class="extern" href="https://github.com/perliedman/leaflet-control-geocoder">Geocoder Control</a> von Per Liedmann eingebunden. Die aktuellste Version dieses Plugins können Sie unter der Adresse <a class="extern" href="https://github.com/perliedman/leaflet-control-geocoder/releases">https://github.com/perliedman/leaflet-control-geocoder/releases</a> herunter laden. Danach haben wir die Option geocoder des Plugins Leaflet Routing Machine mit dem Wert L.Control.Geocoder.nominatim({}) belegt. Und das war es schon!</p>

    <p class="para_Text_body">Als Ergebnis sehen Sie nun zwei Textfelder im oberen rechten Bereich auf Ihrer Karte. In diese können Sie Adressen eingeben und so Ihre Route benutzerfreundlich abändern.</p>

    <figure class="image_container left-align" style="width:642px;">
      <img src="../Images/925.png" alt=" Abbildung 70"/>

      <figcaption class="para_Illustration">Abbildung 70</figcaption>
    </figure>

    <p class="para_Text_body"><br/><br/></p>

    <div id="chapter-179" class="para_Heading_2">
      In diesem Kapitel haben wir …
    </div>

    <p class="para_Text_body">Gegenstand dieses Kapitels war Routing. Wir haben uns kurz angesehen, was Kartendaten bieten müssen, um die Berechnung einer Route zu ermöglichen. Dass die Kartendaten aber nicht alles sind und eine Route etwas sehr Individuelles sein kann, wurde dabei auch klar. Danach haben wir das Plugin Leaflet Routing Machine in unsere Leaflet Karte integriert und mithilfe von Optionen und Geocoding flexibler und benutzerfreundlicher gemacht.</p>

    <div id="chapter-180" class="para_Heading_1">
      Auf Wiedersehen
    </div>

    <p class="para_Text_body">Ich hoffe, dass Ihnen der Rundgang durch LeafletJs gefallen hat und Sie jede Menge für sich mitnehmen konnten.</p>
  </div>
</body>
</html>